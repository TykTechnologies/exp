[
  {
    "ID": "github.com/TykTechnologies/exp/cmd/go-fsck/example",
    "Package": "example",
    "ImportPath": "github.com/TykTechnologies/exp/cmd/go-fsck/example",
    "Path": ".",
    "TestPackage": false,
    "Doc": "Example package doc.",
    "Imports": {
      "example.go": [
        "\"net/http\""
      ],
      "generic.go": [
        "\"sync\""
      ]
    },
    "Types": [
      {
        "Kind": "type",
        "File": "generic.go",
        "SelfContained": false,
        "Doc": "Allocator holds a sync.Pool of objects of type T.",
        "Name": "Allocator",
        "Source": "// Allocator holds a sync.Pool of objects of type T.\ntype Allocator[T Reseter] struct {\n\tpool sync.Pool\n}"
      },
      {
        "Kind": "type",
        "File": "example.go",
        "SelfContained": true,
        "Doc": "Body represends a decoded body",
        "Name": "Body",
        "Source": "// Body represends a decoded body\ntype Body struct {\n\tName string\n}"
      },
      {
        "Kind": "type",
        "File": "example.go",
        "SelfContained": false,
        "Doc": "File represents a filename",
        "Name": "File",
        "Source": "// File represents a filename\ntype File string"
      },
      {
        "Kind": "type",
        "File": "generic.go",
        "SelfContained": true,
        "Doc": "Reseter is the interface that types must implement to be managed by Allocator.",
        "Name": "Reseter",
        "Source": "// Reseter is the interface that types must implement to be managed by Allocator.\ntype Reseter interface {\n\tReset()\n}"
      },
      {
        "Kind": "type",
        "File": "internal.go",
        "SelfContained": true,
        "Name": "logger",
        "Source": "type logger struct {\n\tout []string\n}"
      }
    ],
    "Consts": [
      {
        "Kind": "const",
        "File": "example.go",
        "SelfContained": true,
        "Doc": "Const comment",
        "Name": "E_WARNING",
        "Source": "// Const comment\nconst E_WARNING = \"warning\"\t// const line comment\n"
      }
    ],
    "Vars": [
      {
        "Kind": "var",
        "File": "example.go",
        "SelfContained": true,
        "Names": [
          "exampleGroup1",
          "exampleGroup2"
        ],
        "Source": "// Comment outer\nvar (\n\t// Comment inner\n\texampleGroup1\t= \"Hello\"\n\texampleGroup2\t= \"There\"\n)"
      },
      {
        "Kind": "var",
        "File": "example.go",
        "SelfContained": true,
        "Doc": "Comment outer",
        "Name": "exampleGroup3",
        "Source": "// Comment outer\nvar exampleGroup3 = \"Sir\""
      }
    ],
    "Funcs": [
      {
        "Kind": "func",
        "File": "example.go",
        "SelfContained": false,
        "Doc": "Global func comment",
        "Name": "GlobalFunc",
        "Returns": [
          "error"
        ],
        "Signature": "GlobalFunc () error",
        "Source": "// Global func comment\nfunc GlobalFunc() error {\n\t// holds the error\n\tvar err error\t// the err var\n\n\t// inline comment\n\terr = nil\n\n\treturn err\n}"
      },
      {
        "Kind": "func",
        "File": "generic.go",
        "SelfContained": false,
        "References": {
          "sync": [
            "Pool"
          ]
        },
        "Doc": "New creates an Allocator for type T using the provided constructor.",
        "Name": "New",
        "Arguments": [
          "func() T"
        ],
        "Returns": [
          "*Allocator[T]"
        ],
        "Signature": "New (newFunc func() T) *Allocator[T]",
        "Source": "// New creates an Allocator for type T using the provided constructor.\nfunc New[T Reseter](newFunc func() T) *Allocator[T] {\n\treturn \u0026Allocator[T]{\n\t\tpool: sync.Pool{\n\t\t\tNew: func() any {\n\t\t\t\treturn newFunc()\n\t\t\t},\n\t\t},\n\t}\n}"
      },
      {
        "Kind": "func",
        "File": "generic.go",
        "SelfContained": false,
        "Doc": "Get retrieves an object from the internal pool.",
        "Name": "Get",
        "Receiver": "*Allocator[T]",
        "Returns": [
          "T"
        ],
        "Signature": "Get () T",
        "Source": "// Get retrieves an object from the internal pool.\nfunc (a *Allocator[T]) Get() T {\n\treturn a.pool.Get().(T)\t//nolint\n}"
      },
      {
        "Kind": "func",
        "File": "generic.go",
        "SelfContained": false,
        "Doc": "Put returns an object to the pool after resetting it.",
        "Name": "Put",
        "Receiver": "*Allocator[T]",
        "Arguments": [
          "T"
        ],
        "Signature": "Put (t T)",
        "Source": "// Put returns an object to the pool after resetting it.\nfunc (a *Allocator[T]) Put(t T) {\n\tt.Reset()\n\ta.pool.Put(t)\n}"
      },
      {
        "Kind": "func",
        "File": "internal.go",
        "SelfContained": false,
        "Name": "Log",
        "Receiver": "*logger",
        "Arguments": [
          "string"
        ],
        "Signature": "Log (s string)",
        "Source": "func (l *logger) Log(s string) {\n\tl.out = append(l.out, s)\n}"
      }
    ]
  },
  {
    "ID": "github.com/TykTechnologies/exp/cmd/go-fsck/example [github.com/TykTechnologies/exp/cmd/go-fsck/example.test]",
    "Package": "example_test",
    "ImportPath": "github.com/TykTechnologies/exp/cmd/go-fsck/example_test",
    "Path": ".",
    "TestPackage": true,
    "Doc": "Example package doc.",
    "Imports": {
      "example_test.go": [
        "\"testing\"",
        "\"github.com/stretchr/testify/assert\""
      ]
    },
    "Types": [],
    "Consts": [],
    "Vars": [],
    "Funcs": [
      {
        "Kind": "func",
        "File": "example_test.go",
        "SelfContained": false,
        "References": {
          "assert": [
            "True",
            "NoError"
          ]
        },
        "Name": "TestExample",
        "Arguments": [
          "*testing.T"
        ],
        "Signature": "TestExample (t *testing.T)",
        "Source": "func TestExample(t *testing.T) {\n\tassert.True(t, true)\n\tassert.NoError(t, GlobalFunc())\n}"
      }
    ]
  },
  {
    "ID": "github.com/TykTechnologies/exp/cmd/go-fsck/example_test [github.com/TykTechnologies/exp/cmd/go-fsck/example.test]",
    "Package": "example_test",
    "ImportPath": "github.com/TykTechnologies/exp/cmd/go-fsck/example_test",
    "Path": ".",
    "TestPackage": true,
    "Doc": "",
    "Imports": {
      "printer_test.go": [
        "\"fmt\"",
        "\"go/parser\"",
        "\"go/printer\"",
        "\"go/token\"",
        "\"io\"",
        "\"strings\"",
        "\"testing\"",
        "\"github.com/stretchr/testify/assert\"",
        "\"github.com/TykTechnologies/exp/cmd/go-fsck/internal/ast\""
      ]
    },
    "Types": [],
    "Consts": [],
    "Vars": [],
    "Funcs": [
      {
        "Kind": "func",
        "File": "printer_test.go",
        "SelfContained": false,
        "References": {
          "printer": [
            "Fprint"
          ]
        },
        "Name": "PrintSource",
        "Arguments": [
          "io.Writer",
          "*token.FileSet",
          "any"
        ],
        "Returns": [
          "error"
        ],
        "Signature": "PrintSource (out io.Writer, fset *token.FileSet, node any) error",
        "Source": "func PrintSource(out io.Writer, fset *token.FileSet, node any) error {\n\treturn printer.Fprint(out, fset, node)\n}"
      },
      {
        "Kind": "func",
        "File": "printer_test.go",
        "SelfContained": false,
        "References": {
          "assert": [
            "NoError"
          ],
          "ast": [
            "PrintSource"
          ],
          "fmt": [
            "Println"
          ],
          "parser": [
            "ParseDir",
            "ParseComments"
          ],
          "printer": [
            "CommentedNode"
          ],
          "strings": [
            "Builder"
          ],
          "token": [
            "NewFileSet"
          ]
        },
        "Name": "TestPrinter",
        "Arguments": [
          "*testing.T"
        ],
        "Signature": "TestPrinter (t *testing.T)",
        "Source": "func TestPrinter(t *testing.T) {\n\tfset := token.NewFileSet()\n\tfs, err := parser.ParseDir(fset, \".\", nil, parser.ParseComments)\n\tassert.NoError(t, err)\n\n\tfor _, pkg := range fs {\n\t\tfor _, f := range pkg.Files {\n\t\t\tfor _, decl := range f.Decls {\n\t\t\t\tvar out strings.Builder\n\t\t\t\tx := \u0026printer.CommentedNode{\n\t\t\t\t\tNode:\t\tdecl,\n\t\t\t\t\tComments:\tf.Comments,\n\t\t\t\t}\n\t\t\t\tassert.NoError(t, ast.PrintSource(\u0026out, fset, x))\n\t\t\t\tfmt.Println(out.String())\n\t\t\t}\n\t\t}\n\t}\n}"
      }
    ]
  }
]
