[
  {
    "ID": "github.com/TykTechnologies/exp/cmd/go-fsck/model",
    "Package": "model",
    "ImportPath": "github.com/TykTechnologies/exp/cmd/go-fsck/model",
    "Path": ".",
    "TestPackage": false,
    "Doc": "",
    "Imports": {
      "declaration.go": [
        "\"go/ast\"",
        "\"strings\""
      ],
      "declaration_list.go": [
        "\"go/ast\"",
        "\"sort\"",
        "\"strings\""
      ],
      "definition.go": [
        "\"strings\""
      ],
      "package.go": [
        "\"fmt\"",
        "\"golang.org/x/tools/go/packages\""
      ],
      "string_set.go": [
        "\"fmt\"",
        "\"path\"",
        "\"slices\"",
        "\"sort\"",
        "\"strings\""
      ]
    },
    "Types": [
      {
        "Kind": "type",
        "File": "declaration.go",
        "SelfContained": true,
        "Name": "Declaration",
        "Source": "type Declaration struct {\n\tKind\tDeclarationKind\n\tFile\tstring\n\n\tSelfContained\tbool\n\n\tImports\t[]string\t`json:\",omitempty\"`\n\n\tReferences\tmap[string][]string\t`json:\",omitempty\"`\n\n\tDoc\tstring\t`json:\",omitempty\"`\n\n\tName\t\tstring\t\t`json:\",omitempty\"`\n\tNames\t\t[]string\t`json:\",omitempty\"`\n\tReceiver\tstring\t\t`json:\",omitempty\"`\n\n\tArguments\t[]string\t`json:\",omitempty\"`\n\tReturns\t\t[]string\t`json:\",omitempty\"`\n\n\tSignature\tstring\t`json:\",omitempty\"`\n\tSource\t\tstring\t`json:\",omitempty\"`\n}"
      },
      {
        "Kind": "type",
        "File": "declaration_kind.go",
        "SelfContained": false,
        "Name": "DeclarationKind",
        "Source": "type DeclarationKind string"
      },
      {
        "Kind": "type",
        "File": "declaration_list.go",
        "SelfContained": false,
        "Name": "DeclarationList",
        "Source": "type DeclarationList []*Declaration"
      },
      {
        "Kind": "type",
        "File": "definition.go",
        "SelfContained": true,
        "Name": "Definition",
        "Source": "type Definition struct {\n\tPackage\n\n\tDoc\tstring\n\n\tImports\tStringSet\n\tTypes\tDeclarationList\n\tConsts\tDeclarationList\n\tVars\tDeclarationList\n\tFuncs\tDeclarationList\n}"
      },
      {
        "Kind": "type",
        "File": "package.go",
        "SelfContained": false,
        "Name": "Package",
        "Source": "type Package struct {\n\t// ID is the ID of the package as x/tools packages loads it.\n\tID\tstring\n\t// Package is the name of the package.\n\tPackage\tstring\n\t// ImportPath contains the import path (github...).\n\tImportPath\tstring\n\t// Path is sanitized to contain the relative location (folder).\n\tPath\tstring\n\t// TestPackage is true if this is a test package.\n\tTestPackage\tbool\n\n\t// Pkg serves to carry ast package information, preventing a double Load().\n\t// It's used during analysis and merging and discarded for the result.\n\tPkg\t*packages.Package\t`json:\"-\"`\n}"
      },
      {
        "Kind": "type",
        "File": "string_set.go",
        "SelfContained": false,
        "Name": "StringSet",
        "Source": "type StringSet map[string][]string"
      }
    ],
    "Consts": [
      {
        "Kind": "const",
        "File": "const.go",
        "SelfContained": true,
        "Names": [
          "StructKind",
          "ImportKind",
          "ConstKind",
          "TypeKind",
          "FuncKind",
          "VarKind",
          "CommentKind"
        ],
        "Source": "const (\n\tStructKind\tDeclarationKind\t= \"struct\"\n\tImportKind\t\t\t= \"import\"\n\tConstKind\t\t\t= \"const\"\n\tTypeKind\t\t\t= \"type\"\n\tFuncKind\t\t\t= \"func\"\n\tVarKind\t\t\t\t= \"var\"\n\tCommentKind\t\t\t= \"comment\"\n)"
      }
    ],
    "Vars": [],
    "Funcs": [
      {
        "Kind": "func",
        "File": "declaration.go",
        "SelfContained": false,
        "Name": "Equal",
        "Receiver": "*Declaration",
        "Arguments": [
          "*Declaration"
        ],
        "Returns": [
          "bool"
        ],
        "Signature": "Equal (in *Declaration) bool",
        "Source": "func (d *Declaration) Equal(in *Declaration) bool {\n\tif d.File == in.File \u0026\u0026 d.Kind == in.Kind \u0026\u0026 d.Name == in.Name {\n\t\treturn true\n\t}\n\treturn false\n}"
      },
      {
        "Kind": "func",
        "File": "declaration.go",
        "SelfContained": false,
        "Name": "HasName",
        "Receiver": "*Declaration",
        "Arguments": [
          "string"
        ],
        "Returns": [
          "bool"
        ],
        "Signature": "HasName (find string) bool",
        "Source": "func (d *Declaration) HasName(find string) bool {\n\tfor _, name := range d.Names {\n\t\tif name == find {\n\t\t\treturn true\n\t\t}\n\t}\n\treturn d.Name == find\n}"
      },
      {
        "Kind": "func",
        "File": "declaration.go",
        "SelfContained": false,
        "References": {
          "ast": [
            "IsExported"
          ],
          "strings": [
            "TrimLeft"
          ]
        },
        "Name": "IsExported",
        "Receiver": "*Declaration",
        "Returns": [
          "bool"
        ],
        "Signature": "IsExported () bool",
        "Source": "func (d *Declaration) IsExported() bool {\n\tif d.Receiver != \"\" \u0026\u0026 !ast.IsExported(strings.TrimLeft(d.Receiver, \"*\")) {\n\t\treturn false\n\t}\n\n\tfor _, name := range d.Names {\n\t\tif ast.IsExported(name) {\n\t\t\treturn true\n\t\t}\n\t}\n\treturn ast.IsExported(d.Name)\n}"
      },
      {
        "Kind": "func",
        "File": "declaration.go",
        "SelfContained": false,
        "References": {
          "strings": [
            "Trim"
          ]
        },
        "Name": "Keys",
        "Receiver": "*Declaration",
        "Returns": [
          "[]string"
        ],
        "Signature": "Keys () []string",
        "Source": "func (d *Declaration) Keys() []string {\n\ttrimPath := \"*.\"\n\tif d.Name != \"\" {\n\t\treturn []string{\n\t\t\tstrings.Trim(d.Receiver+\".\"+d.Name, trimPath),\n\t\t}\n\t}\n\tif len(d.Names) != 0 {\n\t\tresult := make([]string, len(d.Names))\n\t\tfor k, v := range d.Names {\n\t\t\tresult[k] = strings.Trim(d.Receiver+\".\"+v, trimPath)\n\t\t}\n\t}\n\treturn nil\n}"
      },
      {
        "Kind": "func",
        "File": "declaration_list.go",
        "SelfContained": false,
        "Name": "Append",
        "Receiver": "*DeclarationList",
        "Arguments": [
          "...*Declaration"
        ],
        "Signature": "Append (in ...*Declaration)",
        "Source": "func (p *DeclarationList) Append(in ...*Declaration) {\n\t*p = append(*p, in...)\n}"
      },
      {
        "Kind": "func",
        "File": "declaration_list.go",
        "SelfContained": false,
        "Name": "AppendUnique",
        "Receiver": "*DeclarationList",
        "Arguments": [
          "...*Declaration"
        ],
        "Signature": "AppendUnique (in ...*Declaration)",
        "Source": "func (p *DeclarationList) AppendUnique(in ...*Declaration) {\n\tfor _, i := range in {\n\t\tshouldAppend := true\n\t\tfor _, decl := range *p {\n\t\t\tif decl.Equal(i) {\n\t\t\t\tshouldAppend = false\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\n\t\tif shouldAppend {\n\t\t\t*p = append(*p, i)\n\t\t}\n\t}\n\tp.Sort()\n}"
      },
      {
        "Kind": "func",
        "File": "declaration_list.go",
        "SelfContained": false,
        "References": {
          "strings": [
            "HasSuffix"
          ]
        },
        "Name": "ClearNonTestFiles",
        "Receiver": "*DeclarationList",
        "Signature": "ClearNonTestFiles ()",
        "Source": "func (p *DeclarationList) ClearNonTestFiles() {\n\tresult := DeclarationList{}\n\tfor _, decl := range *p {\n\t\tif !strings.HasSuffix(decl.File, \"_test.go\") {\n\t\t\tcontinue\n\t\t}\n\t\tresult.Append(decl)\n\t}\n\t*p = result\n}"
      },
      {
        "Kind": "func",
        "File": "declaration_list.go",
        "SelfContained": false,
        "Name": "ClearSource",
        "Receiver": "*DeclarationList",
        "Signature": "ClearSource ()",
        "Source": "func (p *DeclarationList) ClearSource() {\n\tfor _, decl := range *p {\n\t\tdecl.Source = \"\"\n\t}\n}"
      },
      {
        "Kind": "func",
        "File": "declaration_list.go",
        "SelfContained": false,
        "References": {
          "strings": [
            "HasSuffix"
          ]
        },
        "Name": "ClearTestFiles",
        "Receiver": "*DeclarationList",
        "Signature": "ClearTestFiles ()",
        "Source": "func (p *DeclarationList) ClearTestFiles() {\n\tresult := DeclarationList{}\n\tfor _, decl := range *p {\n\t\tif strings.HasSuffix(decl.File, \"_test.go\") {\n\t\t\tcontinue\n\t\t}\n\t\tresult.Append(decl)\n\t}\n\t*p = result\n}"
      },
      {
        "Kind": "func",
        "File": "declaration_list.go",
        "SelfContained": false,
        "References": {
          "ast": [
            "IsExported"
          ],
          "sort": [
            "Slice"
          ]
        },
        "Name": "Sort",
        "Receiver": "*DeclarationList",
        "Signature": "Sort ()",
        "Source": "func (p *DeclarationList) Sort() {\n\tsort.Slice(*p, func(i, j int) bool {\n\t\ta, b := (*p)[i], (*p)[j]\n\t\tif a.Kind != b.Kind {\n\t\t\tindexOf := map[DeclarationKind]int{\n\t\t\t\tCommentKind:\t0,\n\t\t\t\tImportKind:\t1,\n\t\t\t\tConstKind:\t2,\n\t\t\t\tStructKind:\t3,\n\t\t\t\tTypeKind:\t4,\n\t\t\t\tVarKind:\t5,\n\t\t\t\tFuncKind:\t6,\n\t\t\t}\n\t\t\treturn indexOf[a.Kind] \u003c indexOf[b.Kind]\n\t\t}\n\t\tae, be := ast.IsExported(a.Name), ast.IsExported(b.Name)\n\t\tif ae != be {\n\t\t\treturn ae\n\t\t}\n\n\t\tif a.Receiver != b.Receiver {\n\t\t\tif a.Receiver == \"\" {\n\t\t\t\treturn true\n\t\t\t}\n\t\t\treturn a.Receiver \u003c b.Receiver\n\t\t}\n\n\t\tif a.Signature != b.Signature {\n\t\t\treturn a.Signature \u003c b.Signature\n\t\t}\n\n\t\treturn a.Name \u003c b.Name\n\t})\n}"
      },
      {
        "Kind": "func",
        "File": "definition.go",
        "SelfContained": false,
        "Name": "Fill",
        "Receiver": "*Definition",
        "Signature": "Fill ()",
        "Source": "func (d *Definition) Fill() {\n\tfor _, decl := range d.Order() {\n\t\tdecl.Imports = d.getImports(decl)\n\t}\n}"
      },
      {
        "Kind": "func",
        "File": "definition.go",
        "SelfContained": false,
        "Name": "Merge",
        "Receiver": "*Definition",
        "Arguments": [
          "*Definition"
        ],
        "Signature": "Merge (in *Definition)",
        "Source": "func (d *Definition) Merge(in *Definition) {\n\td.TestPackage = d.TestPackage || in.TestPackage\n\n\tfor k, v := range in.Imports {\n\t\td.Imports.Add(k, v...)\n\t}\n\n\td.Types.AppendUnique(in.Types...)\n\td.Funcs.AppendUnique(in.Funcs...)\n\td.Vars.AppendUnique(in.Vars...)\n\td.Consts.AppendUnique(in.Consts...)\n\n\t// this line causes Sort to be omitted from the\n\t// definitions :/ ... solved by adding the sort\n\t// in the AppendUnique above, but the Sort symbol\n\t// should not be omitted from Definition.\n\n\t// d.Sort()\n}"
      },
      {
        "Kind": "func",
        "File": "definition.go",
        "SelfContained": false,
        "Name": "Order",
        "Receiver": "*Definition",
        "Returns": [
          "[]*Declaration"
        ],
        "Signature": "Order () []*Declaration",
        "Source": "func (d *Definition) Order() []*Declaration {\n\tcount := len(d.Types) + len(d.Funcs) + len(d.Vars) + len(d.Consts)\n\tresult := make([]*Declaration, 0, count)\n\n\tresult = append(result, d.Types...)\n\tresult = append(result, d.Funcs...)\n\tresult = append(result, d.Vars...)\n\tresult = append(result, d.Consts...)\n\treturn result\n}"
      },
      {
        "Kind": "func",
        "File": "string_set.go",
        "SelfContained": false,
        "References": {
          "slices": [
            "Contains"
          ]
        },
        "Name": "Add",
        "Receiver": "*StringSet",
        "Arguments": [
          "string",
          "...string"
        ],
        "Signature": "Add (key string, lits ...string)",
        "Source": "func (i *StringSet) Add(key string, lits ...string) {\n\tdata := *i\n\tif data == nil {\n\t\tdata = make(StringSet)\n\t}\n\tif set, ok := data[key]; ok {\n\t\tfor _, lit := range lits {\n\t\t\tif slices.Contains(set, lit) {\n\t\t\t\treturn\n\t\t\t}\n\t\t\tset = append(set, lit)\n\t\t}\n\n\t\tdata[key] = set\n\t\treturn\n\t}\n\tdata[key] = lits[:]\n\t*i = data\n}"
      },
      {
        "Kind": "func",
        "File": "declaration_kind.go",
        "SelfContained": false,
        "Name": "String",
        "Receiver": "DeclarationKind",
        "Returns": [
          "string"
        ],
        "Signature": "String () string",
        "Source": "func (d DeclarationKind) String() string {\n\treturn string(d)\n}"
      },
      {
        "Kind": "func",
        "File": "declaration_list.go",
        "SelfContained": false,
        "Name": "Exported",
        "Receiver": "DeclarationList",
        "Returns": [
          "[]*Declaration"
        ],
        "Signature": "Exported () []*Declaration",
        "Source": "func (p DeclarationList) Exported() (result []*Declaration) {\n\tfor _, decl := range p {\n\t\tif decl.IsExported() {\n\t\t\tresult = append(result, decl)\n\t\t}\n\t}\n\treturn\n}"
      },
      {
        "Kind": "func",
        "File": "declaration_list.go",
        "SelfContained": false,
        "Name": "FindKind",
        "Receiver": "DeclarationList",
        "Arguments": [
          "DeclarationKind"
        ],
        "Returns": [
          "[]*Declaration"
        ],
        "Signature": "FindKind (kind DeclarationKind) []*Declaration",
        "Source": "func (p DeclarationList) FindKind(kind DeclarationKind) (result []*Declaration) {\n\tfor _, decl := range p {\n\t\tif decl.Kind == kind {\n\t\t\tresult = append(result, decl)\n\t\t}\n\t}\n\treturn\n}"
      },
      {
        "Kind": "func",
        "File": "package.go",
        "SelfContained": false,
        "Name": "Name",
        "Receiver": "Package",
        "Returns": [
          "string"
        ],
        "Signature": "Name () string",
        "Source": "func (p Package) Name() string {\n\treturn p.Package\n}"
      },
      {
        "Kind": "func",
        "File": "string_set.go",
        "SelfContained": false,
        "Name": "All",
        "Receiver": "StringSet",
        "Returns": [
          "[]string"
        ],
        "Signature": "All () []string",
        "Source": "func (i StringSet) All() []string {\n\tresult := []string{}\n\tfor _, set := range i {\n\t\tresult = append(result, set...)\n\t}\n\treturn result\n}"
      },
      {
        "Kind": "func",
        "File": "string_set.go",
        "SelfContained": false,
        "References": {
          "sort": [
            "Strings"
          ]
        },
        "Name": "Get",
        "Receiver": "StringSet",
        "Arguments": [
          "string"
        ],
        "Returns": [
          "[]string"
        ],
        "Signature": "Get (key string) []string",
        "Source": "func (i StringSet) Get(key string) []string {\n\tval, _ := i[key]\n\tif val != nil {\n\t\tsort.Strings(val)\n\t}\n\treturn val\n}"
      },
      {
        "Kind": "func",
        "File": "string_set.go",
        "SelfContained": false,
        "References": {
          "fmt": [
            "Errorf"
          ],
          "path": [
            "Base"
          ],
          "strings": [
            "ToLower",
            "ReplaceAll",
            "Contains",
            "Split",
            "Trim",
            "HasSuffix"
          ]
        },
        "Doc": "Map returns a map with the short package name as the key\nand the full import path as the value.",
        "Name": "Map",
        "Receiver": "StringSet",
        "Returns": [
          "map[string]string",
          "[]error"
        ],
        "Signature": "Map () (map[string]string, []error)",
        "Source": "// Map returns a map with the short package name as the key\n// and the full import path as the value.\nfunc (i StringSet) Map() (map[string]string, []error) {\n\twarnings := []error{}\n\twarningSeen := map[string]bool{}\n\n\taddWarning := func(warning error) {\n\t\tmsg := warning.Error()\n\t\tif _, seen := warningSeen[msg]; !seen {\n\t\t\twarningSeen[msg] = true\n\t\t\twarnings = append(warnings, warning)\n\t\t}\n\t}\n\n\tcleanPackageName := func(name string) (string, bool) {\n\t\tclean := name\n\t\tclean = strings.ToLower(clean)\n\t\tclean = strings.ReplaceAll(clean, \"_\", \"\")\n\t\treturn clean, name == clean\n\t}\n\n\tresult := map[string]string{}\n\timports := i.All()\n\n\tfor _, imported := range imports {\n\t\tvar short, long string\n\n\t\t// aliased package\n\t\tif strings.Contains(imported, \" \") {\n\t\t\tline := strings.Split(imported, \" \")\n\t\t\tshort, long = line[0], strings.Trim(line[1], `\"`)\n\t\t} else {\n\t\t\tlong = strings.Trim(imported, `\"`)\n\t\t\tshort = path.Base(long)\n\t\t}\n\n\t\tif short == \"C\" {\n\t\t\tcontinue\n\t\t}\n\n\t\tif strings.HasSuffix(short, \"_test\") {\n\t\t\tclean, ok := cleanPackageName(short[:len(short)-5])\n\t\t\tif !ok {\n\t\t\t\taddWarning(fmt.Errorf(\"Alias %s should be %s_test\", short, clean))\n\t\t\t}\n\t\t\tcontinue\n\t\t}\n\n\t\tclean, ok := cleanPackageName(short)\n\t\tif !ok {\n\t\t\taddWarning(fmt.Errorf(\"Alias %s should be %s\", short, clean))\n\t\t\tcontinue\n\t\t}\n\n\t\tval, ok := result[clean]\n\n\t\tif ok \u0026\u0026 val != long {\n\t\t\twarning := \"Import conflict for %s, \"\n\t\t\t// Sort val/long so shorter is left hand side\n\t\t\tif len(val) \u003c len(long) {\n\t\t\t\twarning += val + \" != \" + long\n\t\t\t} else {\n\t\t\t\twarning += long + \" != \" + val\n\t\t\t}\n\t\t\taddWarning(fmt.Errorf(warning, short))\n\t\t}\n\n\t\tresult[clean] = long\n\t}\n\n\treturn result, warnings\n}"
      },
      {
        "Kind": "func",
        "File": "definition.go",
        "SelfContained": false,
        "Name": "getImports",
        "Receiver": "*Definition",
        "Arguments": [
          "*Declaration"
        ],
        "Returns": [
          "[]string"
        ],
        "Signature": "getImports (decl *Declaration) []string",
        "Source": "func (d *Definition) getImports(decl *Declaration) []string {\n\treturn d.Imports.Get(decl.File)\n}"
      }
    ]
  }
]
