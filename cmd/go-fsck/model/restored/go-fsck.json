[
  {
    "Package": "model",
    "Doc": null,
    "Imports": {
      "build_tags.go": [
        "\"regexp\"",
        "\"strings\""
      ],
      "collector.go": [
        "\"bytes\"",
        "\"fmt\"",
        "\"go/ast\"",
        "\"go/printer\"",
        "\"go/token\"",
        "\"log\"",
        "\"os\"",
        "\"path\"",
        "\"strings\"",
        "\"github.com/davecgh/go-spew/spew\"",
        "\"github.com/TykTechnologies/exp/cmd/go-fsck/model/internal\""
      ],
      "definition.go": [
        "\"fmt\"",
        "\"go/ast\"",
        "\"path\"",
        "\"sort\"",
        "\"strings\"",
        "\"golang.org/x/exp/slices\""
      ],
      "load.go": [
        "\"encoding/json\"",
        "\"fmt\"",
        "\"go/ast\"",
        "\"go/parser\"",
        "\"go/token\"",
        "\"os\"",
        "\"path\"",
        "\"sort\"",
        "\"golang.org/x/tools/go/ast/inspector\""
      ]
    },
    "Types": [
      {
        "Kind": "type",
        "File": "definition.go",
        "SelfContained": false,
        "Name": "DeclarationList",
        "Source": "type DeclarationList []*Declaration"
      },
      {
        "Kind": "type",
        "File": "definition.go",
        "SelfContained": false,
        "Name": "Definition",
        "Source": "type (\n\tDefinition struct {\n\t\tPackage\tstring\n\t\tDoc\tStringSet\n\t\tImports\tStringSet\n\t\tTypes\tDeclarationList\n\t\tConsts\tDeclarationList\n\t\tVars\tDeclarationList\n\t\tFuncs\tDeclarationList\n\t}\n)"
      },
      {
        "Kind": "type",
        "File": "definition.go",
        "SelfContained": false,
        "Name": "StringSet",
        "Source": "type StringSet map[string][]string"
      },
      {
        "Kind": "type",
        "File": "definition.go",
        "SelfContained": false,
        "Names": [
          "DeclarationKind",
          "Declaration"
        ],
        "Source": "type (\n\tDeclarationKind\tstring\n\n\tDeclaration\tstruct {\n\t\tKind\tDeclarationKind\n\t\tFile\tstring\n\n\t\tSelfContained\tbool\n\n\t\tImports\t[]string\t`json:\",omitempty\"`\n\n\t\tReferences\tmap[string][]string\t`json:\",omitempty\"`\n\n\t\tName\t\tstring\t\t`json:\",omitempty\"`\n\t\tNames\t\t[]string\t`json:\",omitempty\"`\n\t\tReceiver\tstring\t\t`json:\",omitempty\"`\n\n\t\tArguments\t[]string\t`json:\",omitempty\"`\n\t\tReturns\t\t[]string\t`json:\",omitempty\"`\n\n\t\tSignature\tstring\t`json:\",omitempty\"`\n\t\tSource\t\tstring\n\t}\n)"
      },
      {
        "Kind": "type",
        "File": "collector.go",
        "SelfContained": true,
        "Name": "collector",
        "Source": "type collector struct {\n\tfset\t*token.FileSet\n\n\tdefinition\tmap[string]*Definition\n\tseen\t\tmap[string]*Declaration\n}"
      }
    ],
    "Consts": [
      {
        "Kind": "const",
        "File": "definition.go",
        "SelfContained": false,
        "Names": [
          "StructKind",
          "ImportKind",
          "ConstKind",
          "TypeKind",
          "FuncKind",
          "VarKind",
          "CommentKind"
        ],
        "Source": "const (\n\tStructKind\tDeclarationKind\t= \"struct\"\n\tImportKind\t\t\t= \"import\"\n\tConstKind\t\t\t= \"const\"\n\tTypeKind\t\t\t= \"type\"\n\tFuncKind\t\t\t= \"func\"\n\tVarKind\t\t\t\t= \"var\"\n\tCommentKind\t\t\t= \"comment\"\n)"
      }
    ],
    "Vars": null,
    "Funcs": [
      {
        "Kind": "func",
        "File": "build_tags.go",
        "SelfContained": false,
        "References": {
          "regexp": [
            "MustCompile"
          ],
          "strings": [
            "TrimSpace",
            "HasPrefix"
          ]
        },
        "Name": "BuildTags",
        "Arguments": [
          "[]byte"
        ],
        "Returns": [
          "[]string"
        ],
        "Signature": "BuildTags (src []byte) []string",
        "Source": "func BuildTags(src []byte) []string {\n\t// Regular expression to match build tags in comments.\n\tre := regexp.MustCompile(`(?m)^\\s*//\\s*\\+build\\s+(.*)$`)\n\n\tvar buildTags []string\n\n\t// Find all occurrences of +build lines in comments.\n\tmatches := re.FindAllStringSubmatch(string(src), -1)\n\tfor _, match := range matches {\n\t\tbuildTag := strings.TrimSpace(match[1])\n\t\tbuildTags = append(buildTags, buildTag)\n\t}\n\n\t// If a build tag is `!jq` (starts with !), consider it\n\t// as if it's not present.\n\tif len(buildTags) == 1 \u0026\u0026 strings.HasPrefix(buildTags[0], \"!\") {\n\t\treturn nil\n\t}\n\n\treturn buildTags\n}"
      },
      {
        "Kind": "func",
        "File": "load.go",
        "SelfContained": false,
        "References": {
          "ast": [
            "File"
          ],
          "fmt": [
            "Errorf",
            "Fprintf"
          ],
          "inspector": [
            "New"
          ],
          "os": [
            "ReadFile",
            "Stderr"
          ],
          "parser": [
            "ParseDir",
            "ParseComments"
          ],
          "path": [
            "Base",
            "Join"
          ],
          "sort": [
            "Strings",
            "Slice"
          ],
          "token": [
            "NewFileSet"
          ]
        },
        "Name": "Load",
        "Arguments": [
          "string",
          "bool"
        ],
        "Returns": [
          "[]*Definition",
          "error"
        ],
        "Signature": "Load (sourcePath string, verbose bool) ([]*Definition, error)",
        "Source": "// Load definitions from package located in sourcePath.\nfunc Load(sourcePath string, verbose bool) ([]*Definition, error) {\n\tfset := token.NewFileSet()\n\n\tpackages, err := parser.ParseDir(fset, sourcePath, nil, parser.ParseComments)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tfiles := []*ast.File{}\n\tfor _, pkg := range packages {\n\t\tfor _, file := range pkg.Files {\n\t\t\tfilename := path.Base(fset.Position(file.Pos()).Filename)\n\n\t\t\tsrc, err := os.ReadFile(path.Join(sourcePath, filename))\n\t\t\tif err != nil {\n\t\t\t\treturn nil, fmt.Errorf(\"Error reading in source file: %s\", filename)\n\t\t\t}\n\n\t\t\ttags := BuildTags(src)\n\t\t\tif len(tags) == 0 {\n\t\t\t\tfiles = append(files, file)\n\t\t\t\tcontinue\n\t\t\t}\n\n\t\t\tfmt.Fprintf(os.Stderr, \"WARN: Skipping file %s with build tags: %v\\n\", filename, tags)\n\t\t}\n\t}\n\n\tcollector := NewCollector(fset)\n\n\tinsp := inspector.New(files)\n\tinsp.WithStack(nil, collector.Visit)\n\n\tcollector.Clean(verbose)\n\n\tresults := make([]*Definition, 0, len(collector.definition))\n\tpkgNames := make([]string, 0, len(collector.definition))\n\tfor _, pkg := range collector.definition {\n\t\tpkg.Sort()\n\t\tpkgNames = append(pkgNames, pkg.Package)\n\t}\n\tsort.Strings(pkgNames)\n\n\tfor _, pkg := range collector.definition {\n\t\tfor _, name := range pkgNames {\n\t\t\tif pkg.Package == name {\n\t\t\t\tresults = append(results, pkg)\n\t\t\t}\n\t\t}\n\t}\n\n\tsort.Slice(results, func(i, j int) bool {\n\t\treturn results[i].Package \u003c results[j].Package\n\t})\n\n\treturn results, nil\n}"
      },
      {
        "Kind": "func",
        "File": "collector.go",
        "SelfContained": false,
        "Name": "NewCollector",
        "Arguments": [
          "*token.FileSet"
        ],
        "Returns": [
          "*collector"
        ],
        "Signature": "NewCollector (fset *token.FileSet) *collector",
        "Source": "func NewCollector(fset *token.FileSet) *collector {\n\treturn \u0026collector{\n\t\tfset:\t\tfset,\n\t\tdefinition:\tmake(map[string]*Definition),\n\t\tseen:\t\tmake(map[string]*Declaration),\n\t}\n}"
      },
      {
        "Kind": "func",
        "File": "load.go",
        "SelfContained": false,
        "References": {
          "json": [
            "Unmarshal"
          ],
          "os": [
            "ReadFile"
          ]
        },
        "Name": "ReadFile",
        "Arguments": [
          "string"
        ],
        "Returns": [
          "[]*Definition",
          "error"
        ],
        "Signature": "ReadFile (inputPath string) ([]*Definition, error)",
        "Source": "// ReadFile loads the definitions from a json file\nfunc ReadFile(inputPath string) ([]*Definition, error) {\n\tdata, err := os.ReadFile(inputPath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tvar result []*Definition\n\tif err := json.Unmarshal(data, \u0026result); err != nil {\n\t\treturn nil, err\n\t}\n\n\tfor _, decl := range result {\n\t\tdecl.Fill()\n\t}\n\n\treturn result, nil\n}"
      },
      {
        "Kind": "func",
        "File": "definition.go",
        "SelfContained": false,
        "References": {
          "strings": [
            "Trim"
          ]
        },
        "Name": "Keys",
        "Receiver": "*Declaration",
        "Returns": [
          "[]string"
        ],
        "Signature": "Keys () []string",
        "Source": "func (d *Declaration) Keys() []string {\n\ttrimPath := \"*.\"\n\tif d.Name != \"\" {\n\t\treturn []string{\n\t\t\tstrings.Trim(d.Receiver+\".\"+d.Name, trimPath),\n\t\t}\n\t}\n\tif len(d.Names) != 0 {\n\t\tresult := make([]string, len(d.Names))\n\t\tfor k, v := range d.Names {\n\t\t\tresult[k] = strings.Trim(d.Receiver+\".\"+v, trimPath)\n\t\t}\n\t}\n\treturn nil\n}"
      },
      {
        "Kind": "func",
        "File": "definition.go",
        "SelfContained": false,
        "Name": "Append",
        "Receiver": "*DeclarationList",
        "Arguments": [
          "...*Declaration"
        ],
        "Signature": "Append (in ...*Declaration)",
        "Source": "func (p *DeclarationList) Append(in ...*Declaration) {\n\t*p = append(*p, in...)\n}"
      },
      {
        "Kind": "func",
        "File": "definition.go",
        "SelfContained": false,
        "References": {
          "ast": [
            "IsExported"
          ],
          "sort": [
            "Slice"
          ]
        },
        "Name": "Sort",
        "Receiver": "*DeclarationList",
        "Signature": "Sort ()",
        "Source": "func (p *DeclarationList) Sort() {\n\tsort.Slice(*p, func(i, j int) bool {\n\t\ta, b := (*p)[i], (*p)[j]\n\t\tif a.Kind != b.Kind {\n\t\t\tindexOf := map[DeclarationKind]int{\n\t\t\t\tCommentKind:\t0,\n\t\t\t\tImportKind:\t1,\n\t\t\t\tConstKind:\t2,\n\t\t\t\tStructKind:\t3,\n\t\t\t\tTypeKind:\t4,\n\t\t\t\tVarKind:\t5,\n\t\t\t\tFuncKind:\t6,\n\t\t\t}\n\t\t\treturn indexOf[a.Kind] \u003c indexOf[b.Kind]\n\t\t}\n\t\tae, be := ast.IsExported(a.Name), ast.IsExported(b.Name)\n\t\tif ae != be {\n\t\t\treturn ae\n\t\t}\n\n\t\tif a.Receiver != b.Receiver {\n\t\t\tif a.Receiver == \"\" {\n\t\t\t\treturn true\n\t\t\t}\n\t\t\treturn a.Receiver \u003c b.Receiver\n\t\t}\n\n\t\tif a.Signature != b.Signature {\n\t\t\treturn a.Signature \u003c b.Signature\n\t\t}\n\n\t\treturn a.Name \u003c b.Name\n\t})\n}"
      },
      {
        "Kind": "func",
        "File": "definition.go",
        "SelfContained": false,
        "Name": "Fill",
        "Receiver": "*Definition",
        "Signature": "Fill ()",
        "Source": "func (d *Definition) Fill() {\n\tfor _, decl := range d.Order() {\n\t\tdecl.Imports = d.getImports(decl)\n\t}\n}"
      },
      {
        "Kind": "func",
        "File": "definition.go",
        "SelfContained": false,
        "Name": "Order",
        "Receiver": "*Definition",
        "Returns": [
          "[]*Declaration"
        ],
        "Signature": "Order () []*Declaration",
        "Source": "func (d *Definition) Order() []*Declaration {\n\tcount := len(d.Types) + len(d.Funcs) + len(d.Vars) + len(d.Consts)\n\tresult := make([]*Declaration, 0, count)\n\n\tresult = append(result, d.Types...)\n\tresult = append(result, d.Funcs...)\n\tresult = append(result, d.Vars...)\n\tresult = append(result, d.Consts...)\n\treturn result\n}"
      },
      {
        "Kind": "func",
        "File": "definition.go",
        "SelfContained": false,
        "Name": "Sort",
        "Receiver": "*Definition",
        "Signature": "Sort ()",
        "Source": "func (d *Definition) Sort() {\n\td.Types.Sort()\n\td.Vars.Sort()\n\td.Consts.Sort()\n\td.Funcs.Sort()\n}"
      },
      {
        "Kind": "func",
        "File": "definition.go",
        "SelfContained": false,
        "References": {
          "slices": [
            "Contains"
          ]
        },
        "Name": "Add",
        "Receiver": "*StringSet",
        "Arguments": [
          "string"
        ],
        "Signature": "Add (key,lit string)",
        "Source": "func (i *StringSet) Add(key, lit string) {\n\tdata := *i\n\tif data == nil {\n\t\tdata = make(StringSet)\n\t}\n\tif set, ok := data[key]; ok {\n\t\tif slices.Contains(set, lit) {\n\t\t\treturn\n\t\t}\n\t\tdata[key] = append(set, lit)\n\t\treturn\n\t}\n\tdata[key] = []string{lit}\n\t*i = data\n}"
      },
      {
        "Kind": "func",
        "File": "collector.go",
        "SelfContained": false,
        "References": {
          "fmt": [
            "Printf"
          ],
          "spew": [
            "Sdump"
          ]
        },
        "Name": "Clean",
        "Receiver": "*collector",
        "Arguments": [
          "bool"
        ],
        "Signature": "Clean (verbose bool)",
        "Source": "func (v *collector) Clean(verbose bool) {\n\tfor _, def := range v.definition {\n\t\timportMap, _ := def.Imports.Map()\n\n\t\tif verbose {\n\t\t\tfmt.Printf(\"Imports: %s\\n\", spew.Sdump(importMap))\n\t\t}\n\n\t\tfor _, fv := range def.Funcs {\n\t\t\tfor k, v := range fv.References {\n\t\t\t\tif _, ok := importMap[k]; !ok {\n\t\t\t\t\tif verbose {\n\t\t\t\t\t\tfmt.Printf(\"Function %s reference doesn't exist in imports: %s: [%v]\\n\", fv.Name, k, v)\n\t\t\t\t\t}\n\t\t\t\t\tdelete(fv.References, k)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}"
      },
      {
        "Kind": "func",
        "File": "collector.go",
        "SelfContained": false,
        "References": {
          "ast": [
            "ValueSpec",
            "TypeSpec"
          ]
        },
        "Name": "Names",
        "Receiver": "*collector",
        "Arguments": [
          "*ast.GenDecl"
        ],
        "Returns": [
          "[]string"
        ],
        "Signature": "Names (decl *ast.GenDecl) []string",
        "Source": "func (v *collector) Names(decl *ast.GenDecl) []string {\n\tnames := make([]string, 0, len(decl.Specs))\n\tfor _, spec := range decl.Specs {\n\t\tif val, ok := spec.(*ast.ValueSpec); ok {\n\t\t\tnames = append(names, v.identNames(val.Names)...)\n\t\t\tcontinue\n\t\t}\n\n\t\tif val, ok := spec.(*ast.TypeSpec); ok {\n\t\t\tnames = append(names, val.Name.Name)\n\t\t\tcontinue\n\t\t}\n\n\t\tv.error(\"warning getting names: unhandled %T\", spec)\n\t}\n\tif len(names) == 0 {\n\t\treturn nil\n\t}\n\treturn names\n}"
      },
      {
        "Kind": "func",
        "File": "collector.go",
        "SelfContained": false,
        "References": {
          "ast": [
            "File",
            "GenDecl",
            "FuncDecl"
          ],
          "path": [
            "Base"
          ],
          "strings": [
            "Trim"
          ],
          "token": [
            "IMPORT",
            "CONST",
            "VAR",
            "TYPE"
          ]
        },
        "Name": "Visit",
        "Receiver": "*collector",
        "Arguments": [
          "ast.Node",
          "bool",
          "[]ast.Node"
        ],
        "Returns": [
          "bool"
        ],
        "Signature": "Visit (node ast.Node, push bool, stack []ast.Node) bool",
        "Source": "func (v *collector) Visit(node ast.Node, push bool, stack []ast.Node) bool {\n\tfile, ok := (stack[0]).(*ast.File)\n\tif !ok {\n\t\treturn true\n\t}\n\tfilename := path.Base(v.fset.Position(file.Pos()).Filename)\n\n\tpackageName := file.Name.Name\n\n\tpkg, ok := v.definition[packageName]\n\tif !ok {\n\t\tpkg = \u0026Definition{\n\t\t\tPackage: packageName,\n\t\t}\n\t\tv.definition[packageName] = pkg\n\t}\n\n\tif file.Doc != nil {\n\t\tpkg.Doc.Add(filename, v.getSource(file, file.Doc.List))\n\t}\n\n\tswitch node := node.(type) {\n\tcase *ast.GenDecl:\n\t\tif node.Tok == token.IMPORT {\n\t\t\tv.collectImports(filename, node, pkg)\n\t\t\treturn true\n\t\t}\n\n\t\t// If there's a function declaration in the stack,\n\t\t// the var/const/struct is internal to a function.\n\t\tfor _, k := range stack {\n\t\t\t_, ok := k.(*ast.FuncDecl)\n\t\t\tif ok {\n\t\t\t\treturn true\n\t\t\t}\n\t\t}\n\n\t\tnames := v.Names(node)\n\t\tfor _, name := range names {\n\t\t\tif v.isSeen(packageName + \".\" + name) {\n\t\t\t\treturn true\n\t\t\t}\n\t\t}\n\n\t\tdef := \u0026Declaration{\n\t\t\tNames:\t\tnames,\n\t\t\tFile:\t\tfilename,\n\t\t\tSelfContained:\tinternal.IsSelfContainedType(node),\n\t\t\tSource:\t\tv.getSource(file, node),\n\t\t}\n\n\t\tfor _, name := range names {\n\t\t\tv.appendSeen(packageName+\".\"+name, def)\n\t\t}\n\n\t\tswitch node.Tok {\n\t\tcase token.CONST:\n\t\t\tdef.Kind = ConstKind\n\t\t\tpkg.Consts.Append(def)\n\t\tcase token.VAR:\n\t\t\tdef.Kind = VarKind\n\t\t\tpkg.Vars.Append(def)\n\t\tcase token.TYPE:\n\t\t\tdef.Kind = TypeKind\n\t\t\tpkg.Types.Append(def)\n\t\t}\n\n\tcase *ast.FuncDecl:\n\t\tdef := v.collectFuncDeclaration(file, node, filename, stack)\n\t\tif def != nil {\n\t\t\tkey := strings.Trim(packageName+\".\"+def.Receiver+\".\"+def.Name, \"*.\")\n\t\t\tif v.isSeen(key) {\n\t\t\t\treturn true\n\t\t\t}\n\t\t\tdefer v.appendSeen(key, def)\n\n\t\t\tpkg.Funcs.Append(def)\n\t\t}\n\n\t}\n\n\treturn true\n}"
      },
      {
        "Kind": "func",
        "File": "definition.go",
        "SelfContained": false,
        "Name": "String",
        "Receiver": "DeclarationKind",
        "Returns": [
          "string"
        ],
        "Signature": "String () string",
        "Source": "func (d DeclarationKind) String() string {\n\treturn string(d)\n}"
      },
      {
        "Kind": "func",
        "File": "definition.go",
        "SelfContained": false,
        "Name": "FindKind",
        "Receiver": "DeclarationList",
        "Arguments": [
          "DeclarationKind"
        ],
        "Returns": [
          "[]*Declaration"
        ],
        "Signature": "FindKind (kind DeclarationKind) []*Declaration",
        "Source": "func (p DeclarationList) FindKind(kind DeclarationKind) (result []*Declaration) {\n\tfor _, decl := range p {\n\t\tif decl.Kind == kind {\n\t\t\tresult = append(result, decl)\n\t\t}\n\t}\n\treturn\n}"
      },
      {
        "Kind": "func",
        "File": "definition.go",
        "SelfContained": false,
        "Name": "All",
        "Receiver": "StringSet",
        "Returns": [
          "[]string"
        ],
        "Signature": "All () []string",
        "Source": "func (i StringSet) All() []string {\n\tresult := []string{}\n\tfor _, set := range i {\n\t\tresult = append(result, set...)\n\t}\n\treturn result\n}"
      },
      {
        "Kind": "func",
        "File": "definition.go",
        "SelfContained": false,
        "References": {
          "sort": [
            "Strings"
          ]
        },
        "Name": "Get",
        "Receiver": "StringSet",
        "Arguments": [
          "string"
        ],
        "Returns": [
          "[]string"
        ],
        "Signature": "Get (key string) []string",
        "Source": "func (i StringSet) Get(key string) []string {\n\tval, _ := i[key]\n\tif val != nil {\n\t\tsort.Strings(val)\n\t}\n\treturn val\n}"
      },
      {
        "Kind": "func",
        "File": "definition.go",
        "SelfContained": false,
        "References": {
          "fmt": [
            "Errorf"
          ],
          "path": [
            "Base"
          ],
          "strings": [
            "Contains",
            "Split",
            "Trim"
          ]
        },
        "Name": "Map",
        "Receiver": "StringSet",
        "Returns": [
          "map[string]string",
          "[]error"
        ],
        "Signature": "Map () (map[string]string, []error)",
        "Source": "// Map returns a map with the short package name as the key\n// and the full import path as the value.\nfunc (i StringSet) Map() (map[string]string, []error) {\n\twarnings := []error{}\n\twarningSeen := map[string]bool{}\n\n\tresult := map[string]string{}\n\timports := i.All()\n\n\tfor _, imported := range imports {\n\t\tvar short, long string\n\n\t\t// aliased package\n\t\tif strings.Contains(imported, \" \") {\n\t\t\tline := strings.Split(imported, \" \")\n\t\t\tshort, long = line[0], strings.Trim(line[1], `\"`)\n\t\t} else {\n\t\t\tlong = strings.Trim(imported, `\"`)\n\t\t\tshort = path.Base(long)\n\t\t}\n\n\t\tval, ok := result[short]\n\n\t\tif ok \u0026\u0026 val != long {\n\t\t\twarning := \"Import conflict for %s, \"\n\t\t\t// Sort val/long so shorter is left hand side\n\t\t\tif len(val) \u003c len(long) {\n\t\t\t\twarning += val + \" != \" + long\n\t\t\t} else {\n\t\t\t\twarning += long + \" != \" + val\n\t\t\t}\n\t\t\tif _, seen := warningSeen[warning]; !seen {\n\t\t\t\twarningSeen[warning] = true\n\t\t\t\twarnings = append(warnings, fmt.Errorf(warning, short))\n\t\t\t}\n\t\t}\n\n\t\tresult[short] = long\n\t}\n\n\treturn result, warnings\n}"
      },
      {
        "Kind": "func",
        "File": "collector.go",
        "SelfContained": false,
        "Name": "appendIfNotExists",
        "Arguments": [
          "[]string",
          "string"
        ],
        "Returns": [
          "[]string"
        ],
        "Signature": "appendIfNotExists (slice []string, element string) []string",
        "Source": "func appendIfNotExists(slice []string, element string) []string {\n\tfor _, s := range slice {\n\t\tif s == element {\n\t\t\treturn slice\n\t\t}\n\t}\n\treturn append(slice, element)\n}"
      },
      {
        "Kind": "func",
        "File": "collector.go",
        "SelfContained": false,
        "References": {
          "ast": [
            "Inspect",
            "Node",
            "SelectorExpr",
            "Ident",
            "Pkg",
            "IsExported"
          ]
        },
        "Name": "collectFuncReferences",
        "Arguments": [
          "*ast.FuncDecl"
        ],
        "Returns": [
          "map[string][]string"
        ],
        "Signature": "collectFuncReferences (funcDecl *ast.FuncDecl) map[string][]string",
        "Source": "func collectFuncReferences(funcDecl *ast.FuncDecl) map[string][]string {\n\timports := make(map[string][]string)\n\n\t// Traverse the function body and look for package identifiers.\n\tast.Inspect(funcDecl.Body, func(node ast.Node) bool {\n\t\tswitch n := node.(type) {\n\t\tcase *ast.SelectorExpr:\n\t\t\t// If it's a SelectorExpr, get the leftmost identifier which is the package name.\n\t\t\tif ident, ok := n.X.(*ast.Ident); ok {\n\t\t\t\tpkgName := ident.Name\n\n\t\t\t\tif ident.Obj != nil {\n\t\t\t\t\tif ident.Obj.Kind != ast.Pkg {\n\t\t\t\t\t\t// pkgName is not a package\n\t\t\t\t\t\treturn true\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tselName := n.Sel.Name\n\t\t\t\tif pkgName != \"internal\" \u0026\u0026 ast.IsExported(selName) {\n\t\t\t\t\timports[pkgName] = appendIfNotExists(imports[pkgName], selName)\n\t\t\t\t}\n\t\t\t}\n\t\tcase *ast.Ident:\n\t\t\t// If it's an identifier, it might be a package name.\n\t\t\tif obj := n.Obj; obj != nil \u0026\u0026 obj.Kind == ast.Pkg {\n\t\t\t\tpkgName := n.Name\n\t\t\t\timports[pkgName] = nil\t// No specific symbol, just mark the package as imported.\n\t\t\t}\n\t\t}\n\n\t\treturn true\n\t})\n\n\treturn imports\n}"
      },
      {
        "Kind": "func",
        "File": "definition.go",
        "SelfContained": false,
        "Name": "getImports",
        "Receiver": "*Definition",
        "Arguments": [
          "*Declaration"
        ],
        "Returns": [
          "[]string"
        ],
        "Signature": "getImports (decl *Declaration) []string",
        "Source": "func (d *Definition) getImports(decl *Declaration) []string {\n\treturn d.Imports.Get(decl.File)\n}"
      },
      {
        "Kind": "func",
        "File": "collector.go",
        "SelfContained": false,
        "Name": "appendSeen",
        "Receiver": "*collector",
        "Arguments": [
          "string",
          "*Declaration"
        ],
        "Signature": "appendSeen (key string, value *Declaration)",
        "Source": "func (v *collector) appendSeen(key string, value *Declaration) {\n\tif len(value.Names) == 1 {\n\t\tvalue.Name = value.Names[0]\n\t\tvalue.Names = nil\n\t}\n\tv.seen[key] = value\n}"
      },
      {
        "Kind": "func",
        "File": "collector.go",
        "SelfContained": false,
        "Name": "collectFuncDeclaration",
        "Receiver": "*collector",
        "Arguments": [
          "*ast.File",
          "*ast.FuncDecl",
          "string",
          "[]ast.Node"
        ],
        "Returns": [
          "*Declaration"
        ],
        "Signature": "collectFuncDeclaration (file *ast.File, decl *ast.FuncDecl, filename string, stack []ast.Node) *Declaration",
        "Source": "func (v *collector) collectFuncDeclaration(file *ast.File, decl *ast.FuncDecl, filename string, stack []ast.Node) *Declaration {\n\targs, returns := v.functionBindings(decl)\n\n\tdeclaration := \u0026Declaration{\n\t\tKind:\t\tFuncKind,\n\t\tFile:\t\tfilename,\n\t\tName:\t\tdecl.Name.Name,\n\t\tArguments:\targs,\n\t\tReturns:\treturns,\n\t\tSignature:\tv.functionDef(decl),\n\t\tReferences:\tcollectFuncReferences(decl),\n\t\tSource:\t\tv.getSource(file, decl),\n\t}\n\n\tif decl.Recv != nil {\n\t\tdeclaration.Receiver = v.symbolType(decl.Recv.List[0].Type)\n\t}\n\n\treturn declaration\n}"
      },
      {
        "Kind": "func",
        "File": "collector.go",
        "SelfContained": false,
        "References": {
          "ast": [
            "ImportSpec"
          ],
          "fmt": [
            "Fprintf"
          ],
          "os": [
            "Stderr"
          ],
          "path": [
            "Base"
          ],
          "strings": [
            "Trim"
          ]
        },
        "Name": "collectImports",
        "Receiver": "*collector",
        "Arguments": [
          "string",
          "*ast.GenDecl",
          "*Definition"
        ],
        "Signature": "collectImports (filename string, decl *ast.GenDecl, def *Definition)",
        "Source": "func (v *collector) collectImports(filename string, decl *ast.GenDecl, def *Definition) {\n\tfor _, spec := range decl.Specs {\n\t\timported, ok := spec.(*ast.ImportSpec)\n\t\tif !ok {\n\t\t\tcontinue\n\t\t}\n\n\t\timportLiteral := imported.Path.Value\n\t\timportClean := strings.Trim(importLiteral, `*`)\n\t\tif imported.Name != nil {\n\t\t\talias := imported.Name.Name\n\t\t\tbase := path.Base(importClean)\n\t\t\tswitch alias {\n\t\t\tcase base:\n\t\t\t\tfmt.Fprintf(os.Stderr, \"WARN: removing %s alias for %s)\\n\", alias, importClean)\n\t\t\tcase \"_\":\n\t\t\t\t// no warning\n\t\t\tdefault:\n\t\t\t\t// fmt.Printf(\"WARN: package %s is aliased to %s\\n\", importLiteral, alias)\n\t\t\t\timportLiteral = alias + \" \" + importLiteral\n\t\t\t}\n\t\t}\n\n\t\tdef.Imports.Add(filename, importLiteral)\n\t}\n}"
      },
      {
        "Kind": "func",
        "File": "collector.go",
        "SelfContained": false,
        "References": {
          "fmt": [
            "Fprintf"
          ],
          "os": [
            "Stderr"
          ]
        },
        "Name": "error",
        "Receiver": "*collector",
        "Arguments": [
          "string",
          "..."
        ],
        "Signature": "error (format string, args ...interface{})",
        "Source": "func (v *collector) error(format string, args ...interface{}) {\n\tfmt.Fprintf(os.Stderr, format+\"\\n\", args...)\n}"
      },
      {
        "Kind": "func",
        "File": "collector.go",
        "SelfContained": false,
        "Name": "functionBindings",
        "Receiver": "*collector",
        "Arguments": [
          "*ast.FuncDecl"
        ],
        "Returns": [
          "[]string"
        ],
        "Signature": "functionBindings (decl *ast.FuncDecl) ([]string, []string)",
        "Source": "func (p *collector) functionBindings(decl *ast.FuncDecl) (args []string, returns []string) {\n\t// Traverse arguments\n\tfor _, field := range decl.Type.Params.List {\n\t\targType := p.symbolType(field.Type)\n\t\targs = appendIfNotExists(args, argType)\n\t}\n\n\t// Traverse return values\n\tif decl.Type.Results != nil {\n\t\tfor _, field := range decl.Type.Results.List {\n\t\t\treturnType := p.symbolType(field.Type)\n\t\t\treturns = appendIfNotExists(returns, returnType)\n\t\t}\n\t}\n\treturn\n}"
      },
      {
        "Kind": "func",
        "File": "collector.go",
        "SelfContained": false,
        "References": {
          "bytes": [
            "Buffer"
          ],
          "fmt": [
            "Sprintf"
          ],
          "log": [
            "Fatalf"
          ],
          "printer": [
            "Fprint"
          ],
          "strings": [
            "Join"
          ]
        },
        "Name": "functionDef",
        "Receiver": "*collector",
        "Arguments": [
          "*ast.FuncDecl"
        ],
        "Returns": [
          "string"
        ],
        "Signature": "functionDef (fun *ast.FuncDecl) string",
        "Source": "func (p *collector) functionDef(fun *ast.FuncDecl) string {\n\tvar fset = p.fset\n\tname := fun.Name.Name\n\tparams := make([]string, 0)\n\tfor _, p := range fun.Type.Params.List {\n\t\tvar typeNameBuf bytes.Buffer\n\t\terr := printer.Fprint(\u0026typeNameBuf, fset, p.Type)\n\t\tif err != nil {\n\t\t\tlog.Fatalf(\"failed printing %s\", err)\n\t\t}\n\t\tnames := make([]string, 0)\n\t\tfor _, name := range p.Names {\n\t\t\tnames = append(names, name.Name)\n\t\t}\n\t\tparams = append(params, fmt.Sprintf(\"%s %s\", strings.Join(names, \",\"), typeNameBuf.String()))\n\t}\n\treturns := make([]string, 0)\n\tif fun.Type.Results != nil {\n\t\tfor _, r := range fun.Type.Results.List {\n\t\t\tvar typeNameBuf bytes.Buffer\n\t\t\terr := printer.Fprint(\u0026typeNameBuf, fset, r.Type)\n\t\t\tif err != nil {\n\t\t\t\tlog.Fatalf(\"failed printing %s\", err)\n\t\t\t}\n\n\t\t\treturns = append(returns, typeNameBuf.String())\n\t\t}\n\t}\n\treturnString := \"\"\n\tif len(returns) == 1 {\n\t\treturnString = returns[0]\n\t} else if len(returns) \u003e 1 {\n\t\treturnString = fmt.Sprintf(\"(%s)\", strings.Join(returns, \", \"))\n\t}\n\n\tparamsString := strings.Join(params, \", \")\n\tif returnString != \"\" {\n\t\treturn fmt.Sprintf(\"%s (%s) %s\", name, paramsString, returnString)\n\t}\n\treturn fmt.Sprintf(\"%s (%s)\", name, paramsString)\n}"
      },
      {
        "Kind": "func",
        "File": "collector.go",
        "SelfContained": false,
        "References": {
          "strings": [
            "Builder"
          ]
        },
        "Name": "getSource",
        "Receiver": "*collector",
        "Arguments": [
          "*ast.File",
          "any"
        ],
        "Returns": [
          "string"
        ],
        "Signature": "getSource (file *ast.File, node any) string",
        "Source": "func (p *collector) getSource(file *ast.File, node any) string {\n\tvar buf strings.Builder\n\terr := internal.PrintSource(internal.CommentedNode(file, node), p.fset, \u0026buf)\n\tif err != nil {\n\t\treturn \"\"\n\t}\n\treturn buf.String()\n}"
      },
      {
        "Kind": "func",
        "File": "collector.go",
        "SelfContained": false,
        "Name": "identNames",
        "Receiver": "*collector",
        "Arguments": [
          "[]*ast.Ident"
        ],
        "Returns": [
          "[]string"
        ],
        "Signature": "identNames (decl []*ast.Ident) []string",
        "Source": "func (v *collector) identNames(decl []*ast.Ident) []string {\n\tif len(decl) == 0 {\n\t\treturn nil\n\t}\n\n\tresult := make([]string, 0, len(decl))\n\tfor _, t := range decl {\n\t\tresult = append(result, t.Name)\n\t}\n\treturn result\n}"
      },
      {
        "Kind": "func",
        "File": "collector.go",
        "SelfContained": false,
        "Name": "isSeen",
        "Receiver": "*collector",
        "Arguments": [
          "string"
        ],
        "Returns": [
          "bool"
        ],
        "Signature": "isSeen (key string) bool",
        "Source": "func (v *collector) isSeen(key string) bool {\n\tdecl, ok := v.seen[key]\n\treturn ok \u0026\u0026 decl != nil\n}"
      },
      {
        "Kind": "func",
        "File": "collector.go",
        "SelfContained": false,
        "References": {
          "ast": [
            "Ident",
            "StarExpr",
            "ArrayType",
            "Ellipsis",
            "SelectorExpr",
            "MapType",
            "InterfaceType"
          ],
          "fmt": [
            "Sprintf"
          ]
        },
        "Name": "symbolType",
        "Receiver": "*collector",
        "Arguments": [
          "ast.Expr"
        ],
        "Returns": [
          "string"
        ],
        "Signature": "symbolType (expr ast.Expr) string",
        "Source": "func (p *collector) symbolType(expr ast.Expr) string {\n\tswitch t := expr.(type) {\n\tcase *ast.Ident:\n\t\treturn t.Name\n\tcase *ast.StarExpr:\n\t\treturn \"*\" + p.symbolType(t.X)\n\tcase *ast.ArrayType:\n\t\treturn \"[]\" + p.symbolType(t.Elt)\n\tcase *ast.Ellipsis:\n\t\treturn \"...\" + p.symbolType(t.Elt)\n\tcase *ast.SelectorExpr:\n\t\treturn p.symbolType(t.X) + \".\" + p.symbolType(t.Sel)\n\tcase *ast.MapType:\n\t\tk, v := p.symbolType(t.Key), p.symbolType(t.Value)\n\t\treturn fmt.Sprintf(\"map[%s]%s\", k, v)\n\tcase *ast.InterfaceType:\n\t\treturn \"\"\n\t}\n\treturn fmt.Sprintf(\"%T\", expr)\n}"
      }
    ]
  },
  {
    "Package": "model_test",
    "Doc": null,
    "Imports": {
      "load_test.go": [
        "\"testing\"",
        "\"github.com/kortschak/utter\"",
        "\"github.com/stretchr/testify/assert\"",
        "\"github.com/TykTechnologies/exp/cmd/go-fsck/model\""
      ]
    },
    "Types": null,
    "Consts": null,
    "Vars": null,
    "Funcs": [
      {
        "Kind": "func",
        "File": "load_test.go",
        "SelfContained": false,
        "References": {
          "assert": [
            "NoError",
            "NotNil"
          ],
          "model": [
            "Load"
          ],
          "utter": [
            "Config"
          ]
        },
        "Name": "TestLoad",
        "Arguments": [
          "*testing.T"
        ],
        "Signature": "TestLoad (t *testing.T)",
        "Source": "func TestLoad(t *testing.T) {\n\tutter.Config.IgnoreUnexported = true\n\tutter.Config.OmitZero = true\n\tutter.Config.ElideType = true\n\n\tdefs, err := model.Load(\".\", false)\n\tassert.NoError(t, err)\n\tassert.NotNil(t, defs)\n\n\t// utter.Dump(defs)\n}"
      }
    ]
  }
]