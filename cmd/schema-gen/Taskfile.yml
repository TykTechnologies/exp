---
version: "3"

tasks:
  default:
    desc: "Build, run tests, build examples"
    deps: [ build ]
    cmds:
      - go test -race -count=1 ./...
      - task: examples

  build:
    desc: "Build and install schema-gen"
    cmds:
      - goimports -w -local=$(go list .) .
      - go fmt ./...
      - go mod tidy
      - go clean -cache
      - go install .

  gen:model:
    desc: "Generate model/ from schema-gen"
    cmds:
      - schema-gen extract -i model/ --include-functions --include-tests -o model/model.json
      - schema-gen markdown -i model/model.json -o model/model.md --root PackageInfo
      - schema-gen restore -i model/model.json -o model/model_rich.go.txt --include-functions TypeRef -p model
      - schema-gen restore -i model/model.json -o model/model.go.txt -p model
      - schema-gen list -i model/model.json

  gen:examples:
    desc: "Generate _examples/ from schema-gen"
    cmds:
      - schema-gen extract -i _example/ --include-functions --include-unexported -o _example/example.json --pretty-json
      - schema-gen restore -i _example/example.json -o _example/example.go.txt -p example
      - schema-gen restore -i _example/example.json -o _example/example_file.go.txt --keep File -p example
      - schema-gen list -i _example/example.json

  lint:
    desc: "Run linter tests against schema-gen model"
    deps: [ build ]
    cmds:
      - task: gen:model
      - schema-gen lint -i model/model.json

  examples:
    desc: "Build examples"
    cmds:
      - echo "Building examples:"
      - task gen:model gen:examples

  help:
    desc: "Run schema gen to print usage/help"
    cmds:
      - schema-gen
      - schema-gen extract help
      - schema-gen restore help
