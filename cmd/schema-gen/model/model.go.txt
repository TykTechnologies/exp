package model

// This code is autogenerated by exp/cmd/schema-gen, do not modify.

import (
	"encoding/json"
	"errors"
	"go/ast"
	"golang.org/x/exp/slices"
	"io"
	"os"
	"sort"
	"strings"
)

type (
	// DeclarationInfo holds the declarations block for an exposed value or type.
	DeclarationInfo struct {
		// Doc is the declaration doc comment. It usually
		// occurs just before a *ast.TypeDecl, but may be
		// applied to multiple ones.
		Doc string `json:"doc,omitempty"`

		// FileDoc is the doc comment for a file which
		// contains the definitions here.
		FileDoc string `json:"file_doc,omitempty"`

		// Types are all the type declarations in the block.
		Types TypeList `json:"types,omitempty"`
	}

	// DeclarationList implements list operations over a `*DeclarationInfo` slice.

	DeclarationList = []*DeclarationInfo

	// EnumInfo holds details about an enum definition.
	EnumInfo struct {
		Name string `json:"name"`

		Value `json:"value"`

		Doc string `json:"doc,omitempty"`
	}

	// ExtractOptions contains options for extraction
	ExtractOptions struct {
		IncludeFunctions bool

		IncludeTests bool

		IncludeUnexported bool

		IgnoreFiles []string

		IncludeInternal bool
	}

	// FieldInfo holds details about a field definition.
	FieldInfo struct {
		// Name is the name of the field.
		Name string `json:"name"`

		// Type is the literal type of the Go field.
		Type string `json:"type"`

		// Path is the go path of this field starting from root object.
		Path string `json:"path"`

		// Doc holds the field doc.
		Doc string `json:"doc,omitempty"`

		// Comment holds the field comment text.
		Comment string `json:"comment,omitempty"`

		// Tag is the go tag, unmodified.
		Tag string `json:"tag"`

		// JSONName is the corresponding json name of the field.
		// It's cleared if it's set to `-` (unexported).
		JSONName string `json:"json_name"`

		// MapKey is the map key type, if this field is a map.
		MapKey string `json:"map_key,omitempty"`
	}

	// FuncInfo holds details about a function definition.
	FuncInfo struct {
		// Name holds the name of the function.
		Name string `json:"name"`

		// Doc holds the function doc comment.
		Doc string `json:"doc,omitempty"`

		// Type holds the receiver if any.
		Type string `json:"type,omitempty"`

		// Path is the path to the symbol (`Type.FuncName` or `FuncName` if global func).
		Path string `json:"path"`

		// Signature is an interface compatible signature for the function.
		Signature string `json:"signature"`

		// Source is a 1-1 source code for the function.
		Source string `json:"source"`
	}

	// JSONSchema represents a JSON Schema document according to the draft-07 specification.
	// It includes standard fields used to define types, formats, validations.
	JSONSchema struct {
		// Schema specifies the JSON Schema version URL.
		// Example: "http://json-schema.org/draft-07/schema#"
		Schema string `json:"$schema,omitempty"`

		// Ref is used to reference another schema definition.
		// Example: "#/definitions/SomeType"
		Ref string `json:"$ref,omitempty"`

		// Definitions contains subSchema definitions that can be referenced by $ref.
		Definitions map[string]JSONSchema `json:"definitions,omitempty"`

		// Type indicates the JSON type of the instance (e.g., "object", "array", "string").
		Type string `json:"type,omitempty"`

		// Format provides additional semantic validation for the instance.
		// Common formats include "date-time", "email", etc.
		Format string `json:"format,omitempty"`

		// Pattern defines a regular expression that a string value must match
		Pattern string `json:"pattern,omitempty"`

		// Properties defines the fields of an object and their corresponding schemas
		Properties map[string]JSONSchema `json:"properties,omitempty"`

		// Items defines the schema for array elements
		Items JSONSchema `json:"items,omitempty"`

		// Enum restricts a value to a fixed set of values
		Enum []any `json:"enum,omitempty"`

		// Required lists the properties that must be present in an object
		Required []string `json:"required,omitempty"`

		// Description provides a human-readable explanation of the schema.
		Description string `json:"description,omitempty"`

		// Minimum specifies the minimum numeric value allowed.
		Minimum float64 `json:"minimum,omitempty"`

		// Maximum specifies the maximum numeric value allowed.
		Maximum float64 `json:"maximum,omitempty"`

		// ExclusiveMinimum, if true, requires the instance to be greater than (not equal to) Minimum.
		ExclusiveMinimum bool `json:"exclusiveMinimum,omitempty"`

		// ExclusiveMaximum, if true, requires the instance to be less than (not equal to) Maximum.
		ExclusiveMaximum bool `json:"exclusiveMaximum,omitempty"`

		// MultipleOf indicates that the numeric instance must be a multiple of this value.
		MultipleOf float64 `json:"multipleOf,omitempty"`

		// AdditionalProperties controls whether an object can have properties beyond those defined
		// Can be a boolean or a schema that additional properties must conform to
		AdditionalProperties any `json:"additionalProperties,omitempty"`
	}

	// PackageInfo holds all the declarations for a package scope.
	PackageInfo struct {
		// Name is the package name.
		Name string `json:"name"`

		// Imports holds a list of imported packages.
		Imports []string `json:"imports"`

		// Declarations within the package.
		Declarations DeclarationList `json:"declarations"`

		// Functions within the package, enabled with `--include-functions`.
		Functions []*FuncInfo `json:"functions,omitempty"`
	}

	// TypeInfo holds details about a type definition.
	TypeInfo struct {
		// Name is struct go name.
		Name string `json:"name"`

		// Doc is the struct doc.
		Doc string `json:"doc,omitempty"`

		// Comment is the struct comment.
		Comment string `json:"comment,omitempty"`

		// Type is an optional type if the declaration is a type alias or similar.
		Type string `json:"type,omitempty"`

		// Fields holds information of the fields, if this object is a struct.
		Fields []*FieldInfo `json:"fields,omitempty"`

		Functions []*FuncInfo `json:"functions,omitempty"`

		// StructObj is the (optionally present) raw ast.StructType value
		StructObj ast.StructType `json:"-"`

		// Enums hold information for an enum value.
		Enums []*EnumInfo `json:"enums,omitempty"`
	}

	// TypeList implements list operations over a *TypeInfo slice.

	TypeList = []*TypeInfo
)
