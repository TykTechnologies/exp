[
  {
    "name": "model",
    "imports": [
      "\"encoding/json\"",
      "\"errors\"",
      "\"go/ast\"",
      "\"golang.org/x/exp/slices\"",
      "\"io\"",
      "\"os\"",
      "\"sort\"",
      "\"strings\""
    ],
    "declarations": [
      {
        "doc": "DeclarationInfo holds the declarations block for an exposed value or type.",
        "types": [
          {
            "name": "DeclarationInfo",
            "fields": [
              {
                "name": "Doc",
                "type": "string",
                "path": "DeclarationInfo.Doc",
                "doc": "Doc is the declaration doc comment. It usually\noccurs just before a *ast.TypeDecl, but may be\napplied to multiple ones.",
                "tag": "json:\"doc,omitempty\"",
                "json_name": "doc,omitempty"
              },
              {
                "name": "FileDoc",
                "type": "string",
                "path": "DeclarationInfo.FileDoc",
                "doc": "FileDoc is the doc comment for a file which\ncontains the definitions here.",
                "tag": "json:\"file_doc,omitempty\"",
                "json_name": "file_doc,omitempty"
              },
              {
                "name": "Types",
                "type": "TypeList",
                "path": "DeclarationInfo.Types",
                "doc": "Types are all the type declarations in the block.",
                "tag": "json:\"types,omitempty\"",
                "json_name": "types,omitempty"
              }
            ],
            "functions": [
              {
                "name": "Valid",
                "type": "x *DeclarationInfo",
                "path": "DeclarationInfo",
                "signature": "Valid () bool",
                "source": "func (x *DeclarationInfo) Valid() bool {\n\treturn len(x.Types) \u003e 0\n}"
              }
            ]
          }
        ]
      },
      {
        "doc": "DeclarationList implements list operations over a `*DeclarationInfo` slice.",
        "types": [
          {
            "name": "DeclarationList",
            "type": "[]*DeclarationInfo",
            "functions": [
              {
                "name": "Append",
                "type": "x *DeclarationList",
                "path": "DeclarationList",
                "signature": "Append (newInfo *DeclarationInfo) int",
                "source": "func (x *DeclarationList) Append(newInfo *DeclarationInfo) int {\n\t*x = append(*x, newInfo)\n\treturn len(*x)\n}"
              }
            ]
          }
        ]
      },
      {
        "doc": "EnumInfo holds details about an enum definition.",
        "types": [
          {
            "name": "EnumInfo",
            "fields": [
              {
                "name": "Name",
                "type": "string",
                "path": "EnumInfo.Name",
                "tag": "json:\"name\"",
                "json_name": "name"
              },
              {
                "name": "Value",
                "type": "",
                "path": "EnumInfo.Value",
                "tag": "json:\"value\"",
                "json_name": "value"
              },
              {
                "name": "Doc",
                "type": "string",
                "path": "EnumInfo.Doc",
                "tag": "json:\"doc,omitempty\"",
                "json_name": "doc,omitempty"
              }
            ]
          }
        ]
      },
      {
        "doc": "ExtractOptions contains options for extraction",
        "types": [
          {
            "name": "ExtractOptions",
            "fields": [
              {
                "name": "IncludeFunctions",
                "type": "bool",
                "path": "ExtractOptions.IncludeFunctions",
                "tag": "",
                "json_name": "IncludeFunctions"
              },
              {
                "name": "IncludeTests",
                "type": "bool",
                "path": "ExtractOptions.IncludeTests",
                "tag": "",
                "json_name": "IncludeTests"
              },
              {
                "name": "IncludeUnexported",
                "type": "bool",
                "path": "ExtractOptions.IncludeUnexported",
                "tag": "",
                "json_name": "IncludeUnexported"
              },
              {
                "name": "IgnoreFiles",
                "type": "[]string",
                "path": "ExtractOptions.IgnoreFiles",
                "tag": "",
                "json_name": "IgnoreFiles"
              },
              {
                "name": "IncludeInternal",
                "type": "bool",
                "path": "ExtractOptions.IncludeInternal",
                "tag": "",
                "json_name": "IncludeInternal"
              }
            ]
          }
        ]
      },
      {
        "doc": "FieldInfo holds details about a field definition.",
        "types": [
          {
            "name": "FieldInfo",
            "fields": [
              {
                "name": "Name",
                "type": "string",
                "path": "FieldInfo.Name",
                "doc": "Name is the name of the field.",
                "tag": "json:\"name\"",
                "json_name": "name"
              },
              {
                "name": "Type",
                "type": "string",
                "path": "FieldInfo.Type",
                "doc": "Type is the literal type of the Go field.",
                "tag": "json:\"type\"",
                "json_name": "type"
              },
              {
                "name": "Path",
                "type": "string",
                "path": "FieldInfo.Path",
                "doc": "Path is the go path of this field starting from root object.",
                "tag": "json:\"path\"",
                "json_name": "path"
              },
              {
                "name": "Doc",
                "type": "string",
                "path": "FieldInfo.Doc",
                "doc": "Doc holds the field doc.",
                "tag": "json:\"doc,omitempty\"",
                "json_name": "doc,omitempty"
              },
              {
                "name": "Comment",
                "type": "string",
                "path": "FieldInfo.Comment",
                "doc": "Comment holds the field comment text.",
                "tag": "json:\"comment,omitempty\"",
                "json_name": "comment,omitempty"
              },
              {
                "name": "Tag",
                "type": "string",
                "path": "FieldInfo.Tag",
                "doc": "Tag is the go tag, unmodified.",
                "tag": "json:\"tag\"",
                "json_name": "tag"
              },
              {
                "name": "JSONName",
                "type": "string",
                "path": "FieldInfo.JSONName",
                "doc": "JSONName is the corresponding json name of the field.\nIt's cleared if it's set to `-` (unexported).",
                "tag": "json:\"json_name\"",
                "json_name": "json_name"
              },
              {
                "name": "MapKey",
                "type": "string",
                "path": "FieldInfo.MapKey",
                "doc": "MapKey is the map key type, if this field is a map.",
                "tag": "json:\"map_key,omitempty\"",
                "json_name": "map_key,omitempty"
              }
            ],
            "functions": [
              {
                "name": "TypeRef",
                "type": "f *FieldInfo",
                "path": "FieldInfo",
                "signature": "TypeRef () string",
                "source": "func (f *FieldInfo) TypeRef() string {\n\treturn strings.TrimLeft(f.Type, \"[]*\")\n}"
              }
            ]
          }
        ]
      },
      {
        "doc": "FuncInfo holds details about a function definition.",
        "types": [
          {
            "name": "FuncInfo",
            "fields": [
              {
                "name": "Name",
                "type": "string",
                "path": "FuncInfo.Name",
                "doc": "Name holds the name of the function.",
                "tag": "json:\"name\"",
                "json_name": "name"
              },
              {
                "name": "Doc",
                "type": "string",
                "path": "FuncInfo.Doc",
                "doc": "Doc holds the function doc comment.",
                "tag": "json:\"doc,omitempty\"",
                "json_name": "doc,omitempty"
              },
              {
                "name": "Type",
                "type": "string",
                "path": "FuncInfo.Type",
                "doc": "Type holds the receiver if any.",
                "tag": "json:\"type,omitempty\"",
                "json_name": "type,omitempty"
              },
              {
                "name": "Path",
                "type": "string",
                "path": "FuncInfo.Path",
                "doc": "Path is the path to the symbol (`Type.FuncName` or `FuncName` if global func).",
                "tag": "json:\"path\"",
                "json_name": "path"
              },
              {
                "name": "Signature",
                "type": "string",
                "path": "FuncInfo.Signature",
                "doc": "Signature is an interface compatible signature for the function.",
                "tag": "json:\"signature\"",
                "json_name": "signature"
              },
              {
                "name": "Source",
                "type": "string",
                "path": "FuncInfo.Source",
                "doc": "Source is a 1-1 source code for the function.",
                "tag": "json:\"source\"",
                "json_name": "source"
              }
            ]
          }
        ]
      },
      {
        "doc": "JSONSchema represents a JSON Schema document according to the draft-07 specification.\nIt includes standard fields used to define types, formats, validations.",
        "types": [
          {
            "name": "JSONSchema",
            "fields": [
              {
                "name": "Schema",
                "type": "string",
                "path": "JSONSchema.Schema",
                "doc": "Schema specifies the JSON Schema version URL.\nExample: \"http://json-schema.org/draft-07/schema#\"",
                "tag": "json:\"$schema,omitempty\"",
                "json_name": "$schema,omitempty"
              },
              {
                "name": "Ref",
                "type": "string",
                "path": "JSONSchema.Ref",
                "doc": "Ref is used to reference another schema definition.\nExample: \"#/definitions/SomeType\"",
                "tag": "json:\"$ref,omitempty\"",
                "json_name": "$ref,omitempty"
              },
              {
                "name": "Definitions",
                "type": "map[string]JSONSchema",
                "path": "JSONSchema.Definitions",
                "doc": "Definitions contains subSchema definitions that can be referenced by $ref.",
                "tag": "json:\"definitions,omitempty\"",
                "json_name": "definitions,omitempty"
              },
              {
                "name": "Type",
                "type": "string",
                "path": "JSONSchema.Type",
                "doc": "Type indicates the JSON type of the instance (e.g., \"object\", \"array\", \"string\").",
                "tag": "json:\"type,omitempty\"",
                "json_name": "type,omitempty"
              },
              {
                "name": "Format",
                "type": "string",
                "path": "JSONSchema.Format",
                "doc": "Format provides additional semantic validation for the instance.\nCommon formats include \"date-time\", \"email\", etc.",
                "tag": "json:\"format,omitempty\"",
                "json_name": "format,omitempty"
              },
              {
                "name": "Pattern",
                "type": "string",
                "path": "JSONSchema.Pattern",
                "doc": "Pattern defines a regular expression that a string value must match",
                "tag": "json:\"pattern,omitempty\"",
                "json_name": "pattern,omitempty"
              },
              {
                "name": "Properties",
                "type": "map[string]JSONSchema",
                "path": "JSONSchema.Properties",
                "doc": "Properties defines the fields of an object and their corresponding schemas",
                "tag": "json:\"properties,omitempty\"",
                "json_name": "properties,omitempty"
              },
              {
                "name": "Items",
                "type": "JSONSchema",
                "path": "JSONSchema.Items",
                "doc": "Items defines the schema for array elements",
                "tag": "json:\"items,omitempty\"",
                "json_name": "items,omitempty"
              },
              {
                "name": "Enum",
                "type": "[]any",
                "path": "JSONSchema.Enum",
                "doc": "Enum restricts a value to a fixed set of values",
                "tag": "json:\"enum,omitempty\"",
                "json_name": "enum,omitempty"
              },
              {
                "name": "Required",
                "type": "[]string",
                "path": "JSONSchema.Required",
                "doc": "Required lists the properties that must be present in an object",
                "tag": "json:\"required,omitempty\"",
                "json_name": "required,omitempty"
              },
              {
                "name": "Description",
                "type": "string",
                "path": "JSONSchema.Description",
                "doc": "Description provides a human-readable explanation of the schema.",
                "tag": "json:\"description,omitempty\"",
                "json_name": "description,omitempty"
              },
              {
                "name": "Minimum",
                "type": "float64",
                "path": "JSONSchema.Minimum",
                "doc": "Minimum specifies the minimum numeric value allowed.",
                "tag": "json:\"minimum,omitempty\"",
                "json_name": "minimum,omitempty"
              },
              {
                "name": "Maximum",
                "type": "float64",
                "path": "JSONSchema.Maximum",
                "doc": "Maximum specifies the maximum numeric value allowed.",
                "tag": "json:\"maximum,omitempty\"",
                "json_name": "maximum,omitempty"
              },
              {
                "name": "ExclusiveMinimum",
                "type": "bool",
                "path": "JSONSchema.ExclusiveMinimum",
                "doc": "ExclusiveMinimum, if true, requires the instance to be greater than (not equal to) Minimum.",
                "tag": "json:\"exclusiveMinimum,omitempty\"",
                "json_name": "exclusiveMinimum,omitempty"
              },
              {
                "name": "ExclusiveMaximum",
                "type": "bool",
                "path": "JSONSchema.ExclusiveMaximum",
                "doc": "ExclusiveMaximum, if true, requires the instance to be less than (not equal to) Maximum.",
                "tag": "json:\"exclusiveMaximum,omitempty\"",
                "json_name": "exclusiveMaximum,omitempty"
              },
              {
                "name": "MultipleOf",
                "type": "float64",
                "path": "JSONSchema.MultipleOf",
                "doc": "MultipleOf indicates that the numeric instance must be a multiple of this value.",
                "tag": "json:\"multipleOf,omitempty\"",
                "json_name": "multipleOf,omitempty"
              },
              {
                "name": "AdditionalProperties",
                "type": "any",
                "path": "JSONSchema.AdditionalProperties",
                "doc": "AdditionalProperties controls whether an object can have properties beyond those defined\nCan be a boolean or a schema that additional properties must conform to",
                "tag": "json:\"additionalProperties,omitempty\"",
                "json_name": "additionalProperties,omitempty"
              }
            ]
          }
        ]
      },
      {
        "doc": "PackageInfo holds all the declarations for a package scope.",
        "types": [
          {
            "name": "PackageInfo",
            "fields": [
              {
                "name": "Name",
                "type": "string",
                "path": "PackageInfo.Name",
                "doc": "Name is the package name.",
                "tag": "json:\"name\"",
                "json_name": "name"
              },
              {
                "name": "Imports",
                "type": "[]string",
                "path": "PackageInfo.Imports",
                "doc": "Imports holds a list of imported packages.",
                "tag": "json:\"imports\"",
                "json_name": "imports"
              },
              {
                "name": "Declarations",
                "type": "DeclarationList",
                "path": "PackageInfo.Declarations",
                "doc": "Declarations within the package.",
                "tag": "json:\"declarations\"",
                "json_name": "declarations"
              },
              {
                "name": "Functions",
                "type": "[]*FuncInfo",
                "path": "PackageInfo.Functions",
                "doc": "Functions within the package, enabled with `--include-functions`.",
                "tag": "json:\"functions,omitempty\"",
                "json_name": "functions,omitempty"
              }
            ]
          }
        ]
      },
      {
        "doc": "TypeInfo holds details about a type definition.",
        "types": [
          {
            "name": "TypeInfo",
            "fields": [
              {
                "name": "Name",
                "type": "string",
                "path": "TypeInfo.Name",
                "doc": "Name is struct go name.",
                "tag": "json:\"name\"",
                "json_name": "name"
              },
              {
                "name": "Doc",
                "type": "string",
                "path": "TypeInfo.Doc",
                "doc": "Doc is the struct doc.",
                "tag": "json:\"doc,omitempty\"",
                "json_name": "doc,omitempty"
              },
              {
                "name": "Comment",
                "type": "string",
                "path": "TypeInfo.Comment",
                "doc": "Comment is the struct comment.",
                "tag": "json:\"comment,omitempty\"",
                "json_name": "comment,omitempty"
              },
              {
                "name": "Type",
                "type": "string",
                "path": "TypeInfo.Type",
                "doc": "Type is an optional type if the declaration is a type alias or similar.",
                "tag": "json:\"type,omitempty\"",
                "json_name": "type,omitempty"
              },
              {
                "name": "Fields",
                "type": "[]*FieldInfo",
                "path": "TypeInfo.Fields",
                "doc": "Fields holds information of the fields, if this object is a struct.",
                "tag": "json:\"fields,omitempty\"",
                "json_name": "fields,omitempty"
              },
              {
                "name": "Functions",
                "type": "[]*FuncInfo",
                "path": "TypeInfo.Functions",
                "tag": "json:\"functions,omitempty\"",
                "json_name": "functions,omitempty"
              },
              {
                "name": "StructObj",
                "type": "ast.StructType",
                "path": "TypeInfo.StructObj",
                "doc": "StructObj is the (optionally present) raw ast.StructType value",
                "tag": "json:\"-\"",
                "json_name": ""
              },
              {
                "name": "Enums",
                "type": "[]*EnumInfo",
                "path": "TypeInfo.Enums",
                "doc": "Enums hold information for an enum value.",
                "tag": "json:\"enums,omitempty\"",
                "json_name": "enums,omitempty"
              }
            ],
            "functions": [
              {
                "name": "TypeRef",
                "doc": "TypeRef trims array and pointer info from a type reference.",
                "type": "f *TypeInfo",
                "path": "TypeInfo",
                "signature": "TypeRef () string",
                "source": "// TypeRef trims array and pointer info from a type reference.\nfunc (f *TypeInfo) TypeRef() string {\n\treturn strings.TrimLeft(f.Type, \"[]*\")\n}"
              }
            ]
          }
        ]
      },
      {
        "doc": "TypeList implements list operations over a *TypeInfo slice.",
        "types": [
          {
            "name": "TypeList",
            "type": "[]*TypeInfo",
            "functions": [
              {
                "name": "Append",
                "type": "x *TypeList",
                "path": "TypeList",
                "signature": "Append (newInfo *TypeInfo) int",
                "source": "func (x *TypeList) Append(newInfo *TypeInfo) int {\n\t*x = append(*x, newInfo)\n\treturn len(*x)\n}"
              }
            ]
          }
        ]
      }
    ],
    "functions": [
      {
        "name": "Load",
        "doc": "Load reads and decodes a json file to produce a `*PackageInfo`.",
        "path": "Load",
        "signature": "Load (filename string) ([]*PackageInfo, error)",
        "source": "// Load reads and decodes a json file to produce a `*PackageInfo`.\nfunc Load(filename string) ([]*PackageInfo, error) {\n\tvar body []byte\n\tvar err error\n\n\tswitch filename {\n\tcase \"-\":\n\t\tbody, err = io.ReadAll(os.Stdin)\n\tdefault:\n\t\tbody, err = os.ReadFile(filename)\n\t}\n\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tresult := []*PackageInfo{}\n\terr = json.Unmarshal(body, \u0026result)\n\treturn result, err\n}"
      }
    ]
  },
  {
    "name": "model_test",
    "imports": [
      "\"github.com/TykTechnologies/exp/cmd/schema-gen/model\"",
      "\"github.com/davecgh/go-spew/spew\"",
      "\"testing\""
    ],
    "declarations": [],
    "functions": [
      {
        "name": "Test_DefinitionsList_Sort",
        "path": "Test_DefinitionsList_Sort",
        "signature": "Test_DefinitionsList_Sort (t *testing.T)",
        "source": "func Test_DefinitionsList_Sort(t *testing.T) {\n\ts, _ := model.Load(\"model.json\")\n\tspew.Dump(s.Declarations.GetOrder(\"PackageInfo\"))\n}"
      }
    ]
  }
]
