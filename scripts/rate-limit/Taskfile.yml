# yamllint disable rule:line-length
---
version: "3"

# This is the root taskfile with several targets that configure the gateway for
# a particular rate limit algo, using docker compose to start the gateway and
# load the appropriate API from the configuration folders and run tests.
#
# Each test collects as much as it can:
#
# - Gateway memory/cpu profile information during test
# - The back-end logs to inspect request count and rate
# - The client-side request/response rates (using hey-hdr)

vars:
  # tag: v5.4.0-alpha2
  tag: dev
  rate: 50
  duration: 10
  config: limit-40
  concurrency: 1
  timestamp:
    sh: date +%s

env:
  GATEWAY_IMAGE: internal/tyk-gateway
  GATEWAY_IMAGE_PROD: tykio/tyk-gateway:{{.tag}}

tasks:
  default:
    desc: "Default"
    vars:
      output: '{{.tag}}-{{.config}}-rate-{{.rate}}-duration-{{.duration}}'
    cmds:
      - cd logs && task && cd -
      - task: drl
      - task: rrl
      - task: rrl-smooth
      - task: sentinel
      # - task: token
      # - task: leaky
      # - task: sliding
      - task: fixed
      - task: step:parse
      - task: step:render

  step:parse:
    desc: "Parse benchmark logs"
    cmds:
      - cd cmd/parse && task && cd -

  step:render:
    desc: "Render benchmark outputs"
    vars:
      output: '{{.tag}}-{{.config}}-rate-{{.rate}}-duration-{{.duration}}'
    cmds:
      - cd cmd/render && task duration={{.duration}} && cd -
      - mkdir -p docs/{{.output}}
      - mv cmd/render/output/* docs/{{ .output }}/
      - find ./docs -size -100c -name '*.png' -delete

  pull:
    desc: "Pull testing image"
    cmds:
      - docker pull $GATEWAY_IMAGE

  inspect:
    desc: "Inspect docker image"
    cmds:
      - docker inspect $GATEWAY_IMAGE | jq .[0].Config.Labels

  stress:
    desc: "Run stress tests"
    cmds:
      - task config=limit-40 rate=50
      - task config=limit-50k rate=50
      - task config=unlimited rate=50
      - task config=limit-40 rate=500
      - task config=limit-50k rate=500
      - task config=unlimited rate=500

  rrl:smoothing:
    desc: "Redis rolling rate limiter (smoothed)"
    vars:
      suite: 'rrl'
    cmds:
      - task: benchmark
        vars:
          suite: '{{.suite}}'
          smoothing: 'true'

  rrl:default:
    desc: "Redis rolling rate limiter"
    vars:
      suite: 'rrl'
    cmds:
      - task: benchmark
        vars:
          suite: '{{.suite}}'
          smoothing: 'false'


  token:
    desc: "Test token bucket rate limits"
    vars:
      suite: 'token-bucket'
    cmds:
      - task: benchmark
        vars:
          suite: '{{.suite}}'
          smoothing: 'false'

  fixed:
    desc: "Test fixed window rate limits"
    vars:
      suite: 'fixed-window'
    cmds:
      - task: benchmark
        vars:
          suite: '{{.suite}}'
          smoothing: 'false'

  sliding:
    desc: "Test sliding window rate limits"
    vars:
      suite: 'sliding-window'
    cmds:
      - task: benchmark
        vars:
          suite: '{{.suite}}'
          smoothing: 'false'

  sentinel:
    desc: "Test Sentinel redis rate limits"
    vars:
      suite: 'sentinel'
    cmds:
      - task: benchmark
        vars:
          suite: '{{.suite}}'
          smoothing: 'false'

  leaky:
    desc: "Test Leaky Bucket rate limits"
    vars:
      suite: 'leaky-bucket'
    cmds:
      - task: benchmark
        vars:
          suite: '{{.suite}}'
          smoothing: 'false'

  drl:
    desc: "Test DRL rate limits"
    vars:
      suite: 'drl'
    cmds:
      - task: benchmark
        vars:
          suite: '{{.suite}}'
          smoothing: 'false'

  benchmark:
    desc: "Run benchmarks with hey"
    required:
      - suite
      - smoothing
    env:
      timestamp: '{{.timestamp}}'
      suite: '{{.suite}}'
      GATEWAY_CONFIG: '{{.config}}'
      TYK_GW_ENABLELEAKYBUCKETRATELIMITER: '{{if eq .suite "leaky-bucket" }}true{{else}}false{{end}}'
      TYK_GW_ENABLETOKENBUCKETRATELIMITER: '{{if eq .suite "token-bucket" }}true{{else}}false{{end}}'
      TYK_GW_ENABLEFIXEDWINDOWRATELIMITER: '{{if eq .suite "fixed-window" }}true{{else}}false{{end}}'
      TYK_GW_ENABLESLIDINGWINDOWRATELIMITER: '{{if eq .suite "sliding-window" }}true{{else}}false{{end}}'
      TYK_GW_ENABLEREDISROLLINGLIMITER: '{{if eq .suite "rrl" }}true{{else}}false{{end}}'
      TYK_GW_ENABLESENTINELRATELIMITER: '{{if eq .suite "sentinel" }}true{{else}}false{{end}}'
      TYK_GW_ENABLESRATELIMITSMOOTHING: '{{.smoothing}}'
    vars:
      testurl: http://localhost:8080/smoke-test-api/?arg=test
    cmds:
      - defer: docker compose down --remove-orphans
      # https://github.com/moby/moby/issues/7710, can't use wildcards with docker (compose) cp
      - defer: mv ./logs/tyk.*.prof ./logs/{{.suite}}-{{.timestamp}}.prof
      - defer: mv ./logs/tyk.*.mprof ./logs/{{.suite}}-{{.timestamp}}.mprof
      - defer: find -type f -size 0 -delete
      - defer: docker compose exec gw bash -c 'tar -zcf - ./tyk.*.*prof' | tar -zxf - -C logs/
      - defer: docker compose restart gw
      - defer: docker compose stop httpbin
      - docker compose config
      - docker compose pull -q --ignore-pull-failures
      - docker compose up -d --remove-orphans --wait
      - sleep 5
      - docker compose logs -t -f &
      - hey -c {{.concurrency}} -z {{.duration}}s -q {{.rate}} -o csv "{{.testurl}}" > ./logs/{{.suite}}-{{.timestamp}}-hey.csv
      - docker compose exec redis redis-cli info all > ./logs/{{.suite}}-{{.timestamp}}-redis-info.txt
      - docker compose exec redis redis-cli keys '*' > ./logs/{{.suite}}-{{.timestamp}}-redis-keys.txt
      - sleep 1
