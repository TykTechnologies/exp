[
  {
    "name": "model",
    "imports": [
      "\"database/sql/driver\"",
      "\"encoding/json\"",
      "\"errors\"",
      "\"fmt\"",
      "\"github.com/TykTechnologies/graphql-go-tools/pkg/graphql\"",
      "\"github.com/TykTechnologies/storage/persistent/model\"",
      "\"github.com/TykTechnologies/tyk-analytics/config\"",
      "\"github.com/TykTechnologies/tyk/apidef\"",
      "\"github.com/TykTechnologies/tyk/apidef/oas\"",
      "\"go.mongodb.org/mongo-driver/bson\"",
      "\"strings\"",
      "\"time\""
    ],
    "declarations": [
      {
        "types": [
          {
            "name": "NotificationCommand",
            "type": "string"
          }
        ]
      },
      {
        "types": [
          {
            "name": "Notification",
            "fields": [
              {
                "name": "Command",
                "type": "NotificationCommand",
                "path": "Notification.Command",
                "tag": "json:\"command\"",
                "json_name": "command"
              },
              {
                "name": "Payload",
                "type": "string",
                "path": "Notification.Payload",
                "tag": "json:\"payload\"",
                "json_name": "payload"
              },
              {
                "name": "Signature",
                "type": "string",
                "path": "Notification.Signature",
                "tag": "json:\"signature\"",
                "json_name": "signature"
              }
            ]
          }
        ]
      },
      {
        "types": [
          {
            "name": "DetailedExampleAPIMetadata",
            "fields": [
              {
                "name": "Name",
                "type": "string",
                "path": "DetailedExampleAPIMetadata.Name",
                "tag": "json:\"name\"",
                "json_name": "name"
              },
              {
                "name": "Location",
                "type": "string",
                "path": "DetailedExampleAPIMetadata.Location",
                "tag": "json:\"location\"",
                "json_name": "location"
              },
              {
                "name": "Description",
                "type": "string",
                "path": "DetailedExampleAPIMetadata.Description",
                "tag": "json:\"description\"",
                "json_name": "description"
              },
              {
                "name": "Features",
                "type": "[]string",
                "path": "DetailedExampleAPIMetadata.Features",
                "tag": "json:\"features\"",
                "json_name": "features"
              },
              {
                "name": "MinTykVersion",
                "type": "string",
                "path": "DetailedExampleAPIMetadata.MinTykVersion",
                "tag": "json:\"min_version\"",
                "json_name": "min_version"
              },
              {
                "name": "ApiDefinition",
                "type": "apidef.APIDefinition",
                "path": "DetailedExampleAPIMetadata.ApiDefinition",
                "tag": "json:\"api_definition,omitempty\"",
                "json_name": "api_definition,omitempty"
              },
              {
                "name": "Readme",
                "type": "string",
                "path": "DetailedExampleAPIMetadata.Readme",
                "tag": "json:\"readme,omitempty\"",
                "json_name": "readme,omitempty"
              }
            ]
          }
        ]
      },
      {
        "types": [
          {
            "name": "ExampleAPIMetadata",
            "fields": [
              {
                "name": "Name",
                "type": "string",
                "path": "ExampleAPIMetadata.Name",
                "tag": "json:\"name\"",
                "json_name": "name"
              },
              {
                "name": "Location",
                "type": "string",
                "path": "ExampleAPIMetadata.Location",
                "tag": "json:\"location\"",
                "json_name": "location"
              },
              {
                "name": "ShortDescription",
                "type": "string",
                "path": "ExampleAPIMetadata.ShortDescription",
                "tag": "json:\"shortDescription\"",
                "json_name": "shortDescription"
              }
            ]
          }
        ]
      },
      {
        "types": [
          {
            "name": "Generic"
          }
        ]
      },
      {
        "types": [
          {
            "name": "SystemStatsEntity",
            "type": "string"
          }
        ]
      },
      {
        "types": [
          {
            "name": "SystemStats",
            "fields": [
              {
                "name": "Id",
                "type": "ObjectId",
                "path": "SystemStats.Id",
                "tag": "bson:\"_id,omitempty\" json:\"id\" gorm:\"primaryKey;column:_id\"",
                "json_name": "id"
              },
              {
                "name": "Entity",
                "type": "SystemStatsEntity",
                "path": "SystemStats.Entity",
                "tag": "bson:\"entity\" json:\"entity\"",
                "json_name": "entity"
              },
              {
                "name": "EntryDate",
                "type": "time.Time",
                "path": "SystemStats.EntryDate",
                "tag": "bson:\"entry_date\" json:\"entry_date\"",
                "json_name": "entry_date"
              },
              {
                "name": "EntryMonth",
                "type": "string",
                "path": "SystemStats.EntryMonth",
                "tag": "bson:\"entry_month\" json:\"-\"",
                "json_name": ""
              },
              {
                "name": "LastUpdated",
                "type": "time.Time",
                "path": "SystemStats.LastUpdated",
                "tag": "bson:\"last_updated\" json:\"last_updated\"",
                "json_name": "last_updated"
              },
              {
                "name": "Max",
                "type": "int",
                "path": "SystemStats.Max",
                "tag": "bson:\"max\" json:\"max\"",
                "json_name": "max"
              },
              {
                "name": "Min",
                "type": "int",
                "path": "SystemStats.Min",
                "tag": "bson:\"min\" json:\"min\"",
                "json_name": "min"
              },
              {
                "name": "Avg",
                "type": "int",
                "path": "SystemStats.Avg",
                "tag": "bson:\"avg\" json:\"avg\"",
                "json_name": "avg"
              },
              {
                "name": "MaxActive",
                "type": "int",
                "path": "SystemStats.MaxActive",
                "tag": "bson:\"max_active\" json:\"max_active\"",
                "json_name": "max_active"
              },
              {
                "name": "MinActive",
                "type": "int",
                "path": "SystemStats.MinActive",
                "tag": "bson:\"min_active\" json:\"min_active\"",
                "json_name": "min_active"
              },
              {
                "name": "AvgActive",
                "type": "int",
                "path": "SystemStats.AvgActive",
                "tag": "bson:\"avg_active\" json:\"avg_active\"",
                "json_name": "avg_active"
              },
              {
                "name": "LicenseEntitlement",
                "type": "int",
                "path": "SystemStats.LicenseEntitlement",
                "tag": "bson:\"license_entitlement\" json:\"license_entitlement\"",
                "json_name": "license_entitlement"
              },
              {
                "name": "LicenseEntitlementActive",
                "type": "int",
                "path": "SystemStats.LicenseEntitlementActive",
                "tag": "bson:\"license_entitlement_active\" json:\"license_entitlement_active\"",
                "json_name": "license_entitlement_active"
              }
            ]
          }
        ]
      },
      {
        "types": [
          {
            "name": "APIDescription",
            "fields": [
              {
                "name": "Name",
                "type": "string",
                "path": "APIDescription.Name",
                "tag": "bson:\"name\" json:\"name\"",
                "json_name": "name"
              },
              {
                "name": "ShortDescription",
                "type": "string",
                "path": "APIDescription.ShortDescription",
                "tag": "bson:\"short_description\" json:\"short_description\"",
                "json_name": "short_description"
              },
              {
                "name": "LongDescription",
                "type": "string",
                "path": "APIDescription.LongDescription",
                "tag": "bson:\"long_description\" json:\"long_description\"",
                "json_name": "long_description"
              },
              {
                "name": "Show",
                "type": "bool",
                "path": "APIDescription.Show",
                "tag": "bson:\"show\" json:\"show\"",
                "json_name": "show"
              },
              {
                "name": "APIID",
                "type": "string",
                "path": "APIDescription.APIID",
                "tag": "bson:\"api_id\" json:\"api_id\"",
                "json_name": "api_id"
              },
              {
                "name": "PolicyID",
                "type": "string",
                "path": "APIDescription.PolicyID",
                "tag": "bson:\"policy_id\" json:\"policy_id\"",
                "json_name": "policy_id"
              },
              {
                "name": "Documentation",
                "type": "string",
                "path": "APIDescription.Documentation",
                "tag": "bson:\"documentation\" json:\"documentation\"",
                "json_name": "documentation"
              },
              {
                "name": "Version",
                "type": "CatalogueVersion",
                "path": "APIDescription.Version",
                "tag": "bson:\"version\" json:\"version\"",
                "json_name": "version"
              },
              {
                "name": "IsKeyless",
                "type": "bool",
                "path": "APIDescription.IsKeyless",
                "tag": "bson:\"is_keyless\" json:\"is_keyless\"",
                "json_name": "is_keyless"
              },
              {
                "name": "Config",
                "type": "PortalConfig",
                "path": "APIDescription.Config",
                "tag": "bson:\"config\" json:\"config\"",
                "json_name": "config"
              },
              {
                "name": "UseCertificate",
                "type": "bool",
                "path": "APIDescription.UseCertificate",
                "tag": "bson:\"-\" json:\"-\"",
                "json_name": ""
              },
              {
                "name": "Fields",
                "type": "map[string]string",
                "path": "APIDescription.Fields",
                "tag": "bson:\"fields\" json:\"fields\"",
                "json_name": "fields"
              },
              {
                "name": "AuthType",
                "type": "string",
                "path": "APIDescription.AuthType",
                "tag": "bson:\"auth_type\" json:\"auth_type\"",
                "json_name": "auth_type"
              }
            ]
          },
          {
            "name": "APIDescriptionList",
            "type": "[]APIDescription"
          },
          {
            "name": "APIDocumentation",
            "fields": [
              {
                "name": "Id",
                "type": "ObjectId",
                "path": "APIDocumentation.Id",
                "tag": "bson:\"_id,omitempty\" json:\"id\" gorm:\"primaryKey;column:_id\"",
                "json_name": "id"
              },
              {
                "name": "Documentation",
                "type": "string",
                "path": "APIDocumentation.Documentation",
                "tag": "bson:\"documentation\" json:\"documentation\"",
                "json_name": "documentation"
              },
              {
                "name": "DocumentationType",
                "type": "string",
                "path": "APIDocumentation.DocumentationType",
                "tag": "bson:\"doc_type\" json:\"doc_type\"",
                "json_name": "doc_type"
              },
              {
                "name": "APIID",
                "type": "string",
                "path": "APIDocumentation.APIID",
                "tag": "bson:\"api_id\" json:\"api_id\"",
                "json_name": "api_id"
              }
            ]
          },
          {
            "name": "APILimit",
            "fields": [
              {
                "name": "Rate",
                "type": "float64",
                "path": "APILimit.Rate",
                "tag": "json:\"rate\" bson:\"rate\"",
                "json_name": "rate"
              },
              {
                "name": "Per",
                "type": "float64",
                "path": "APILimit.Per",
                "tag": "json:\"per\" bson:\"per\"",
                "json_name": "per"
              },
              {
                "name": "ThrottleInterval",
                "type": "float64",
                "path": "APILimit.ThrottleInterval",
                "tag": "json:\"throttle_interval\" bson:\"throttle_interval\"",
                "json_name": "throttle_interval"
              },
              {
                "name": "ThrottleRetryLimit",
                "type": "int",
                "path": "APILimit.ThrottleRetryLimit",
                "tag": "json:\"throttle_retry_limit\" bson:\"throttle_retry_limit\"",
                "json_name": "throttle_retry_limit"
              },
              {
                "name": "MaxQueryDepth",
                "type": "int",
                "path": "APILimit.MaxQueryDepth",
                "tag": "json:\"max_query_depth\" bson:\"max_query_depth\"",
                "json_name": "max_query_depth"
              },
              {
                "name": "QuotaMax",
                "type": "int64",
                "path": "APILimit.QuotaMax",
                "tag": "json:\"quota_max\" bson:\"quota_max\"",
                "json_name": "quota_max"
              },
              {
                "name": "QuotaRenews",
                "type": "int64",
                "path": "APILimit.QuotaRenews",
                "tag": "json:\"quota_renews\" bson:\"quota_renews\"",
                "json_name": "quota_renews"
              },
              {
                "name": "QuotaRemaining",
                "type": "int64",
                "path": "APILimit.QuotaRemaining",
                "tag": "json:\"quota_remaining\" bson:\"quota_remaining\"",
                "json_name": "quota_remaining"
              },
              {
                "name": "QuotaRenewalRate",
                "type": "int64",
                "path": "APILimit.QuotaRenewalRate",
                "tag": "json:\"quota_renewal_rate\" bson:\"quota_renewal_rate\"",
                "json_name": "quota_renewal_rate"
              },
              {
                "name": "SetByPolicy",
                "type": "bool",
                "path": "APILimit.SetByPolicy",
                "tag": "json:\"set_by_policy\" bson:\"set_by_policy\"",
                "json_name": "set_by_policy"
              },
              {
                "name": "Smoothing",
                "type": "RateLimitSmoothing",
                "path": "APILimit.Smoothing",
                "doc": "Smoothing contains rate limit smoothing settings.",
                "tag": "json:\"smoothing\" bson:\"smoothing\"",
                "json_name": "smoothing"
              }
            ]
          },
          {
            "name": "AccessDefinition",
            "fields": [
              {
                "name": "APIName",
                "type": "string",
                "path": "AccessDefinition.APIName",
                "tag": "json:\"api_name\" bson:\"apiname\"",
                "json_name": "api_name"
              },
              {
                "name": "APIID",
                "type": "string",
                "path": "AccessDefinition.APIID",
                "tag": "json:\"api_id\" bson:\"apiid\"",
                "json_name": "api_id"
              },
              {
                "name": "Versions",
                "type": "[]string",
                "path": "AccessDefinition.Versions",
                "tag": "json:\"versions\" bson:\"versions\"",
                "json_name": "versions"
              },
              {
                "name": "AllowedURLs",
                "type": "[]AccessSpec",
                "path": "AccessDefinition.AllowedURLs",
                "comment": "mapped string MUST be a valid regex",
                "tag": "json:\"allowed_urls\" bson:\"allowed_urls\"",
                "json_name": "allowed_urls"
              },
              {
                "name": "RestrictedTypes",
                "type": "[]graphql.Type",
                "path": "AccessDefinition.RestrictedTypes",
                "tag": "json:\"restricted_types\" bson:\"restricted_types\"",
                "json_name": "restricted_types"
              },
              {
                "name": "AllowedTypes",
                "type": "[]graphql.Type",
                "path": "AccessDefinition.AllowedTypes",
                "tag": "json:\"allowed_types\" bson:\"allowed_types\"",
                "json_name": "allowed_types"
              },
              {
                "name": "DisableIntrospection",
                "type": "bool",
                "path": "AccessDefinition.DisableIntrospection",
                "tag": "bson:\"disable_introspection\" json:\"disable_introspection\"",
                "json_name": "disable_introspection"
              },
              {
                "name": "Limit",
                "type": "APILimit",
                "path": "AccessDefinition.Limit",
                "tag": "json:\"limit\" bson:\"limit\"",
                "json_name": "limit"
              },
              {
                "name": "FieldAccessRights",
                "type": "[]FieldAccessDefinition",
                "path": "AccessDefinition.FieldAccessRights",
                "tag": "json:\"field_access_rights\" bson:\"field_access_rights\"",
                "json_name": "field_access_rights"
              },
              {
                "name": "AllowanceScope",
                "type": "string",
                "path": "AccessDefinition.AllowanceScope",
                "tag": "json:\"allowance_scope\" bson:\"allowance_scope\"",
                "json_name": "allowance_scope"
              }
            ]
          },
          {
            "name": "AccessSpec",
            "fields": [
              {
                "name": "URL",
                "type": "string",
                "path": "AccessSpec.URL",
                "tag": "json:\"url\"",
                "json_name": "url"
              },
              {
                "name": "Methods",
                "type": "[]string",
                "path": "AccessSpec.Methods",
                "tag": "json:\"methods\"",
                "json_name": "methods"
              }
            ]
          },
          {
            "name": "ApiCatalogue",
            "fields": [
              {
                "name": "Id",
                "type": "ObjectId",
                "path": "ApiCatalogue.Id",
                "tag": "bson:\"_id,omitempty\" json:\"id\" gorm:\"primaryKey;column:_id\"",
                "json_name": "id"
              },
              {
                "name": "OrgId",
                "type": "string",
                "path": "ApiCatalogue.OrgId",
                "tag": "bson:\"org_id\" json:\"org_id\"",
                "json_name": "org_id"
              },
              {
                "name": "APIS",
                "type": "APIDescriptionList",
                "path": "ApiCatalogue.APIS",
                "tag": "bson:\"apis\" json:\"apis\"",
                "json_name": "apis"
              },
              {
                "name": "Email",
                "type": "string",
                "path": "ApiCatalogue.Email",
                "tag": "bson:\"email\" json:\"email\"",
                "json_name": "email"
              }
            ]
          },
          {
            "name": "ApiDefinition",
            "fields": [
              {
                "name": "Categories",
                "type": "Categories",
                "path": "ApiDefinition.Categories",
                "tag": "bson:\"categories\" json:\"categories,omitempty\"",
                "json_name": "categories,omitempty"
              },
              {
                "name": "OAS",
                "type": "oas.OAS",
                "path": "ApiDefinition.OAS",
                "tag": "bson:\"oas,omitempty\" json:\"oas,omitempty\"",
                "json_name": "oas,omitempty"
              },
              {
                "name": "OASDoc",
                "type": "bson.M",
                "path": "ApiDefinition.OASDoc",
                "tag": "bson:\"oas_doc\" json:\"-\"",
                "json_name": ""
              },
              {
                "name": "HookReferences",
                "type": "[]HookReference",
                "path": "ApiDefinition.HookReferences",
                "tag": "bson:\"hook_references\" json:\"hook_references\"",
                "json_name": "hook_references"
              },
              {
                "name": "IsSite",
                "type": "bool",
                "path": "ApiDefinition.IsSite",
                "tag": "bson:\"is_site\" json:\"is_site\"",
                "json_name": "is_site"
              },
              {
                "name": "SortBy",
                "type": "int",
                "path": "ApiDefinition.SortBy",
                "tag": "bson:\"sort_by\" json:\"sort_by\"",
                "json_name": "sort_by"
              },
              {
                "name": "UserGroupOwners",
                "type": "[]ObjectId",
                "path": "ApiDefinition.UserGroupOwners",
                "tag": "bson:\"user_group_owners\" json:\"user_group_owners\"",
                "json_name": "user_group_owners"
              },
              {
                "name": "UserOwners",
                "type": "[]ObjectId",
                "path": "ApiDefinition.UserOwners",
                "tag": "bson:\"user_owners\" json:\"user_owners\"",
                "json_name": "user_owners"
              },
              {
                "name": "OASResponse",
                "type": "bool",
                "path": "ApiDefinition.OASResponse",
                "tag": "bson:\"-\" json:\"-\"",
                "json_name": ""
              },
              {
                "name": "TransformForGraphql",
                "type": "bool",
                "path": "ApiDefinition.TransformForGraphql",
                "doc": "Hacks graphql",
                "tag": "bson:\"-\" json:\"-\"",
                "json_name": ""
              },
              {
                "name": "ChangeBaseAPI",
                "type": "bool",
                "path": "ApiDefinition.ChangeBaseAPI",
                "tag": "bson:\"-\" json:\"-\"",
                "json_name": ""
              },
              {
                "name": "VersionsAlreadyUpdated",
                "type": "bool",
                "path": "ApiDefinition.VersionsAlreadyUpdated",
                "tag": "bson:\"-\" json:\"-\"",
                "json_name": ""
              }
            ]
          },
          {
            "name": "ApiDocument",
            "fields": [
              {
                "name": "ApiHumanName",
                "type": "string",
                "path": "ApiDocument.ApiHumanName",
                "tag": "bson:\"api_human_name\" json:\"api_human_name\"",
                "json_name": "api_human_name"
              },
              {
                "name": "APIID",
                "type": "string",
                "path": "ApiDocument.APIID",
                "tag": "bson:\"api_id\" json:\"api_id\"",
                "json_name": "api_id"
              }
            ]
          },
          {
            "name": "ApiModel"
          },
          {
            "name": "CatalogueVersion",
            "type": "string"
          },
          {
            "name": "DCROptions",
            "fields": [
              {
                "name": "IDPHost",
                "type": "string",
                "path": "DCROptions.IDPHost",
                "tag": "bson:\"idp_host\" json:\"idp_host\"",
                "json_name": "idp_host"
              },
              {
                "name": "AccessToken",
                "type": "string",
                "path": "DCROptions.AccessToken",
                "tag": "bson:\"access_token\" json:\"access_token\"",
                "json_name": "access_token"
              },
              {
                "name": "RegistrationEndpoint",
                "type": "string",
                "path": "DCROptions.RegistrationEndpoint",
                "tag": "bson:\"registration_endpoint\" json:\"registration_endpoint\"",
                "json_name": "registration_endpoint"
              },
              {
                "name": "Provider",
                "type": "string",
                "path": "DCROptions.Provider",
                "tag": "bson:\"provider\" json:\"provider\"",
                "json_name": "provider"
              },
              {
                "name": "GrantTypes",
                "type": "[]string",
                "path": "DCROptions.GrantTypes",
                "tag": "bson:\"grant_types\" json:\"grant_types\"",
                "json_name": "grant_types"
              },
              {
                "name": "ResponseTypes",
                "type": "[]string",
                "path": "DCROptions.ResponseTypes",
                "tag": "bson:\"response_types\" json:\"response_types\"",
                "json_name": "response_types"
              },
              {
                "name": "TokenEndpointAuthMethod",
                "type": "string",
                "path": "DCROptions.TokenEndpointAuthMethod",
                "tag": "bson:\"token_endpoint_auth_method\" json:\"token_endpoint_auth_method\"",
                "json_name": "token_endpoint_auth_method"
              }
            ]
          },
          {
            "name": "EventConfig",
            "fields": [
              {
                "name": "Webhook",
                "type": "string",
                "path": "EventConfig.Webhook",
                "tag": "bson:\"webhook\" json:\"webhook\"",
                "json_name": "webhook"
              },
              {
                "name": "Email",
                "type": "string",
                "path": "EventConfig.Email",
                "tag": "bson:\"email\" json:\"email\"",
                "json_name": "email"
              },
              {
                "name": "Redis",
                "type": "bool",
                "path": "EventConfig.Redis",
                "tag": "bson:\"redis\" json:\"redis\"",
                "json_name": "redis"
              }
            ]
          },
          {
            "name": "FieldAccessDefinition",
            "fields": [
              {
                "name": "TypeName",
                "type": "string",
                "path": "FieldAccessDefinition.TypeName",
                "tag": "json:\"type_name\" bson:\"type_name\"",
                "json_name": "type_name"
              },
              {
                "name": "FieldName",
                "type": "string",
                "path": "FieldAccessDefinition.FieldName",
                "tag": "json:\"field_name\" bson:\"field_name\"",
                "json_name": "field_name"
              },
              {
                "name": "Limits",
                "type": "FieldLimits",
                "path": "FieldAccessDefinition.Limits",
                "tag": "json:\"limits\" bson:\"limits\"",
                "json_name": "limits"
              }
            ]
          },
          {
            "name": "FieldLimits",
            "fields": [
              {
                "name": "MaxQueryDepth",
                "type": "int",
                "path": "FieldLimits.MaxQueryDepth",
                "tag": "json:\"max_query_depth\" bson:\"max_query_depth\"",
                "json_name": "max_query_depth"
              }
            ]
          },
          {
            "name": "HookReference",
            "fields": [
              {
                "name": "EventName",
                "type": "string",
                "path": "HookReference.EventName",
                "tag": "bson:\"event_name\" json:\"event_name\"",
                "json_name": "event_name"
              },
              {
                "name": "EventTimeout",
                "type": "int64",
                "path": "HookReference.EventTimeout",
                "tag": "bson:\"event_timeout\" json:\"event_timeout\"",
                "json_name": "event_timeout"
              },
              {
                "name": "Hook",
                "type": "WebHookHandlerConf",
                "path": "HookReference.Hook",
                "tag": "bson:\"hook\" json:\"hook\"",
                "json_name": "hook"
              }
            ]
          },
          {
            "name": "KeyRequest",
            "fields": [
              {
                "name": "Id",
                "type": "ObjectId",
                "path": "KeyRequest.Id",
                "tag": "bson:\"_id,omitempty\" json:\"id\" gorm:\"primaryKey;column:_id\"",
                "json_name": "id"
              },
              {
                "name": "Key",
                "type": "string",
                "path": "KeyRequest.Key",
                "tag": "bson:\"key\" json:\"key\"",
                "json_name": "key"
              },
              {
                "name": "OrgId",
                "type": "string",
                "path": "KeyRequest.OrgId",
                "tag": "bson:\"org_id\" json:\"org_id\"",
                "json_name": "org_id"
              },
              {
                "name": "ForAPI",
                "type": "string",
                "path": "KeyRequest.ForAPI",
                "tag": "bson:\"for_api\" json:\"for_api\"",
                "json_name": "for_api"
              },
              {
                "name": "ForPlan",
                "type": "string",
                "path": "KeyRequest.ForPlan",
                "tag": "bson:\"for_plan\" json:\"for_plan\"",
                "json_name": "for_plan"
              },
              {
                "name": "ApplyPolicies",
                "type": "[]string",
                "path": "KeyRequest.ApplyPolicies",
                "tag": "bson:\"apply_policies\" json:\"apply_policies\"",
                "json_name": "apply_policies"
              },
              {
                "name": "RemovePolicies",
                "type": "[]string",
                "path": "KeyRequest.RemovePolicies",
                "tag": "bson:\"remove_policies\" json:\"remove_policies\"",
                "json_name": "remove_policies"
              },
              {
                "name": "ByUser",
                "type": "string",
                "path": "KeyRequest.ByUser",
                "tag": "bson:\"by_user\" json:\"by_user\"",
                "json_name": "by_user"
              },
              {
                "name": "Fields",
                "type": "map[string]string",
                "path": "KeyRequest.Fields",
                "tag": "bson:\"fields\" json:\"fields\"",
                "json_name": "fields"
              },
              {
                "name": "Approved",
                "type": "bool",
                "path": "KeyRequest.Approved",
                "tag": "bson:\"approved\" json:\"approved\"",
                "json_name": "approved"
              },
              {
                "name": "Generated",
                "type": "bool",
                "path": "KeyRequest.Generated",
                "tag": "bson:\"generated\" json:\"generated\"",
                "json_name": "generated"
              },
              {
                "name": "DateCreated",
                "type": "time.Time",
                "path": "KeyRequest.DateCreated",
                "tag": "bson:\"date_created\" json:\"date_created\"",
                "json_name": "date_created"
              },
              {
                "name": "Version",
                "type": "CatalogueVersion",
                "path": "KeyRequest.Version",
                "tag": "bson:\"version\" json:\"version\"",
                "json_name": "version"
              },
              {
                "name": "JWTSecret",
                "type": "string",
                "path": "KeyRequest.JWTSecret",
                "tag": "bson:\"jwt_secret\" json:\"jwt_secret\"",
                "json_name": "jwt_secret"
              },
              {
                "name": "Certificate",
                "type": "string",
                "path": "KeyRequest.Certificate",
                "tag": "bson:\"certificate\" json:\"certificate\"",
                "json_name": "certificate"
              },
              {
                "name": "OauthInfo",
                "type": "KeyRequestOauthInfo",
                "path": "KeyRequest.OauthInfo",
                "tag": "bson:\"oauth_info,omitempty\" json:\"oauth_info,omitempty\"",
                "json_name": "oauth_info,omitempty"
              }
            ]
          },
          {
            "name": "KeyRequestOauthInfo",
            "fields": [
              {
                "name": "RedirectURI",
                "type": "string",
                "path": "KeyRequestOauthInfo.RedirectURI",
                "tag": "bson:\"redirect_uri\" json:\"redirect_uri\"",
                "json_name": "redirect_uri"
              }
            ]
          },
          {
            "name": "MenuList",
            "type": "map[string]interface{}"
          },
          {
            "name": "Menus",
            "fields": [
              {
                "name": "Id",
                "type": "ObjectId",
                "path": "Menus.Id",
                "tag": "bson:\"_id,omitempty\" json:\"id\" gorm:\"primaryKey;column:_id\"",
                "json_name": "id"
              },
              {
                "name": "Menus",
                "type": "MenuList",
                "path": "Menus.Menus",
                "tag": "bson:\"menus\" json:\"menus\"",
                "json_name": "menus"
              },
              {
                "name": "IsActive",
                "type": "bool",
                "path": "Menus.IsActive",
                "tag": "bson:\"is_active\" json:\"is_active\"",
                "json_name": "is_active"
              },
              {
                "name": "OrgId",
                "type": "string",
                "path": "Menus.OrgId",
                "tag": "bson:\"org_id\" json:\"org_id\"",
                "json_name": "org_id"
              }
            ]
          },
          {
            "name": "OpenPolicyConf",
            "fields": [
              {
                "name": "Rules",
                "type": "string",
                "path": "OpenPolicyConf.Rules",
                "tag": "bson:\"rules\" json:\"rules\"",
                "json_name": "rules"
              },
              {
                "name": "Enabled",
                "type": "bool",
                "path": "OpenPolicyConf.Enabled",
                "tag": "bson:\"enabled\" json:\"enabled\"",
                "json_name": "enabled"
              }
            ]
          },
          {
            "name": "OrganisationDocument",
            "fields": [
              {
                "name": "Id",
                "type": "ObjectId",
                "path": "OrganisationDocument.Id",
                "tag": "bson:\"_id,omitempty\" json:\"id\" gorm:\"primaryKey;column:_id\"",
                "json_name": "id"
              },
              {
                "name": "OwnerName",
                "type": "string",
                "path": "OrganisationDocument.OwnerName",
                "tag": "bson:\"owner_name\" json:\"owner_name\"",
                "json_name": "owner_name"
              },
              {
                "name": "OwnerSlug",
                "type": "string",
                "path": "OrganisationDocument.OwnerSlug",
                "tag": "bson:\"owner_slug\" json:\"owner_slug\"",
                "json_name": "owner_slug"
              },
              {
                "name": "CNAMEEnabled",
                "type": "bool",
                "path": "OrganisationDocument.CNAMEEnabled",
                "tag": "bson:\"cname_enabled\" json:\"cname_enabled\"",
                "json_name": "cname_enabled"
              },
              {
                "name": "CNAME",
                "type": "string",
                "path": "OrganisationDocument.CNAME",
                "tag": "bson:\"cname\" json:\"cname\"",
                "json_name": "cname"
              },
              {
                "name": "Apis",
                "type": "[]ApiDocument",
                "path": "OrganisationDocument.Apis",
                "tag": "bson:\"apis\" json:\"apis\"",
                "json_name": "apis"
              },
              {
                "name": "SSOEnabled",
                "type": "bool",
                "path": "OrganisationDocument.SSOEnabled",
                "tag": "bson:\"sso_enabled\" json:\"sso_enabled\"",
                "json_name": "sso_enabled"
              },
              {
                "name": "DeveloperQuota",
                "type": "int",
                "path": "OrganisationDocument.DeveloperQuota",
                "tag": "bson:\"developer_quota\" json:\"developer_quota\"",
                "json_name": "developer_quota"
              },
              {
                "name": "DeveloperCount",
                "type": "int",
                "path": "OrganisationDocument.DeveloperCount",
                "tag": "bson:\"developer_count\" json:\"developer_count\"",
                "json_name": "developer_count"
              },
              {
                "name": "Events",
                "type": "map[string]EventConfig",
                "path": "OrganisationDocument.Events",
                "tag": "bson:\"event_options\" json:\"event_options\"",
                "json_name": "event_options"
              },
              {
                "name": "HybridEnabled",
                "type": "bool",
                "path": "OrganisationDocument.HybridEnabled",
                "tag": "bson:\"hybrid_enabled\" json:\"hybrid_enabled\"",
                "json_name": "hybrid_enabled"
              },
              {
                "name": "UI",
                "type": "config.UIOptions",
                "path": "OrganisationDocument.UI",
                "tag": "bson:\"ui\" json:\"ui\"",
                "json_name": "ui"
              },
              {
                "name": "OrgOptionsMeta",
                "type": "map[string]interface{}",
                "path": "OrganisationDocument.OrgOptionsMeta",
                "tag": "bson:\"org_options_meta\" json:\"org_options_meta\"",
                "json_name": "org_options_meta"
              },
              {
                "name": "OpenPolicy",
                "type": "OpenPolicyConf",
                "path": "OrganisationDocument.OpenPolicy",
                "tag": "bson:\"open_policy\" json:\"open_policy\"",
                "json_name": "open_policy"
              },
              {
                "name": "AdditionalPermissions",
                "type": "any",
                "path": "OrganisationDocument.AdditionalPermissions",
                "tag": "bson:\"additional_permissions\" json:\"additional_permissions\"",
                "json_name": "additional_permissions"
              }
            ]
          },
          {
            "name": "Page",
            "fields": [
              {
                "name": "Id",
                "type": "ObjectId",
                "path": "Page.Id",
                "tag": "bson:\"_id,omitempty\" json:\"id\" gorm:\"primaryKey;column:_id\"",
                "json_name": "id"
              },
              {
                "name": "Title",
                "type": "string",
                "path": "Page.Title",
                "tag": "bson:\"title\" json:\"title\"",
                "json_name": "title"
              },
              {
                "name": "Slug",
                "type": "string",
                "path": "Page.Slug",
                "tag": "bson:\"slug\" json:\"slug\"",
                "json_name": "slug"
              },
              {
                "name": "TemplateName",
                "type": "string",
                "path": "Page.TemplateName",
                "tag": "bson:\"template_name\" json:\"template_name\"",
                "json_name": "template_name"
              },
              {
                "name": "Fields",
                "type": "map[string]string",
                "path": "Page.Fields",
                "tag": "bson:\"fields\" json:\"fields\"",
                "json_name": "fields"
              },
              {
                "name": "OrgId",
                "type": "string",
                "path": "Page.OrgId",
                "tag": "bson:\"org_id\" json:\"org_id\"",
                "json_name": "org_id"
              },
              {
                "name": "IsHomepage",
                "type": "bool",
                "path": "Page.IsHomepage",
                "tag": "bson:\"is_homepage\" json:\"is_homepage\"",
                "json_name": "is_homepage"
              },
              {
                "name": "PageSettings",
                "type": "map[string]string",
                "path": "Page.PageSettings",
                "tag": "bson:\"page_settings\" json:\"page_settings\"",
                "json_name": "page_settings"
              }
            ]
          },
          {
            "name": "Policy",
            "fields": [
              {
                "name": "MID",
                "type": "ObjectId",
                "path": "Policy.MID",
                "tag": "bson:\"_id,omitempty\" json:\"_id\" gorm:\"primaryKey;column:_id\"",
                "json_name": "_id"
              },
              {
                "name": "ID",
                "type": "string",
                "path": "Policy.ID",
                "tag": "bson:\"id,omitempty\" json:\"id\"",
                "json_name": "id"
              },
              {
                "name": "Name",
                "type": "string",
                "path": "Policy.Name",
                "tag": "bson:\"name\" json:\"name\"",
                "json_name": "name"
              },
              {
                "name": "OrgID",
                "type": "string",
                "path": "Policy.OrgID",
                "tag": "bson:\"org_id\" json:\"org_id\"",
                "json_name": "org_id"
              },
              {
                "name": "Rate",
                "type": "float64",
                "path": "Policy.Rate",
                "tag": "bson:\"rate\" json:\"rate\"",
                "json_name": "rate"
              },
              {
                "name": "Per",
                "type": "float64",
                "path": "Policy.Per",
                "tag": "bson:\"per\" json:\"per\"",
                "json_name": "per"
              },
              {
                "name": "QuotaMax",
                "type": "int64",
                "path": "Policy.QuotaMax",
                "tag": "bson:\"quota_max\" json:\"quota_max\"",
                "json_name": "quota_max"
              },
              {
                "name": "QuotaRenewalRate",
                "type": "int64",
                "path": "Policy.QuotaRenewalRate",
                "tag": "bson:\"quota_renewal_rate\" json:\"quota_renewal_rate\"",
                "json_name": "quota_renewal_rate"
              },
              {
                "name": "ThrottleInterval",
                "type": "float64",
                "path": "Policy.ThrottleInterval",
                "tag": "bson:\"throttle_interval\" json:\"throttle_interval\"",
                "json_name": "throttle_interval"
              },
              {
                "name": "ThrottleRetryLimit",
                "type": "int",
                "path": "Policy.ThrottleRetryLimit",
                "tag": "bson:\"throttle_retry_limit\" json:\"throttle_retry_limit\"",
                "json_name": "throttle_retry_limit"
              },
              {
                "name": "MaxQueryDepth",
                "type": "int",
                "path": "Policy.MaxQueryDepth",
                "tag": "bson:\"max_query_depth\" json:\"max_query_depth\"",
                "json_name": "max_query_depth"
              },
              {
                "name": "AccessRights",
                "type": "map[string]AccessDefinition",
                "path": "Policy.AccessRights",
                "tag": "bson:\"access_rights\" json:\"access_rights\"",
                "json_name": "access_rights"
              },
              {
                "name": "HMACEnabled",
                "type": "bool",
                "path": "Policy.HMACEnabled",
                "tag": "bson:\"hmac_enabled\" json:\"hmac_enabled\"",
                "json_name": "hmac_enabled"
              },
              {
                "name": "Active",
                "type": "bool",
                "path": "Policy.Active",
                "tag": "bson:\"active\" json:\"active\"",
                "json_name": "active"
              },
              {
                "name": "IsInactive",
                "type": "bool",
                "path": "Policy.IsInactive",
                "tag": "bson:\"is_inactive\" json:\"is_inactive\"",
                "json_name": "is_inactive"
              },
              {
                "name": "DateCreated",
                "type": "time.Time",
                "path": "Policy.DateCreated",
                "tag": "bson:\"date_created\" json:\"date_created\"",
                "json_name": "date_created"
              },
              {
                "name": "Tags",
                "type": "[]string",
                "path": "Policy.Tags",
                "tag": "bson:\"tags\" json:\"tags\"",
                "json_name": "tags"
              },
              {
                "name": "KeyExpiresIn",
                "type": "int64",
                "path": "Policy.KeyExpiresIn",
                "tag": "bson:\"key_expires_in\" json:\"key_expires_in\"",
                "json_name": "key_expires_in"
              },
              {
                "name": "Partitions",
                "type": "struct{}",
                "path": "Policy.Partitions",
                "tag": "bson:\"partitions\" json:\"partitions\"",
                "json_name": "partitions"
              },
              {
                "name": "LastUpdated",
                "type": "string",
                "path": "Policy.LastUpdated",
                "tag": "bson:\"last_updated\" json:\"last_updated\"",
                "json_name": "last_updated"
              },
              {
                "name": "MetaData",
                "type": "map[string]interface{}",
                "path": "Policy.MetaData",
                "tag": "bson:\"meta_data\" json:\"meta_data\"",
                "json_name": "meta_data"
              },
              {
                "name": "Smoothing",
                "type": "RateLimitSmoothing",
                "path": "Policy.Smoothing",
                "doc": "Smoothing contains rate limit smoothing settings.",
                "tag": "json:\"smoothing\" bson:\"smoothing\"",
                "json_name": "smoothing"
              }
            ]
          },
          {
            "name": "PortalCSS",
            "fields": [
              {
                "name": "Id",
                "type": "ObjectId",
                "path": "PortalCSS.Id",
                "tag": "bson:\"_id,omitempty\" json:\"id\" gorm:\"primaryKey;column:_id\"",
                "json_name": "id"
              },
              {
                "name": "OrgId",
                "type": "string",
                "path": "PortalCSS.OrgId",
                "tag": "bson:\"org_id\" json:\"org_id\"",
                "json_name": "org_id"
              },
              {
                "name": "PageCSS",
                "type": "string",
                "path": "PortalCSS.PageCSS",
                "tag": "bson:\"page_css\" json:\"page_css\"",
                "json_name": "page_css"
              },
              {
                "name": "EmailCSS",
                "type": "string",
                "path": "PortalCSS.EmailCSS",
                "tag": "bson:\"email_css\" json:\"email_css\"",
                "json_name": "email_css"
              }
            ]
          },
          {
            "name": "PortalConfig",
            "fields": [
              {
                "name": "Id",
                "type": "ObjectId",
                "path": "PortalConfig.Id",
                "tag": "bson:\"_id,omitempty\" json:\"id\" gorm:\"primaryKey;column:_id\"",
                "json_name": "id"
              },
              {
                "name": "OrgID",
                "type": "string",
                "path": "PortalConfig.OrgID",
                "tag": "bson:\"org_id\" json:\"org_id\"",
                "json_name": "org_id"
              },
              {
                "name": "SignUpFields",
                "type": "[]string",
                "path": "PortalConfig.SignUpFields",
                "tag": "bson:\"signup_fields\" json:\"signup_fields\"",
                "json_name": "signup_fields"
              },
              {
                "name": "KeyRequestFields",
                "type": "[]string",
                "path": "PortalConfig.KeyRequestFields",
                "tag": "bson:\"key_request_fields\" json:\"key_request_fields\"",
                "json_name": "key_request_fields"
              },
              {
                "name": "RequireKeyApproval",
                "type": "bool",
                "path": "PortalConfig.RequireKeyApproval",
                "tag": "bson:\"require_key_approval\" json:\"require_key_approval\"",
                "json_name": "require_key_approval"
              },
              {
                "name": "SecureKeyApproval",
                "type": "bool",
                "path": "PortalConfig.SecureKeyApproval",
                "tag": "bson:\"secure_key_approval\" json:\"secure_key_approval\"",
                "json_name": "secure_key_approval"
              },
              {
                "name": "RedirectOnKeyRequest",
                "type": "bool",
                "path": "PortalConfig.RedirectOnKeyRequest",
                "tag": "bson:\"redirect_on_key_request\" json:\"redirect_on_key_request\"",
                "json_name": "redirect_on_key_request"
              },
              {
                "name": "RedirectTo",
                "type": "string",
                "path": "PortalConfig.RedirectTo",
                "tag": "bson:\"redirect_to\" json:\"redirect_to\"",
                "json_name": "redirect_to"
              },
              {
                "name": "EnableMultiSelection",
                "type": "bool",
                "path": "PortalConfig.EnableMultiSelection",
                "tag": "bson:\"enable_multi_selection\" json:\"enable_multi_selection\"",
                "json_name": "enable_multi_selection"
              },
              {
                "name": "DisableLogin",
                "type": "bool",
                "path": "PortalConfig.DisableLogin",
                "tag": "bson:\"disable_login\" json:\"disable_login\"",
                "json_name": "disable_login"
              },
              {
                "name": "DisableSignup",
                "type": "bool",
                "path": "PortalConfig.DisableSignup",
                "tag": "bson:\"disable_signup\" json:\"disable_signup\"",
                "json_name": "disable_signup"
              },
              {
                "name": "DisableAutoLogin",
                "type": "bool",
                "path": "PortalConfig.DisableAutoLogin",
                "tag": "bson:\"disable_auto_login\" json:\"disable_auto_login\"",
                "json_name": "disable_auto_login"
              },
              {
                "name": "CatalogueLoginOnly",
                "type": "bool",
                "path": "PortalConfig.CatalogueLoginOnly",
                "tag": "bson:\"catalogue_login_only\" json:\"catalogue_login_only\"",
                "json_name": "catalogue_login_only"
              },
              {
                "name": "OAuthUsageLimit",
                "type": "int",
                "path": "PortalConfig.OAuthUsageLimit",
                "tag": "bson:\"oauth_usage_limit\" json:\"oauth_usage_limit\"",
                "json_name": "oauth_usage_limit"
              },
              {
                "name": "Email",
                "type": "string",
                "path": "PortalConfig.Email",
                "tag": "json:\"email\" bson:\"email\"",
                "json_name": "email"
              },
              {
                "name": "MailOptions",
                "type": "struct{}",
                "path": "PortalConfig.MailOptions",
                "tag": "bson:\"mail_options\" json:\"mail_options\"",
                "json_name": "mail_options"
              },
              {
                "name": "DCROptions",
                "type": "DCROptions",
                "path": "PortalConfig.DCROptions",
                "tag": "bson:\"dcr_options\" json:\"dcr_options\"",
                "json_name": "dcr_options"
              },
              {
                "name": "EnableDCR",
                "type": "bool",
                "path": "PortalConfig.EnableDCR",
                "tag": "bson:\"enable_dcr\" json:\"enable_dcr\"",
                "json_name": "enable_dcr"
              },
              {
                "name": "Override",
                "type": "bool",
                "path": "PortalConfig.Override",
                "tag": "bson:\"override\" json:\"override\"",
                "json_name": "override"
              },
              {
                "name": "HashKeys",
                "type": "bool",
                "path": "PortalConfig.HashKeys",
                "doc": "Internal field, inherited from dashboard config",
                "tag": "",
                "json_name": "HashKeys"
              }
            ]
          },
          {
            "name": "PortalDeveloper",
            "fields": [
              {
                "name": "Id",
                "type": "ObjectId",
                "path": "PortalDeveloper.Id",
                "tag": "bson:\"_id,omitempty\" json:\"id\" gorm:\"primaryKey;column:_id\"",
                "json_name": "id"
              },
              {
                "name": "Email",
                "type": "string",
                "path": "PortalDeveloper.Email",
                "tag": "bson:\"email\" json:\"email\"",
                "json_name": "email"
              },
              {
                "name": "Password",
                "type": "string",
                "path": "PortalDeveloper.Password",
                "tag": "bson:\"password\" json:\"-\"",
                "json_name": ""
              },
              {
                "name": "DateCreated",
                "type": "time.Time",
                "path": "PortalDeveloper.DateCreated",
                "tag": "bson:\"date_created\" json:\"date_created\"",
                "json_name": "date_created"
              },
              {
                "name": "InActive",
                "type": "bool",
                "path": "PortalDeveloper.InActive",
                "tag": "bson:\"inactive\" json:\"inactive\"",
                "json_name": "inactive"
              },
              {
                "name": "OrgId",
                "type": "string",
                "path": "PortalDeveloper.OrgId",
                "tag": "bson:\"org_id\" json:\"org_id\"",
                "json_name": "org_id"
              },
              {
                "name": "Keys",
                "type": "map[string]interface{}",
                "path": "PortalDeveloper.Keys",
                "tag": "bson:\"keys\" json:\"keys\"",
                "json_name": "keys"
              },
              {
                "name": "Subscriptions",
                "type": "map[string]string",
                "path": "PortalDeveloper.Subscriptions",
                "tag": "bson:\"subscriptions\" json:\"subscriptions\"",
                "json_name": "subscriptions"
              },
              {
                "name": "Fields",
                "type": "map[string]string",
                "path": "PortalDeveloper.Fields",
                "tag": "bson:\"fields\" json:\"fields\"",
                "json_name": "fields"
              },
              {
                "name": "Nonce",
                "type": "string",
                "path": "PortalDeveloper.Nonce",
                "tag": "bson:\"nonce\" json:\"nonce\"",
                "json_name": "nonce"
              },
              {
                "name": "SSOKey",
                "type": "string",
                "path": "PortalDeveloper.SSOKey",
                "tag": "bson:\"sso_key\" json:\"sso_key\"",
                "json_name": "sso_key"
              },
              {
                "name": "OauthClients",
                "type": "map[string]interface{}",
                "path": "PortalDeveloper.OauthClients",
                "tag": "bson:\"oauth_clients,omitempty\" json:\"oauth_clients,omitempty\"",
                "json_name": "oauth_clients,omitempty"
              },
              {
                "name": "PasswordMaxDays",
                "type": "int",
                "path": "PortalDeveloper.PasswordMaxDays",
                "tag": "bson:\"password_max_days\" json:\"password_max_days\"",
                "json_name": "password_max_days"
              },
              {
                "name": "PasswordUpdated",
                "type": "time.Time",
                "path": "PortalDeveloper.PasswordUpdated",
                "tag": "bson:\"password_updated\" json:\"password_updated\"",
                "json_name": "password_updated"
              },
              {
                "name": "PWHistory",
                "type": "[]string",
                "path": "PortalDeveloper.PWHistory",
                "tag": "bson:\"PWHistory\" json:\"-\"",
                "json_name": ""
              },
              {
                "name": "LastLoginDate",
                "type": "time.Time",
                "path": "PortalDeveloper.LastLoginDate",
                "tag": "bson:\"last_login_date\" json:\"last_login_date\"",
                "json_name": "last_login_date"
              }
            ]
          },
          {
            "name": "PortalSession",
            "fields": [
              {
                "name": "Id",
                "type": "ObjectId",
                "path": "PortalSession.Id",
                "tag": "bson:\"_id,omitempty\" gorm:\"primaryKey;column:_id\"",
                "json_name": "Id"
              },
              {
                "name": "Data",
                "type": "string",
                "path": "PortalSession.Data",
                "tag": "",
                "json_name": "Data"
              },
              {
                "name": "Modified",
                "type": "time.Time",
                "path": "PortalSession.Modified",
                "tag": "",
                "json_name": "Modified"
              }
            ]
          },
          {
            "name": "User",
            "fields": [
              {
                "name": "Id",
                "type": "ObjectId",
                "path": "User.Id",
                "tag": "bson:\"_id,omitempty\" json:\"id\" gorm:\"primaryKey;column:_id\"",
                "json_name": "id"
              },
              {
                "name": "FirstName",
                "type": "string",
                "path": "User.FirstName",
                "tag": "json:\"first_name\" gorm:\"column:firstname\"",
                "json_name": "first_name"
              },
              {
                "name": "LastName",
                "type": "string",
                "path": "User.LastName",
                "tag": "json:\"last_name\" gorm:\"column:lastname\"",
                "json_name": "last_name"
              },
              {
                "name": "EmailAddress",
                "type": "string",
                "path": "User.EmailAddress",
                "tag": "json:\"email_address\" gorm:\"column:emailaddress\"",
                "json_name": "email_address"
              },
              {
                "name": "Password",
                "type": "string",
                "path": "User.Password",
                "tag": "json:\"-\"",
                "json_name": ""
              },
              {
                "name": "OrgID",
                "type": "string",
                "path": "User.OrgID",
                "tag": "json:\"org_id\" gorm:\"column:orgid\"",
                "json_name": "org_id"
              },
              {
                "name": "Active",
                "type": "bool",
                "path": "User.Active",
                "tag": "json:\"active\"",
                "json_name": "active"
              },
              {
                "name": "AccessKey",
                "type": "string",
                "path": "User.AccessKey",
                "tag": "json:\"access_key\" gorm:\"column:accesskey\"",
                "json_name": "access_key"
              },
              {
                "name": "Rights",
                "type": "config.UserPermissionObject",
                "path": "User.Rights",
                "tag": "json:\"user_permissions\" gorm:\"column:rights\"",
                "json_name": "user_permissions"
              },
              {
                "name": "GroupID",
                "type": "string",
                "path": "User.GroupID",
                "tag": "json:\"group_id\" gorm:\"column:groupid\"",
                "json_name": "group_id"
              },
              {
                "name": "PasswordMaxDays",
                "type": "int",
                "path": "User.PasswordMaxDays",
                "tag": "json:\"password_max_days\" gorm:\"column:passwordmaxdays\"",
                "json_name": "password_max_days"
              },
              {
                "name": "PasswordUpdated",
                "type": "time.Time",
                "path": "User.PasswordUpdated",
                "tag": "json:\"password_updated\" gorm:\"column:passwordupdated\"",
                "json_name": "password_updated"
              },
              {
                "name": "PWHistory",
                "type": "[]string",
                "path": "User.PWHistory",
                "tag": "json:\"-\" gorm:\"column:pwhistory\"",
                "json_name": ""
              },
              {
                "name": "CreatedAt",
                "type": "time.Time",
                "path": "User.CreatedAt",
                "tag": "json:\"-\"",
                "json_name": ""
              },
              {
                "name": "LastLoginDate",
                "type": "time.Time",
                "path": "User.LastLoginDate",
                "tag": "json:\"last_login_date\" gorm:\"column:lastlogindate\"",
                "json_name": "last_login_date"
              }
            ]
          },
          {
            "name": "UserGroup",
            "fields": [
              {
                "name": "Id",
                "type": "ObjectId",
                "path": "UserGroup.Id",
                "tag": "bson:\"_id,omitempty\" json:\"id\" gorm:\"primaryKey;column:_id\"",
                "json_name": "id"
              },
              {
                "name": "Name",
                "type": "string",
                "path": "UserGroup.Name",
                "tag": "json:\"name\"",
                "json_name": "name"
              },
              {
                "name": "Description",
                "type": "string",
                "path": "UserGroup.Description",
                "tag": "json:\"description\"",
                "json_name": "description"
              },
              {
                "name": "OrgID",
                "type": "string",
                "path": "UserGroup.OrgID",
                "tag": "json:\"org_id\" gorm:\"column:orgid\"",
                "json_name": "org_id"
              },
              {
                "name": "Active",
                "type": "bool",
                "path": "UserGroup.Active",
                "tag": "json:\"active\"",
                "json_name": "active"
              },
              {
                "name": "Rights",
                "type": "config.UserPermissionObject",
                "path": "UserGroup.Rights",
                "tag": "json:\"user_permissions\" gorm:\"column:rights\"",
                "json_name": "user_permissions"
              },
              {
                "name": "PasswordMaxDays",
                "type": "int",
                "path": "UserGroup.PasswordMaxDays",
                "tag": "json:\"password_max_days\" gorm:\"column:passwordmaxdays\"",
                "json_name": "password_max_days"
              }
            ]
          },
          {
            "name": "WebHookHandlerConf",
            "fields": [
              {
                "name": "Id",
                "type": "ObjectId",
                "path": "WebHookHandlerConf.Id",
                "tag": "bson:\"_id,omitempty\" json:\"id\" gorm:\"primaryKey;column:_id\"",
                "json_name": "id"
              },
              {
                "name": "WebhookID",
                "type": "string",
                "path": "WebHookHandlerConf.WebhookID",
                "tag": "bson:\"webhook_id\" json:\"webhook_id\"",
                "json_name": "webhook_id"
              },
              {
                "name": "OrgID",
                "type": "string",
                "path": "WebHookHandlerConf.OrgID",
                "tag": "bson:\"org_id\" json:\"org_id\"",
                "json_name": "org_id"
              },
              {
                "name": "Name",
                "type": "string",
                "path": "WebHookHandlerConf.Name",
                "tag": "bson:\"name\" json:\"name\"",
                "json_name": "name"
              },
              {
                "name": "Method",
                "type": "string",
                "path": "WebHookHandlerConf.Method",
                "tag": "bson:\"method\" json:\"method\"",
                "json_name": "method"
              },
              {
                "name": "TargetPath",
                "type": "string",
                "path": "WebHookHandlerConf.TargetPath",
                "tag": "bson:\"target_path\" json:\"target_path\"",
                "json_name": "target_path"
              },
              {
                "name": "TemplatePath",
                "type": "string",
                "path": "WebHookHandlerConf.TemplatePath",
                "tag": "bson:\"template_path\" json:\"template_path\"",
                "json_name": "template_path"
              },
              {
                "name": "HeaderList",
                "type": "map[string]string",
                "path": "WebHookHandlerConf.HeaderList",
                "tag": "bson:\"header_map\" json:\"header_map\"",
                "json_name": "header_map"
              },
              {
                "name": "EventTimeout",
                "type": "int64",
                "path": "WebHookHandlerConf.EventTimeout",
                "tag": "bson:\"event_timeout\" json:\"event_timeout\"",
                "json_name": "event_timeout"
              }
            ]
          }
        ]
      },
      {
        "types": [
          {
            "name": "DBM",
            "type": "model.DBM"
          },
          {
            "name": "DBObject",
            "type": "model.DBObject"
          },
          {
            "name": "ObjectId",
            "type": "model.ObjectID"
          }
        ]
      },
      {
        "types": [
          {
            "name": "Storage",
            "doc": "Storage drivers must implement the Storage interfaace."
          },
          {
            "name": "StorageOption",
            "doc": "StorageOption holds the storage option config for the storage driver.",
            "type": "string"
          }
        ]
      },
      {
        "types": [
          {
            "name": "WebhookMeta",
            "fields": [
              {
                "name": "Event",
                "type": "string",
                "path": "WebhookMeta.Event",
                "tag": "bson:\"event\" json:\"event\"",
                "json_name": "event"
              },
              {
                "name": "Data",
                "type": "",
                "path": "WebhookMeta.Data",
                "tag": "bson:\"data\" json:\"data\"",
                "json_name": "data"
              }
            ]
          }
        ]
      },
      {
        "types": [
          {
            "name": "License",
            "fields": [
              {
                "name": "Id",
                "type": "ObjectId",
                "path": "License.Id",
                "tag": "bson:\"_id,omitempty\" json:\"id\" gorm:\"primaryKey;column:_id\"",
                "json_name": "id"
              },
              {
                "name": "CreatedAt",
                "type": "time.Time",
                "path": "License.CreatedAt",
                "tag": "",
                "json_name": "CreatedAt"
              },
              {
                "name": "UpdatedAt",
                "type": "time.Time",
                "path": "License.UpdatedAt",
                "tag": "",
                "json_name": "UpdatedAt"
              },
              {
                "name": "LicenseKey",
                "type": "string",
                "path": "License.LicenseKey",
                "tag": "json:\"license\"",
                "json_name": "license"
              }
            ]
          }
        ]
      },
      {
        "doc": "APIDefinitionTabler implementation of DBObject to count APIDefinition/tyk_apis.\nThis avoids cyclic import by importing from dashboard.",
        "types": [
          {
            "name": "APIDefinitionTabler"
          }
        ]
      },
      {
        "doc": "APIResponse is a type alias for ApiError, used to represent a generic API response.",
        "types": [
          {
            "name": "APIResponse",
            "type": "ApiError"
          }
        ]
      },
      {
        "doc": "AccessManagementPayload is the payload for managing access to an API.",
        "types": [
          {
            "name": "AccessManagementPayload",
            "fields": [
              {
                "name": "UserIds",
                "type": "[]string",
                "path": "AccessManagementPayload.UserIds",
                "tag": "json:\"userIds,omitempty\"",
                "json_name": "userIds,omitempty"
              },
              {
                "name": "UserGroupIds",
                "type": "[]string",
                "path": "AccessManagementPayload.UserGroupIds",
                "tag": "json:\"userGroupIds,omitempty\"",
                "json_name": "userGroupIds,omitempty"
              }
            ]
          }
        ]
      },
      {
        "doc": "AllCategoriesResponse is a struct that holds a list of all the categories and the number of APIs that have those categories.",
        "types": [
          {
            "name": "AllCategoriesResponse",
            "fields": [
              {
                "name": "Categories",
                "type": "[]CategoryCount",
                "path": "AllCategoriesResponse.Categories",
                "tag": "json:\"categories\"",
                "json_name": "categories"
              }
            ]
          }
        ]
      },
      {
        "doc": "ApiError represents the standard structure of an API error response. It includes a status message,\na detailed error message, optional metadata, and an optional ID that can be omitted if empty.",
        "types": [
          {
            "name": "ApiError",
            "fields": [
              {
                "name": "Status",
                "type": "string",
                "path": "ApiError.Status",
                "tag": "",
                "json_name": "Status"
              },
              {
                "name": "Message",
                "type": "string",
                "path": "ApiError.Message",
                "tag": "",
                "json_name": "Message"
              },
              {
                "name": "Meta",
                "type": "",
                "path": "ApiError.Meta",
                "tag": "",
                "json_name": "Meta"
              },
              {
                "name": "ID",
                "type": "string",
                "path": "ApiError.ID",
                "tag": "json:\",omitempty\"",
                "json_name": ",omitempty"
              }
            ]
          }
        ]
      },
      {
        "doc": "ApiImportByUrlPayload represents the payload of an API request to import a dashboard from a URL.",
        "types": [
          {
            "name": "ApiImportByUrlPayload",
            "fields": [
              {
                "name": "Url",
                "type": "string",
                "path": "ApiImportByUrlPayload.Url",
                "tag": "json:\"url\"",
                "json_name": "url"
              }
            ]
          }
        ]
      },
      {
        "doc": "ApiValidationError extends ApiError with a list of error strings specific to API validation failures.\nIt is used to convey detailed information about validation errors in API requests.",
        "types": [
          {
            "name": "ApiValidationError",
            "fields": [
              {
                "name": "Errors",
                "type": "[]string",
                "path": "ApiValidationError.Errors",
                "tag": "",
                "json_name": "Errors"
              }
            ]
          }
        ]
      },
      {
        "doc": "Asset serves as a model for asset data in both HTTP requests and database interactions.\nIt defines the structure for asset data as received in API requests and as stored in the database,\nensuring consistency across different layers of the application.",
        "types": [
          {
            "name": "Asset",
            "fields": [
              {
                "name": "DBID",
                "type": "ObjectId",
                "path": "Asset.DBID",
                "tag": "bson:\"_id,omitempty\" json:\"_id,omitempty\" gorm:\"primaryKey;column:_id\"",
                "json_name": "_id,omitempty"
              },
              {
                "name": "ID",
                "type": "string",
                "path": "Asset.ID",
                "tag": "bson:\"id\" json:\"id\"",
                "json_name": "id"
              },
              {
                "name": "OrgID",
                "type": "string",
                "path": "Asset.OrgID",
                "tag": "bson:\"org_id\" json:\"org_id\" gorm:\"primaryKey;column:org_id\"",
                "json_name": "org_id"
              },
              {
                "name": "Name",
                "type": "string",
                "path": "Asset.Name",
                "tag": "bson:\"name\" json:\"name\"",
                "json_name": "name"
              },
              {
                "name": "Description",
                "type": "string",
                "path": "Asset.Description",
                "tag": "bson:\"description\" json:\"description\"",
                "json_name": "description"
              },
              {
                "name": "Kind",
                "type": "AssetKind",
                "path": "Asset.Kind",
                "tag": "bson:\"kind\" json:\"kind\"",
                "json_name": "kind"
              },
              {
                "name": "Data",
                "type": "JSONRawMessage",
                "path": "Asset.Data",
                "tag": "bson:\"data\" json:\"data\"",
                "json_name": "data"
              },
              {
                "name": "LastUpdated",
                "type": "time.Time",
                "path": "Asset.LastUpdated",
                "tag": "bson:\"last_updated\" json:\"last_updated\"",
                "json_name": "last_updated"
              }
            ]
          }
        ]
      },
      {
        "doc": "AssetKind defines a type for representing different kinds of assets.\nIt is used to specify the type of asset in a clear and type-safe manner.",
        "types": [
          {
            "name": "AssetKind",
            "type": "string"
          }
        ]
      },
      {
        "doc": "Categories is a type alias for a slice of strings.",
        "types": [
          {
            "name": "Categories",
            "type": "[]string"
          }
        ]
      },
      {
        "doc": "CategoriesPayload is a struct that holds a list of categories.",
        "types": [
          {
            "name": "CategoriesPayload",
            "fields": [
              {
                "name": "Categories",
                "type": "[]string",
                "path": "CategoriesPayload.Categories",
                "tag": "json:\"categories\"",
                "json_name": "categories"
              }
            ]
          }
        ]
      },
      {
        "doc": "CategoryCount is a struct that holds the name of a category and the number of APIs that have that category.",
        "types": [
          {
            "name": "CategoryCount",
            "fields": [
              {
                "name": "Name",
                "type": "string",
                "path": "CategoryCount.Name",
                "tag": "json:\"name\"",
                "json_name": "name"
              },
              {
                "name": "Count",
                "type": "int",
                "path": "CategoryCount.Count",
                "tag": "json:\"count\"",
                "json_name": "count"
              }
            ]
          }
        ]
      },
      {
        "doc": "JSONRawMessage implements Scanner and Valuer interface for gorm.",
        "types": [
          {
            "name": "JSONRawMessage",
            "type": "[]byte"
          }
        ]
      },
      {
        "doc": "RateLimitSmoothing holds the rate smoothing configuration.",
        "types": [
          {
            "name": "RateLimitSmoothing",
            "fields": [
              {
                "name": "Enabled",
                "type": "bool",
                "path": "RateLimitSmoothing.Enabled",
                "doc": "Enabled indicates if rate limit smoothing is active.",
                "tag": "json:\"enabled\" bson:\"enabled\"",
                "json_name": "enabled"
              },
              {
                "name": "Threshold",
                "type": "int64",
                "path": "RateLimitSmoothing.Threshold",
                "doc": "Threshold is the request rate above which smoothing is applied.",
                "tag": "json:\"threshold\" bson:\"threshold\"",
                "json_name": "threshold"
              },
              {
                "name": "Trigger",
                "type": "float64",
                "path": "RateLimitSmoothing.Trigger",
                "doc": "Trigger is the step factor determining when smoothing events trigger.",
                "tag": "json:\"trigger\" bson:\"trigger\"",
                "json_name": "trigger"
              },
              {
                "name": "Step",
                "type": "int64",
                "path": "RateLimitSmoothing.Step",
                "doc": "Step is the increment/decrement for adjusting the rate limit.",
                "tag": "json:\"step\" bson:\"step\"",
                "json_name": "step"
              },
              {
                "name": "Delay",
                "type": "int64",
                "path": "RateLimitSmoothing.Delay",
                "doc": "Delay is the minimum time between rate limit changes (in seconds).",
                "tag": "json:\"delay\" bson:\"delay\"",
                "json_name": "delay"
              }
            ]
          }
        ]
      }
    ]
  }
]
