openapi: 3.0.0
info:
  title: Tyk Dashboard API
  version: 5.5.0
  description: |-
    ## <a name="introduction"></a> Introduction

    The Tyk Dashboard API offers granular, programmatic access to a centralised database of resources that your Tyk nodes can pull from. This API has a dynamic user administrative structure which means the secret key that is used to communicate with your Tyk nodes can be kept secret and access to the wider management functions can be handled on a user-by-user and organisation-by-organisation basis.

    A common question around using a database-backed configuration is how to programatically add API definitions to your Tyk nodes, the Dashboard API allows much more fine-grained, secure and multi-user access to your Tyk cluster, and should be used to manage a database-backed Tyk node.

    The Tyk Dashboard API works seamlessly with the Tyk Dashboard (and the two come bundled together).

    ## <a name="security-hierarchy"></a> Security Hierarchy

    The Dashboard API provides a more structured security layer to managing Tyk nodes.

    ### Organisations, APIs and Users

    With the Dashboard API and a database-backed Tyk setup, (and to an extent with file-based API setups - if diligence is used in naming an creating definitions), the following security model is applied to the management of Upstream APIs:

    * **Organisations**: All APIs are *owned* by an organisation, this is designated by the `OrgID` parameter in the API Definition.
    * **Users**: All users created in the Dashboard belong to an organisation (unless an exception is made for super-administrative access).
    * **APIs**: All APIs belong to an Organisation and only Users that belong to that organisation can see the analytics for those APIs and manage their configurations.
    * **API Keys**: API Keys are designated by organisation, this means an API key that has full access rights will not be allowed to access the APIs of another organisation on the same system, but can have full access to all APIs within the organisation.
    * **Access Rights**: Access rights are stored with the key, this enables a key to give access to multiple APIs, this is defined by the session object in the core Tyk API.

    In order to use the Dashboard API, you'll need to get the `Tyk Dashboard API Access Credentials` secret from your user profile on the Dashboard UI.

    The secret you set should then be sent along as a header with each Dashboard API Request in order for it to be successful:

    ```
    authorization: <your-secret>
    ```
servers:
  - url: 'http://localhost:3000/'
  - url: 'https://localhost:3000/'
tags:
  - name: APIs
    description: API Definitions
  - name: OAS APIs
    description: OAS API Definitions
  - name: Keys
    description: API Key Management
  - name: Policies
    description: Policies
  - name: Analytics
    description: API Analytics
  - name: Additional Permissions
    description: Additional Permissions API
  - name: Single Sign On
    description: The Dashboard SSO API allows you to implement custom authentication schemes for the Dashboard and Portal. Our Tyk Identity Broker (TIB) internally also uses this API.
  - name: Basic Authentication
    description: API Key Management
  - name: Open Policy Agent
    description: Open Policy Agent API
  - name: Users
    description: User Management
  - name: Organisations
    description: Organisations Management
  - name: System
    description: System API
  - name: Assets
    description: Assets management
  - name: Data Graph APIs
    description: Data Graph Import APIs
paths:
  /api/portal/policies/:
    get:
      summary: Get List of Policies
      description: Get List of Policies
      operationId: getPolicies
      tags:
        - Policies
      responses:
        '200':
          description: List of all policies
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Policy"
    post:
      summary: Create Policy Definition
      description: Creating policy definitions is slightly different to the core API, API definitions are wrapped inside an api_definition field and event handlers, such as webhooks are not embedded in the main api_defintion object (though they can be), webhooks are instead appended as references into the hook_references field, the API will embed the correct webhook data into the event handler interface.
      operationId: postPolicies
      tags:
        - Policies
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Policy"
            example:
              name: new policy
              quota_max: 60
              quota_renewal_rate: 60
              allowance: 100
              rate: 100
              per: 5
              org_id: 53ac07777cbb8c2d53000002
      responses:
        '200':
          description: Policy created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiModifyKeySuccess'
              example:
                action: created
                status: ok
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiStatusMessage'
              example:
                message: Request malformed
                status: error
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiStatusMessage'
              example:
                message: Failed to create file!
                status: error
  /api/portal/policies/search:
    get:
      summary: Search List of Policies
      description: Search List of Policies
      operationId: searchPolicies
      tags:
        - Policies
      parameters:
        - name: q
          in: query
          description: Search query
          schema:
            type: string
      responses:
        '200':
          description: List of Policies (TODO)
  /api/portal/policies/{id}:
    get:
      summary: Get a single Policy by ID
      description: Get a Policy by ID
      operationId: getPolicy
      tags:
        - Policies
      parameters:
        - name: id
          in: path
          description: ID of Policy to get.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Get details of a single Policy
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Policy"
        '404':
          description: Policy not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiStatusMessage'
              example:
                message: Policy not found
                status: error
    put:
      summary: Update Policy Definition
      description: Update a Policy Definition
      operationId: putPolicies
      tags:
        - Policies
      parameters:
        - name: id
          in: path
          description: ID of Policy to update.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Policy"
            example:
              name: new policy
              quota_max: 60
              quota_renewal_rate: 60
              allowance: 100
              rate: 100
              per: 5
              org_id: 53ac07777cbb8c2d53000002
      responses:
        '200':
          description: Policy updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiModifyKeySuccess'
              example:
                action: updated
                status: ok
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiStatusMessage'
              example:
                message: PUT operation on different IDs
                status: error
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiStatusMessage'
              example:
                message: Failed to create file!
                status: error
    delete:
      summary: Delete a single Policy by ID
      description: Delete a Policy by ID
      operationId: deletePolicy
      tags:
        - Policies
      parameters:
        - name: id
          in: path
          description: ID of Policy to delete.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Delete policy by ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiModifyKeySuccess'
              example:
                action: deleted
                status: ok
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiStatusMessage'
              example:
                message: Delete failed
                status: error
  /api/apis:
    get:
      summary: Get List of APIs
      description: Get List of APIs
      operationId: getApis
      tags:
        - APIs
      parameters:
        - name: compressed
          in: query
          required: false
          deprecated: true
          schema:
            type: string
          allowEmptyValue: true
          description: Return smaller API list payload.
        - name: graph
          in: query
          required: false
          deprecated: true
          schema:
            type: string
          allowEmptyValue: true
          description: Transform the response payload for graphql.
        - name: api_type
          in: query
          required: false
          schema:
            type: string
          description: API Type, internal or external.
        - name: q
          in: query
          required: false
          schema:
            type: string
          description: Query string for search/filtering.
        - name: sort
          in: query
          description: Specifies the sort order of the returned results.
          required: false
          schema:
            type: string
            oneOf:
              - enum: ['name']
                description: 'Sort by name in ascending order'
              - enum: ['-name']
                description: 'Sort by name in descending order'
              - enum: ['updated_at']
                description: 'Sort by updated_at in ascending order'
              - enum: ['-updated_at']
                description: 'Sort by updated_at in descending order'
              - enum: ['created_at']
                description: 'Sort by created_at in ascending order'
              - enum: ['-created_at']
                description: 'Sort by created_at in descending order'
        - name: category
          in: query
          required: false
          schema:
            type: string
          description: Filter APIs by category (CSV).
        - name: auth_type
          in: query
          required: false
          schema:
            type: string
          description: Filter APIs by authentication type (CSV).
        - name: base_apis
          in: query
          required: false
          schema:
            type: string
          allowEmptyValue: true
          description: For versioned APIs, return only the base versions.
      responses:
        '200':
          description: List of API definitions
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/APIDefinition'
    post:
      summary: Create API Definition
      description: Create an API Definition in Tyk Classic API format.
        Note that the response includes the newly created Tyk Classic API Definition containing the unique identifier for the API (`api_id`). You can provide a value for the `api_id` in the request body, otherwise Tyk will automatically generate a value.
        The `id` field within the Tyk Classic API Definition is a proprietary field used by Tyk to identify the API within the database and cannot be chosen or modified by the user.
      operationId: postApis
      tags:
        - APIs
      parameters:
        - name: base_api_id
          in: query
          required: false
          schema:
            type: string
          description: The base API which the new version will be linked to.
        - name: base_api_version_name
          in: query
          required: false
          schema:
            type: string
          description: The version name of the base API while creating the first version. This doesn't have to be sent for the next versions but if it is set, it will override base API version name.
        - name: new_version_name
          in: query
          required: false
          schema:
            type: string
          description: The version name of the created version.
        - name: set_default
          in: query
          required: false
          schema:
            type: boolean
          description: If true, the new version is set as default version.
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/APIDefinition"
            example:
              api_definition:
                name: Test
                auth:
                  auth_header_name: authorization
                definition:
                  location: header
                  key: ''
                proxy:
                  target_url: http://httpbin.org/
                version_data:
                  use_extended_paths: true
                  not_versioned: true
                  versions:
                    Default:
                      expires: ''
                      name: Default
                      paths:
                        ignored: [ ]
                        white_list: [ ]
                        black_list: [ ]
                      extended_paths:
                        ignored:
                          - path: "/test-path/"
                            method_actions:
                              GET:
                                action: no_action
                                code: 200
                                data: ''
                                headers: { }
                          - path: "/test-path/reply"
                            method_actions:
                              GET:
                                action: reply
                                code: 200
                                data: '{"foo":"bar"}'
                                headers:
                                  x-test: test
                        white_list: [ ]
                        black_list: [ ]
                      use_extended_paths: true
                use_oauth2: false
                oauth_meta:
                  auth_login_redirect: ''
                  allowed_access_types: [ ]
                  allowed_authorize_types:
                    - token
                notifications:
                  shared_secret: ''
                  oauth_on_keychange_url: ''
                enable_ip_whitelisting: true
                allowed_ips:
                  - 127.0.0.1
                use_keyless: false
                enable_signature_checking: false
                use_basic_auth: false
                active: true
                enable_batch_request_support: true
              hook_references:
                - event_name: QuotaExceeded
                  hook:
                    api_model: { }
                    id: 54be6c0beba6db07a6000002
                    org_id: 54b53d3aeba6db5c35000002
                    name: Test Post
                    method: POST
                    target_path: http://httpbin.org/post
                    template_path: ''
                    header_map:
                      x-tyk-test: '123456'
                    event_timeout: 0
                  event_timeout: 60
      responses:
        '200':
          description: API created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/apiModifyKeySuccess"
              example:
                status: "ok"
                action: "created"
                key: "{...API JSON definition...}"
        '400':
          description: Malformed data
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/apiStatusMessage"
              example:
                status: "error"
                message: "Malformed API data"
  /api/apis/search:
    get:
      summary: Search List of APIs
      description: Search List of APIs
      operationId: searchApis
      tags:
        - APIs
      parameters:
        - name: q
          in: query
          description: Search query
          schema:
            type: string
      responses:
        '200':
          description: List of API definitions
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/APIDefinition'
  /api/apis/{id}:
    get:
      summary: Get a single API by ID
      description: Get an API by ID
      operationId: getApi
      tags:
        - APIs
      parameters:
        - name: id
          in: path
          description: ID of API to get. Can either be internal or public API id.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: API definition
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APIDefinition"
          headers:
            x-tyk-base-api-id:
              schema:
                type: string
              description: ID of the base API if the requested API is a version.
    put:
      summary: Update API Definition
      description: Update an API Definition. api_id can be updated for On-Premise installations, but it cannot be updated when the Dashboard resides in Tyk Cloud. Updates to api_id in Tyk Cloud will be ignored.
      operationId: putApi
      tags:
        - APIs
      parameters:
        - name: id
          in: path
          description: ID of API to update. Can either be internal or public API id.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/APIDefinition"
            example:
              api_definition:
                id: 54c24242eba6db1c9a000002
                api_id: bc2f8cfb7ab241504d9f3574fe407499
                name: Test
                auth:
                  auth_header_name: authorization
                definition:
                  location: header
                  key: ''
                proxy:
                  target_url: http://httpbin.org/
                version_data:
                  use_extended_paths: true
                  not_versioned: true
                  versions:
                    Default:
                      expires: ''
                      name: Default
                      paths:
                        ignored: [ ]
                        white_list: [ ]
                        black_list: [ ]
                      extended_paths:
                        ignored:
                          - path: "/test-path/"
                            method_actions:
                              GET:
                                action: no_action
                                code: 200
                                data: ''
                                headers: { }
                          - path: "/test-path/reply"
                            method_actions:
                              GET:
                                action: reply
                                code: 200
                                data: '{"foo":"bar"}'
                                headers:
                                  x-test: test
                        white_list: [ ]
                        black_list: [ ]
                      use_extended_paths: true
                use_oauth2: false
                oauth_meta:
                  auth_login_redirect: ''
                  allowed_access_types: [ ]
                  allowed_authorize_types:
                    - token
                notifications:
                  shared_secret: ''
                  oauth_on_keychange_url: ''
                enable_ip_whitelisting: true
                allowed_ips:
                  - 127.0.0.1
                use_keyless: false
                enable_signature_checking: false
                use_basic_auth: false
                active: true
                enable_batch_request_support: true
              hook_references:
                - event_name: QuotaExceeded
                  hook:
                    api_model: { }
                    id: 54be6c0beba6db07a6000002
                    org_id: 54b53d3aeba6db5c35000002
                    name: Test Post
                    method: POST
                    target_path: http://httpbin.org/post
                    template_path: ''
                    header_map:
                      x-tyk-test: '123456'
                    event_timeout: 0
                  event_timeout: 60
      responses:
        '200':
          description: API updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/apiModifyKeySuccess"
              example:
                status: "ok"
                action: "updated"
                key: "{...API JSON definition...}"
        '400':
          description: Malformed data
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/apiStatusMessage"
              example:
                status: "error"
                message: "Malformed API data"
    delete:
      summary: Delete a single API by ID
      description: Delete an API by ID
      operationId: deleteApi
      tags:
        - APIs
      parameters:
        - name: id
          in: path
          description: ID of API to get. Can either be internal or public API id.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: API deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiStatusMessage'
              example:
                message: API deleted
                status: ok
        '400':
          description: No API ID specified
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiStatusMessage'
              example:
                message: API ID not specified
                status: error
  /api/apis/oas:
    post:
      description: |-
        Create an API Definition in Tyk OAS API format.
        Note that the response includes the newly created Tyk OAS API Definition containing the unique identifier for the API (`id`). You can provide a value for `id` in the request body, otherwise Tyk will automatically generate a value.
      tags:
        - OAS APIs
      parameters:
        - name: base_api_id
          in: query
          required: false
          schema:
            type: string
          description: The base API which the new version will be linked to.
        - name: base_api_version_name
          in: query
          required: false
          schema:
            type: string
          description: The version name of the base API while creating the first version. This doesn't have to be sent for the next versions but if it is set, it will override base API version name.
        - name: new_version_name
          in: query
          required: false
          schema:
            type: string
          description: The version name of the created version.
        - name: set_default
          in: query
          required: false
          schema:
            type: boolean
          description: If true, the new version is set as default version.
        - name: templateID
          in: query
          required: false
          schema:
            type: string
          description: The asset ID of template to apply while creating the OAS API.
      operationId: createApiOAS
      requestBody:
        content:
          application/json:
            schema:
              $ref: "https://raw.githubusercontent.com/OAI/OpenAPI-Specification/main/schemas/v3.0/schema.json"
      responses:
        '200':
          description: API created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/apiModifyKeySuccess"
              example:
                status: "ok"
                action: "created"
                key: "{...API JSON definition...}"
        '400':
          description: Malformed data
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/apiStatusMessage"
              example:
                status: "error"
                message: "Malformed API data"
  /api/apis/oas/dry-run:
    post:
      description: |-
        Generate a Tyk OAS API definition without saving it to the Dashboard database.
        This endpoint is used to produce a Tyk OAS API definition without creating the API proxy itself. This provides a dry run functionality for Tyk OAS API creation, showing what would be created in the Dashboard given the set of inputs provided.
      tags:
        - OAS APIs
      operationId: dryRunApiOAS
      parameters:
        - $ref: '#/components/parameters/UpstreamURL'
        - $ref: '#/components/parameters/ListenPath'
        - $ref: '#/components/parameters/CustomDomain'
        - $ref: '#/components/parameters/AllowList'
        - $ref: '#/components/parameters/ValidateRequest'
        - $ref: '#/components/parameters/MockResponse'
        - $ref: '#/components/parameters/Authentication'
        - name: templateID
          in: query
          required: false
          schema:
            type: string
          description: The asset ID of template to apply while importing an OAS API.
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DryRunRequest"
      responses:
        '200':
          description:  Successfully generated a Tyk OAS API definition from the provided input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TykOasApiDefinition"
              examples:
                example1:
                  summary: Example of dry run providing only an OpenAPI document
                  value:
                    components:
                      securitySchemes:
                        apiKey:
                          scheme: basic
                          type: http
                    info:
                      description: This is a slimmed down single path version of the Petstore definition.
                      title: Single Path
                      version: '1.0.0'
                    openapi: '3.0.0'
                    paths:
                      /pet/{id}:
                        get:
                          description: This operation will find a pet in the database.
                          operationId: pet/{id}GET
                          responses:
                            '400':
                              description: Invalid ID provided
                            '404':
                              description: Pet not found
                          security: [ ]
                          summary: Find a pet
                          tags:
                            - pet
                        parameters:
                          - in: path
                            name: id
                            required: true
                            schema:
                              type: integer
                        put:
                          description: This operation will update a pet in the database.
                          operationId: pet/{id}PUT
                          responses:
                            '400':
                              description: Invalid ID provided
                            '404':
                              description: Pet not found
                            '409':
                              description: Conflict, another pet with the same ID exists
                          security:
                            - apiKey: [ ]
                          summary: Update a pet
                          tags:
                            - pet
                    servers:
                      - url: https://httpbin.org
                    x-tyk-api-gateway:
                      info:
                        name: Single Path
                        state:
                          active: true
                      upstream:
                        url: https://httpbin.org
                      server:
                        listenPath:
                          value: /
                          strip: true
                example2:
                  summary: Example of dry run updating an existing Tyk OAS API Definition with the provided OpenAPI document
                  value:
                    components:
                      securitySchemes:
                        apiKey:
                          scheme: basic
                          type: http
                    info:
                      description: This is a slimmed down single path version of the Petstore definition.
                      title: Single Path
                      version: '1.0.0'
                    openapi: '3.0.0'
                    paths:
                      /pet/{id}:
                        get:
                          description: This operation will find a pet in the database.
                          operationId: pet/{id}GET
                          responses:
                            '400':
                              description: Invalid ID provided
                            '404':
                              description: Pet not found
                          security: [ ]
                          summary: Find a pet
                          tags:
                            - pet
                        parameters:
                          - in: path
                            name: id
                            required: true
                            schema:
                              type: integer
                        put:
                          description: This operation will update a pet in the database.
                          operationId: pet/{id}PUT
                          responses:
                            '400':
                              description: Invalid id value
                          security:
                            - apiKey: [ ]
                          summary: Update a pet
                          tags:
                            - pet
                    servers:
                      - url: https://httpbin.org
                    x-tyk-api-gateway:
                      info:
                        id: 5616cd9b49bc465c6c7d27dd9195b20b
                        dbId: 6646094a5f4a55451a9fa1ba
                        orgId: 6645e9915f4a557b29654b9a
                        name: Single Path
                        state:
                          active: true
                      upstream:
                        url: https://httpbin.org
                      server:
                        listenPath:
                          value: /
                          strip: true
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/apiStatusMessage"
              example:
                status: "error"
                message: "Bad request"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/apiStatusMessage"
              example:
                status: "error"
                message: "Internal server error"
  /api/apis/oas/{apiID}:
    parameters:
      - description: The API ID
        name: apiID
        in: path
        required: true
        schema:
          type: string
    get:
      description: |-
        Get API definition in OAS format
      tags:
        - OAS APIs
      parameters:
        - description: |-
            The mode of OAS export. By default the mode is not set which means the OAS spec is exported including the OAS Tyk extension.  
            If the mode is set to public, the OAS spec excluding the Tyk extension is exported.
          name: mode
          in: query
          schema:
            type: string
          example: public
      operationId: listApiOAS
      responses:
        '200':
          description: API definition
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OASSchemaResponse"
          headers:
            x-tyk-base-api-id:
              schema:
                type: string
              description: ID of the base API if the requested API is a version.
    put:
      description: |
        Updating an API definition uses the same signature object as a `POST`. It will first ensure that the API ID being updated is the same as in the `PUT` object.
        Updating will completely replace the file descriptor and will not change an API Definition that has already been loaded. The hot-reload endpoint will need to be called to push the new definition to live.
      tags:
        - OAS APIs
      operationId: updateApiOAS
      requestBody:
        content:
          application/json:
            schema:
              $ref: "https://raw.githubusercontent.com/OAI/OpenAPI-Specification/main/schemas/v3.0/schema.json"
      responses:
        '200':
          description: API updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/apiModifyKeySuccess"
              example:
                status: "ok"
                action: "updated"
                key: "{...API JSON definition...}"
        '400':
          description: Malformed data
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/apiStatusMessage"
              example:
                status: "error"
                message: "Malformed API data"
    patch:
      summary: Patch a single OAS API by ID
      description: |-
        Update an OAS format API. You can use this endpoint to update the OAS part of your Tyk API definition.
        This endpoint allows you to configure the Tyk OAS extension based on the query parameters provided (similar to import)
      tags:
        - OAS APIs
      operationId: patchApiOAS
      parameters:
        - $ref: '#/components/parameters/UpstreamURL'
        - $ref: '#/components/parameters/ListenPath'
        - $ref: '#/components/parameters/CustomDomain'
        - $ref: '#/components/parameters/ValidateRequest'
        - $ref: '#/components/parameters/AllowList'
        - $ref: '#/components/parameters/MockResponse'
        - $ref: '#/components/parameters/Authentication'
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - $ref: "#/components/schemas/ImportOrPatchFromURL"
                - $ref: "https://raw.githubusercontent.com/OAI/OpenAPI-Specification/main/schemas/v3.0/schema.json"
          multipart/form-data:
            schema:
              description: |-
                The content of the file should be the OpenAPI document in JSON format (without x-tyk-api-gateway extension).
              type: object
              properties:
                file:
                  type: string
                  format: binary
      responses:
        '200':
          description: API patched
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/apiModifyKeySuccess"
              example:
                status: "ok"
                action: "modified"
                key: "{updated APIID}"
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/apiStatusMessage"
              examples:
                malformedBody:
                  summary: When the request body is malformed
                  value:
                    message: "Request malformed"
                    status: "error"
                missingAPIID:
                  summary: When the request is missing the APIID in the query parameter
                  value:
                    message: "Must specify an apiID to patch"
                    status: "error"
                nonExistingAPIID:
                  summary: When the client sends an APIID which doesn't exist in your Tyk Gateway
                  value:
                    message: "No API found for APIID {APIID}"
                    status: "error"
                invalidUpstreamURL:
                  summary: When the client sends a query param upstreamURL which isn't valid
                  value:
                    message: "invalid upstream URL"
                    status: "error"
    delete:
      description: |-
        Deleting an API definition will remove the file from the file store. The API definition will NOT be unloaded and a separate reload request will need to be made to disable the API endpoint.
      tags:
        - OAS APIs
      operationId: deleteOASApi
      responses:
        '200':
          description: API deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiStatusMessage'
              example:
                message: API deleted
                status: ok
        '400':
          description: No API ID specified
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiStatusMessage'
              example:
                message: API ID not specified
                status: error
  /api/apis/oas/{apiID}/categories:
    parameters:
      - description: The categories serve as identifiers for the API definitions, subsequently enabling the filtering of API listings based on these categories on the API list page.
        name: apiID
        in: path
        required: true
        schema:
          type: string
    get:
      description: |-
        Get a list of the API categories associated with the specified API
      tags:
        - OAS APIs
      operationId: getApiCategories
      responses:
        '200':
          description: API categories
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CategoriesPayload"
              example:
                categories:
                  - tag1
                  - tag2
        '404':
          description: This error code is returned when the API with the requested ID is not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiStatusMessage'
              example:
                message: API not found
                status: error
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiStatusMessage'
              example:
                message: Failed to get API categories
                status: error
    put:
      description: |-
        Update the list of API categories associated with the specified API
      tags:
        - OAS APIs
      operationId: updateApiCategories
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CategoriesPayload"
            example:
              categories:
                - tag1
                - tag2
      responses:
        '200':
          description: API categories succesfuly updated response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/apiStatusMessage"
              example:
                message: API categories updated
                status: OK
        '404':
          description: API not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiStatusMessage'
              example:
                message: API not found
                status: error
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiStatusMessage'
              example:
                message: Failed to extract categories payload
                status: error
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiStatusMessage'
              example:
                message: Failed to update API categories
                status: error
  /api/apis/categories:
    get:
      description: |-
        Get a list of all the defined API categories
      tags:
        - APIs
      operationId: getAllApiCategories
      responses:
        '200':
          description: API categories
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AllCategoriesResponse"
              example:
                categories:
                  - name: tag1
                    count: 2
                  - name: tag2
                    count: 3
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiStatusMessage'
              example:
                message: Failed to get API categories
                status: error
  /api/apis/oas/{apiID}/versions:
    parameters:
      - description: The API ID
        name: apiID
        in: path
        required: true
        schema:
          type: string
    get:
      description: |-
        Listing versions of an OAS API
      tags:
        - OAS APIs
      operationId: listOASApiVersions
      parameters:
        - $ref: '#/components/parameters/SearchText'
        - $ref: '#/components/parameters/AccessType'
      responses:
        '200':
          description: API version metas
          content:
            application/json:
              schema:
                properties:
                  apis:
                    type: array
                    items:
                      $ref: '#/components/schemas/APIVersionMeta'
                  pages:
                    type: integer
  /api/apis/{apiID}/access:
    parameters:
      - description: The API ID
        name: apiID
        in: path
        required: true
        schema:
          type: string
    get:
      description: |-
        Get API access rights (users and userGroups)
      tags:
        - APIs
      operationId: getApiAccessRights
      responses:
        '200':
          description: API access rights
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APIAccessManagementPayload"
              example:
                userIds:
                  - id: 65a6ebcab1f93b1e6b4a39eb
                userGroupIds:
                  - id: 65a6ebcab1f93b1e6b4a39ec
        '404':
          description: API not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiStatusMessage'
              example:
                Message: "API not found"
                Status: "error"
                Meta: null
    put:
        description: |-
          Update API access rights (users and userGroups)
        tags:
          - APIs
        operationId: updateApiAccessRights
        requestBody:
          content:
            application/json:
                schema:
                  $ref: "#/components/schemas/APIAccessManagementPayload"
                example:
                  userIds:
                    - id: 65a6ebcab1f93b1e6b4a39eb
                  userGroupIds:
                    - id: 65a6ebcab1f93b1e6b4a39ec
        responses:
            '200':
              description: API access updated
              content:
                  application/json:
                    example:
                        Status: "OK"
                        Message: "Api access updated"
                        Meta: null
            '404':
              description: API not found
              content:
                application/json:
                  schema:
                    $ref: '#/components/schemas/apiStatusMessage'
                  example:
                    Message: "API not found"
                    Status: "error"
                    Meta: null
  /api/apis/oas/import:
    post:
      description: |-
        For use with an existing OpenAPI document that you want to expose via your Tyk Gateway.
        Create a new Tyk OAS API from an OpenAPI document in JSON format (without x-tyk-api-gateway extension).
        The payload can contain either a fully fledged OpenAPI document or a URL pointing to an OpenAPI document.
      tags:
        - OAS APIs
      operationId: importOAS
      parameters:
        - $ref: '#/components/parameters/UpstreamURL'
        - $ref: '#/components/parameters/ListenPath'
        - $ref: '#/components/parameters/CustomDomain'
        - $ref: '#/components/parameters/AllowList'
        - $ref: '#/components/parameters/ValidateRequest'
        - $ref: '#/components/parameters/MockResponse'
        - $ref: '#/components/parameters/Authentication'
        - name: templateID
          in: query
          required: false
          schema:
            type: string
          description: The asset ID of template to apply while importing an OAS API.
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - $ref: "#/components/schemas/ImportOrPatchFromURL"
                - $ref: "https://raw.githubusercontent.com/OAI/OpenAPI-Specification/main/schemas/v3.0/schema.json"
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
      responses:
        '200':
          description: API definition
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/apiModifyKeySuccess"
              example:
                status: "ok"
                action: "added"
                key: "{created APIID}"
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/apiStatusMessage"
              examples:
                malformedBody:
                  summary: When the request body is malformed
                  value:
                    message: "Request malformed"
                    status: "error"
                invalidUpstreamURL:
                  summary: When the client sends a query param upstreamURL which isn't valid
                  value:
                    message: "invalid upstream URL"
                    status: "error"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/apiStatusMessage"
              examples:
                failedToImportOAS:
                  summary: When the OAS cannot be imported
                  value:
                    message: "failed to import OAS"
                    status: "error"
  /api/apis/oas/{apiID}/export:
    parameters:
      - description: The API ID
        name: apiID
        in: path
        required: true
        schema:
          type: string
    get:
      description: |-
        download API definition in OAS format(only APIs saved in OAS format),
      tags:
        - OAS APIs
      operationId: downloadApiOASPublic
      parameters:
        - description: |-
            Mode of OAS export, by default mode could be empty which means to export OAS spec including OAS Tyk extension.
            When mode=public, OAS spec excluding Tyk extension is exported
          name: mode
          in: query
          schema:
            type: string
          example: public
      responses:
        '200':
          description: API definition
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OASSchemaResponse"
  /api/apis/oas/export:
    get:
      description: |-
        List all OAS format APIs
      tags:
        - OAS APIs
      operationId: downloadApisOASPublic
      parameters:
        - description: |-
            The mode of OAS export. By default the mode is not set which means the OAS spec is exported including the OAS Tyk extension.  
            If the mode is set to public, the OAS spec excluding the Tyk extension is exported.
          name: mode
          in: query
          schema:
            type: string
          example: public
      responses:
        '200':
          description: API definition
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OASSchemaResponse'

  /api/activity/keys/{keyHash}/{startDay}/{startMonth}/{startYear}/{EndDay}/{EndMonth}/{EndYear}:
    get:
      summary: Analytics of API Key
      description: It returns analytics of the endpoints of all APIs called using KEY between start and end date.
      operationId: getAnalyticsOfApiKey
      tags:
        - Analytics
      parameters:
        - name: keyHash
          in: path
          description: Hash of your API key.
          required: true
          schema:
            type: string
        - name: startDay
          in: path
          description: Day of analytics to query.
          required: true
          schema:
            type: string
        - name: startMonth
          in: path
          description: Month of analytics to query.
          required: true
          schema:
            type: string
        - name: startYear
          in: path
          description: Start year of analytics to query.
          required: true
          schema:
            type: string
        - name: EndDay
          in: path
          description: End date of analytics to query.
          required: true
          schema:
            type: string
        - name: EndMonth
          in: path
          description: End month of analytics to query.
          required: true
          schema:
            type: string
        - name: EndYear
          in: path
          description: End year of analytics to query.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Returns analytics of all endpoints called using the key `7f3c3ca87376cabe` between October 13th 2020 and October 14th 2020.
          content:
            application/json:
              example:
                data:
                  - id:
                      day: 0
                      month: 0
                      year: 0
                      hour: 0
                      code: 0
                      path: "/anything"
                      key: ''
                      alias: ''
                      url: ''
                      iso_country: ''
                      api_id: 41351a6a94094da05f75146a695a16f6
                      api_name: ''
                    hits: 1
                    success: 1
                    error: 0
                    last_hit: '2020-10-13T13:22:49.667+05:30'
                    request_time: 0
                    latency: 217
                    upstream_latency: 217
                    max_upstream_latency: 217
                    min_upstream_latency: 217
                    max_latency: 217
                    min_latency: 217
                  - id:
                      day: 0
                      month: 0
                      year: 0
                      hour: 0
                      code: 0
                      path: "/anything"
                      key: ''
                      alias: ''
                      url: ''
                      iso_country: ''
                      api_id: 1793db2cbb724ad54da582ce3191d383
                      api_name: ''
                    hits: 1
                    success: 1
                    error: 0
                    last_hit: '2020-10-13T13:22:20.534+05:30'
                    request_time: 568
                    latency: 568
                    upstream_latency: 568
                    max_upstream_latency: 568
                    min_upstream_latency: 568
                    max_latency: 568
                    min_latency: 568
                pages: 1
  /api/activity/oauthid/{OAuthClientID}/{startDay}/{startMonth}/{startYear}/{EndDay}/{EndMonth}/{EndYear}:
    get:
      summary: Analytics of Oauth Client ID
      description: Returns activity of all endpoints which used OAuth client `27b35a9ed46e429eb2361e440cc4005c` between October 13th 2020 and October 14th 2020.
      operationId: getAnalyticsOfOauthClientId
      tags:
        - Analytics
      parameters:
        - name: OAuthClientID
          in: path
          description: OAuthClientID
          required: true
          schema:
            type: string
        - name: startDay
          in: path
          description: Day of analytics to query.
          required: true
          schema:
            type: string
        - name: startMonth
          in: path
          description: Month of analytics to query.
          required: true
          schema:
            type: string
        - name: startYear
          in: path
          description: Start year of analytics to query.
          required: true
          schema:
            type: string
        - name: EndDay
          in: path
          description: End date of analytics to query.
          required: true
          schema:
            type: string
        - name: EndMonth
          in: path
          description: End month of analytics to query.
          required: true
          schema:
            type: string
        - name: EndYear
          in: path
          description: End year of analytics to query.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Returns analytics of all endpoints called using the key `7f3c3ca87376cabe` between October 13th 2020 and October 14th 2020.
          content:
            application/json:
              example:
                data:
                  - id:
                      day: 0
                      month: 0
                      year: 0
                      hour: 0
                      code: 0
                      path: "/get"
                      key: ''
                      alias: ''
                      url: ''
                      iso_country: ''
                      api_id: 79fc7cb80df940cc5089772200bd4926
                      api_name: ''
                    hits: 2
                    success: 1
                    error: 1
                    last_hit: '2020-10-13T14:48:51.582+05:30'
                    request_time: 498
                    latency: 498
                    upstream_latency: 497.5
                    max_upstream_latency: 747
                    min_upstream_latency: 248
                    max_latency: 748
                    min_latency: 248
                  - id:
                      day: 0
                      month: 0
                      year: 0
                      hour: 0
                      code: 0
                      path: "/post"
                      key: ''
                      alias: ''
                      url: ''
                      iso_country: ''
                      api_id: 79fc7cb80df940cc5089772200bd4926
                      api_name: ''
                    hits: 1
                    success: 1
                    error: 0
                    last_hit: '2020-10-13T14:49:31.541+05:30'
                    request_time: 0
                    latency: 241
                    upstream_latency: 239
                    max_upstream_latency: 239
                    min_upstream_latency: 239
                    max_latency: 241
                    min_latency: 241
                pages: 1
  /api/apis/{apiID}/keys:
    get:
      summary: List keys
      description: Lists keys that grant access to the API with the ID {apiID}.
      operationId: listKeys
      tags:
        - Keys
      parameters:
        - name: apiID
          in: path
          description: ID of API the keys grant access to. Can either be the internal or external API ID.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Keys retrieved successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/apiAllKeys"
              example:
                data:
                  keys:
                    - 54b53d3aeba6db5c3500000289a8fbc2bbba4ebc4934bb113588c792
                    - 54b53d3aeba6db5c3500000230459d8568ec4bbf675bda2ff05e9293
                    - 54b53d3aeba6db5c35000002ec9a2b1aca7b495771273a0895cb3627
                    - 54b53d3aeba6db5c3500000272d97a10538248e9523ca09e425090b8
                    - 54b53d3aeba6db5c3500000252b5c56c61ad42fe765101f6d70cf9c6
                pages: 1

  /api/apis/{apiID}/keys/{keyID}:
    parameters:
      - name: apiID
        in: path
        description: ID of API the keys grant access to. Can either be the internal or external API ID.
        required: true
        schema:
          type: string
      - name: keyID
        in: path
        description: The Key ID.
        required: true
        schema:
          type: string
    get:
      summary: Get key
      description: Fetches the key that grant access to the API with the ID {apiID} and key ID {keyID}.
      operationId: getKey
      tags:
        - Keys
      responses:
        '200':
          description: Key retrieved successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SessionState'
              example:
                api_model: { }
                key_id: eyJvcmciOiI1ZTlkOTU0NGExZGNkNjAwMDFkMGVkMjAiLCJpZCI6ImhlbGxvLXdvcmxkIiwiaCI6Im11cm11cjY0In0
                data:
                  last_check: 1421674410
                  allowance: 1000
                  rate: 1000
                  per: 60
                  expires: 1423684135
                  quota_max: -1
                  quota_renews: 1421164189
                  quota_remaining: -1
                  quota_renewal_rate: 60
                  access_rights:
                    39d2c98be05c424371c600bd8b3e2242:
                      api_name: Nitrous Test
                      api_id: 39d2c98be05c424371c600bd8b3e2242
                      versions:
                        - Default
                org_id: 54b53d3aeba6db5c35000002
                oauth_client_id: ""
                basic_auth_data:
                  password: ""
                hmac_enabled: true
                hmac_string: ""

    put:
      summary: Update key
      description: |-
        You can also manually add keys to Tyk using your own key-generation algorithm. It is recommended if using this approach to ensure that the OrgID being used in the API Definition and the key data is blank so that Tyk does not try to prepend or manage the key in any way.
      tags:
        - Keys
      operationId: updateKey
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SessionState"
            example:
              last_check: 1421674410
              allowance: 1000
              rate: 1000
              per: 60
              expires: 1423684135
              quota_max: -1
              quota_renews: 1421164189
              quota_remaining: -1
              quota_renewal_rate: 60
              access_rights:
                39d2c98be05c424371c600bd8b3e2242:
                  api_name: Nitrous Test
                  api_id: 39d2c98be05c424371c600bd8b3e2242
                  versions:
                    - Default
              org_id: 54b53d3aeba6db5c35000002
              oauth_client_id: ""
              basic_auth_data:
                password: ""
              hmac_enabled: true
              hmac_string: ""
      responses:
        '200':
          description: Key updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SessionState'
              example:
                api_model: { }
                key_id: eyJvcmciOiI1ZTlkOTU0NGExZGNkNjAwMDFkMGVkMjAiLCJpZCI6ImhlbGxvLXdvcmxkIiwiaCI6Im11cm11cjY0In0
                data:
                  last_check: 1421674410
                  allowance: 1000
                  rate: 1000
                  per: 60
                  expires: 1423684135
                  quota_max: -1
                  quota_renews: 1421164189
                  quota_remaining: -1
                  quota_renewal_rate: 60
                  access_rights:
                    39d2c98be05c424371c600bd8b3e2242:
                      api_name: Nitrous Test
                      api_id: 39d2c98be05c424371c600bd8b3e2242
                      versions:
                        - Default
                org_id: 54b53d3aeba6db5c35000002
                oauth_client_id: ""
                basic_auth_data:
                  password: ""
                hmac_enabled: true
                hmac_string: ""
        '401':
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiStatusMessage'
              example:
                Status: Error
                Message: User does not have permission to add API to key Access Rights!
    delete:
      summary: Delete key
      description: Deleting a key will remove it permanently from the system, however analytics relating to that key will still be available.
      tags:
        - Keys
      operationId: deleteKey
      responses:
        '200':
          description: Key deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiStatusMessage'
              example:
                Status: OK
                Message: Key deleted successfully
        '401':
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiStatusMessage'
              example:
                Status: Error
                Message: Attempted access to non-owned key

  /api/keys:
    post:
      summary: Create a key
      description: |-
        Tyk will generate the access token based on the OrgID specified in the API Definition and a random UUID. This ensures that keys can be "owned" by different API Owners should segmentation be needed at an organisational level.
        <br/><br/>
        API keys without access_rights data will be written to all APIs on the system (this also means that they will be created across all SessionHandlers and StorageHandlers, it is recommended to always embed access_rights data in a key to ensure that only targeted APIs and their back-ends are written to.
      tags:
        - Keys
      operationId: addKey
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SessionState"
            example:
              last_check: 1421674410
              allowance: 1000
              rate: 1000
              per: 60
              expires: 1423684135
              quota_max: -1
              quota_renews: 1421164189
              quota_remaining: -1
              quota_renewal_rate: 60
              access_rights:
                39d2c98be05c424371c600bd8b3e2242:
                  api_id: 39d2c98be05c424371c600bd8b3e2242
                  api_name: Nitrous Test
                  versions:
                    - Default
      responses:
        '200':
          description: New Key added
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SessionState'
              example:
                api_model: { }
                key_id: eyJvcmciOiI1ZTlkOTU0NGExZGNkNjAwMDFkMGVkMjAiLCJpZCI6ImhlbGxvLXdvcmxkIiwiaCI6Im11cm11cjY0In0
                data:
                  last_check: 1421674410
                  allowance: 1000
                  rate: 1000
                  per: 60
                  expires: 1423684135
                  quota_max: -1
                  quota_renews: 1421164189
                  quota_remaining: -1
                  quota_renewal_rate: 60
                  access_rights:
                    39d2c98be05c424371c600bd8b3e2242:
                      api_name: Nitrous Test
                      api_id: 39d2c98be05c424371c600bd8b3e2242
                      versions:
                        - Default
                org_id: 54b53d3aeba6db5c35000002
                oauth_client_id: ""
                basic_auth_data:
                  password: ""
                hmac_enabled: true
                hmac_string: ""
        '401':
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiStatusMessage'
              example:
                Status: Error
                Message: User does not have permission to add API to key Access Rights!

  /api/keys/{keyID}:
    parameters:
      - name: keyID
        in: path
        description: The Key ID.
        required: true
        schema:
          type: string
    post:
      summary: Create custom key
      description: Creates a key with a custom key ID.
      operationId: createCustomKey
      tags:
        - Keys
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SessionState"
            example:
              last_check: 1421674410
              allowance: 1000
              rate: 1000
              per: 60
              expires: 1423684135
              quota_max: -1
              quota_renews: 1421164189
              quota_remaining: -1
              quota_renewal_rate: 60
              access_rights:
                39d2c98be05c424371c600bd8b3e2242:
                  api_id: 39d2c98be05c424371c600bd8b3e2242
                  api_name: Nitrous Test
                  versions:
                    - Default
      responses:
        '200':
          description: Custom key created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SessionState'
              example:
                api_model: { }
                key_id: eyJvcmciOiI1ZTlkOTU0NGExZGNkNjAwMDFkMGVkMjAiLCJpZCI6ImhlbGxvLXdvcmxkIiwiaCI6Im11cm11cjY0In0
                data:
                  last_check: 1421674410
                  allowance: 1000
                  rate: 1000
                  per: 60
                  expires: 1423684135
                  quota_max: -1
                  quota_renews: 1421164189
                  quota_remaining: -1
                  quota_renewal_rate: 60
                  access_rights:
                    39d2c98be05c424371c600bd8b3e2242:
                      api_name: Nitrous Test
                      api_id: 39d2c98be05c424371c600bd8b3e2242
                      versions:
                        - Default
                key_hash: 567b9a5419c3a9ef
        '401':
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiStatusMessage'
              example:
                Status: Error
                Message: User does not have permission to add API to key Access Rights!

  /api/org/permissions:
    get:
      summary: List additional permissions
      description: This API helps you to add and delete (CRUD) a list of additional (custom) permissions for your Dashboard users. Once created, a custom permission will be added to standard list of user permissions. Only Admin Dashboard users will be authorised to use this API.
      operationId: listAdditionalPermissions
      tags:
        - Additional Permissions
      responses:
        '200':
          description: Additional Permissions retrieved successfully.
          content:
            application/json:
              schema:
                properties:
                  additional_permissions:
                    type: object
              example:
                additional_permissions:
                  api_developer: API Developer
                  api_manager: API Manager
        '401':
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiStatusMessage'
              example:
                Status: Error
                Message: Not authorised
    put:
      summary: Modify additional permissions
      description: Whenever you want to add/update/delete an additional permission, just send back the updated list of permissions, through a PUT request to the API.
      operationId: updateAdditionalPermissions
      tags:
        - Additional Permissions
      requestBody:
        content:
          application/json:
            schema:
              properties:
                additional_permissions:
                  type: object
            example:
              additional_permissions:
                api_developer: API Developer
                api_manager: API Manager
                custom_permission: Custom Permission
      responses:
        '200':
          description: Additional Permissions updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiStatusMessage'
              example:
                Status: OK
                Message: Additional Permissions updated in org level
        '401':
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiStatusMessage'
              example:
                Status: Error
                Message: Not authorised
  /api/sso/:
    post:
      summary: Generate authentication token
      description: The Dashboard exposes the /api/sso Dashboard API which allows you to generate a temporary authentication token, valid for 60 seconds.
      operationId: generateAuthToken
      tags:
        - Single Sign On
      requestBody:
        content:
          application/json:
            schema:
              properties:
                ForSection:
                  type: string
                  enum:
                    - dashboard
                    - portal
                OrgID:
                  type: string
                EmailAddress:
                  type: string
                GroupID:
                  type: string
            example:
              ForSection: dashboard
              OrgID: 588b4f0bb275ff0001cc7471
              EmailAddress: name@somewhere.com
              GroupID: ""
      responses:
        '200':
          description: Auth Token generated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiStatusMessage'
              example:
                Status: OK
                Message: SSO Nonce created
                Meta: YTNiOGUzZjctYWZkYi00OTNhLTYwODItZTAzMDI3MjM0OTEw
        '400':
          description: Back Request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiStatusMessage'
              example:
                Status: Error
                Message: "Cannot create an SSO session for an invalid payload: [Error: Org id not found ('588b4f0bb275ff0001cc7471').]"
        '401':
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiStatusMessage'
              example:
                Status: Error
                Message: Not authorised
  /api/apis/keys/basic/{username}:
    parameters:
      - name: username
        in: path
        description: Username of Basic Auth user to create, get, update, or delete.
        required: true
        schema:
          type: string
    post:
      summary: Create a Basic Auth User
      description: Create a Basic Auth user with the username specified in the path {username}.
      operationId: createBasicAuthUser
      tags:
        - Basic Authentication
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SessionState"
            example:
              last_check: 0
              allowance: 1000
              rate: 1000
              per: 60
              expires: 0
              quota_max: 10000
              quota_renews: 1424543479
              quota_remaining: 10000
              quota_renewal_rate: 2520000
              access_rights:
                bc2f8cfb7ab241504d9f3574fe407499:
                  api_id: bc2f8cfb7ab241504d9f3574fe407499
                  api_name: Test
                  versions:
                    - Default
              basic_auth_data:
                password: test123
      responses:
        '200':
          description: User created successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SessionState"
              example:
                api_model: { }
                key_id: 54b53d3aeba6db5c3500000test-user
                data:
                  last_check: 0
                  allowance: 1000
                  rate: 1000
                  per: 60
                  expires: 0
                  quota_max: 10000
                  quota_renews: 1424543479
                  quota_remaining: 10000
                  quota_renewal_rate: 2520000
                  access_rights:
                  bc2f8cfb7ab241504d9f3574fe407499:
                    api_name: Test
                    api_id: bc2f8cfb7ab241504d9f3574fe407499
                    versions:
                      - Default
                  org_id: 54b53d3aeba6db5c35000002
                  oauth_client_id: ''
                  basic_auth_data:
                    password: ''
                  hmac_enabled: false
                  hmac_string: ''
    put:
      summary: Update a Basic Auth User
      description: Update the Basic Auth user specified in the path {username}.
      operationId: updateBasicAuthUser
      tags:
        - Basic Authentication
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SessionState"
            example:
              last_check: 0
              allowance: 1000
              rate: 1000
              per: 60
              expires: 0
              quota_max: 10000
              quota_renews: 1424543479
              quota_remaining: 10000
              quota_renewal_rate: 2520000
              access_rights:
                bc2f8cfb7ab241504d9f3574fe407499:
                  api_id: bc2f8cfb7ab241504d9f3574fe407499
                  api_name: Test
                  versions:
                    - Default
              basic_auth_data:
                password: test123
      responses:
        '200':
          description: User created successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SessionState"
              example:
                api_model: { }
                key_id: 54b53d3aeba6db5c3500000test-user
                data:
                  last_check: 0
                  allowance: 1000
                  rate: 1000
                  per: 60
                  expires: 0
                  quota_max: 10000
                  quota_renews: 1424543479
                  quota_remaining: 10000
                  quota_renewal_rate: 2520000
                  access_rights:
                  bc2f8cfb7ab241504d9f3574fe407499:
                    api_name: Test
                    api_id: bc2f8cfb7ab241504d9f3574fe407499
                    versions:
                      - Default
                  org_id: 54b53d3aeba6db5c35000002
                  oauth_client_id: ''
                  basic_auth_data:
                    password: ''
                  hmac_enabled: false
                  hmac_string: ''
    get:
      summary: Get a Basic Auth User
      description: Get the Basic Auth user specified in the path {username}.
      operationId: getBasicAuthUser
      tags:
        - Basic Authentication
      responses:
        '200':
          description: User created successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SessionState"
              example:
                api_model: { }
                key_id: 54b53d3aeba6db5c3500000test-user
                data:
                  last_check: 0
                  allowance: 1000
                  rate: 1000
                  per: 60
                  expires: 0
                  quota_max: 10000
                  quota_renews: 1424543479
                  quota_remaining: 10000
                  quota_renewal_rate: 2520000
                  access_rights:
                  bc2f8cfb7ab241504d9f3574fe407499:
                    api_name: Test
                    api_id: bc2f8cfb7ab241504d9f3574fe407499
                    versions:
                      - Default
                  org_id: 54b53d3aeba6db5c35000002
                  oauth_client_id: ''
                  basic_auth_data:
                    password: ''
                    hmac_enabled: false
                    hmac_string: ''
    delete:
      summary: Delete a Basic Auth User
      description: Delete the Basic Auth user specified in the path {username}.
      operationId: deleteBasicAuthUser
      tags:
        - Basic Authentication
      responses:
        '200':
          description: User created successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SessionState"
              example:
                api_model: { }
                key_id: 54b53d3aeba6db5c3500000test-user
                data:
                  last_check: 0
                  allowance: 1000
                  rate: 1000
                  per: 60
                  expires: 0
                  quota_max: 10000
                  quota_renews: 1424543479
                  quota_remaining: 10000
                  quota_renewal_rate: 2520000
                  access_rights:
                  bc2f8cfb7ab241504d9f3574fe407499:
                    api_name: Test
                    api_id: bc2f8cfb7ab241504d9f3574fe407499
                    versions:
                      - Default
                  org_id: 54b53d3aeba6db5c35000002
                  oauth_client_id: ''
                  basic_auth_data:
                    password: ''
                  hmac_enabled: false
                  hmac_string: ''
  /api/org/opa:
    get:
      summary: List OPA Rules
      description: Lists OPA Rules.
      operationId: getOPA
      tags:
        - Open Policy Agent
      responses:
        '200':
          description: Key retrieved successfully.
          content:
            application/json:
              example:
                open_policy:
                  enabled: true
                  rules: "default hello = false\r\n\r\nhello {\r\n    m := input.message\r\n    m== \"world\"\r\n}"
  /api/org/permission:
    put:
      summary: Update OPA Rules
      description: Update OPA Rule Settings
      operationId: updateOPA
      tags:
        - Open Policy Agent
      requestBody:
        content:
          application/json:
            schema:
              type: object
            example:
              enabled: false
              rules: "default hello = false\r\n\r\nhello {\r\n    m := input.message\r\n    m== \"world\"\r\n}"
      responses:
        '200':
          description: tets
          content:
            application/json:
              schema:
                type: object
              example:
                Status: OK
                Message: OPA rules has been updated on org level
                Meta: null
  /api/users:
    get:
      summary: List Users
      description: Lists Dashboard Users
      operationId: getUsers
      tags:
        - Users
      responses:
        '200':
          description: "Users retrieved successfully."
          content:
            application/json:
              example:
                users:
                  - api_model: { }
                    first_name: John
                    last_name: Smith
                    email_address: john@jive.ly
                    password: $2a$10$mRVfrAf72N66anVNhA1KVuYaOwOrXhFzxyg6bwgZemUeVo2MNOpIa
                    org_id: 54b53d3aeba6db5c35000002
                    active: true
                    id: 54b53d4bf25b920f09361526
                    access_key: 0cf5e6c37add465a406f19807c081765
                    user_permissions:
                      IsAdmin: admin
                      ResetPassword: admin
                  - api_model: { }
                    first_name: Test
                    last_name: User
                    email_address: banana@test.com
                    password: ''
                    org_id: 54b53d3aeba6db5c35000002
                    active: true
                    id: 54bd0ad9ff4329b88985aafb
                    access_key: f81ee6f0c8f2467d539c132c8a422346
                    user_permissions:
                      user_groups: read
                      users: read
                pages: 0
    post:
      summary: Add User
      description: Add a User
      operationId: addUser
      tags:
        - Users
      requestBody:
        content:
          application/json:
            schema:
              type: object
            example:
              first_name: Jason
              last_name: Jasonson
              email_address: jason@jasonsonson.com
              active: true
              password: thisisatest
              user_permissions:
                IsAdmin: admin
      responses:
        '200':
          description: User added succesfully
          content:
            application/json:
              example:
                Status: OK
                Message: User created
                Meta: ''
  /api/users/search:
    get:
      summary: Retrieve user search results
      deprecated: true
      description: |
        This endpoint allows you to search for users by providing their email address as a query parameter.
        The endpoint was deprecated in favour of its POST alternative to avoid leaking sensitive information in the URL.
      parameters:
        - name: q
          in: query
          description: Query term used to search for users (email address)
          required: true
          schema:
            type: string
          example: "user"
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              example:
                users:
                  - api_model: { }
                    id: "65e9a499b1f93be3d4b531fb"
                    first_name: "John"
                    last_name: "Smith"
                    email_address: "user1@tyk.io"
                    org_id: "65e9a499b1f93be3d4b531ea"
                    active: true
                    access_key: "e4800a05614848994429f83d410b549b"
                    user_permissions:
                      IsAdmin: "admin"
                    group_id: ""
                    password_max_days: 0
                    password_updated: "2024-03-07T13:27:21.354+02:00"
                    last_login_date: "0001-01-01T01:44:24+01:44"
                    created_at: "2024-03-07T13:27:21.354+02:00"
                pages: 1
        '404':
          description: Error response
          content:
            application/json:
              example:
                status: "Error"
                message: "Could not search users"
    post:
      summary: Retrieve user search results
      description: |
        This endpoint allows you to search for users by providing their email address in the request payload.
      requestBody:
        description: User search criteria
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserSearchCriteria'
            example:
              filters:
                query: "user"
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              example:
                users:
                  - api_model: { }
                    id: "65e9a499b1f93be3d4b531fb"
                    first_name: "John"
                    last_name: "Smith"
                    email_address: "user1@tyk.io"
                    org_id: "65e9a499b1f93be3d4b531ea"
                    active: true
                    access_key: "e4800a05614848994429f83d410b549b"
                    user_permissions:
                      IsAdmin: "admin"
                    group_id: ""
                    password_max_days: 0
                    password_updated: "2024-03-07T13:27:21.354+02:00"
                    last_login_date: "0001-01-01T01:44:24+01:44"
                    created_at: "2024-03-07T13:27:21.354+02:00"
                pages: 1
        '404':
          description: Error response
          content:
            application/json:
              example:
                status: "Error"
                message: "Could not search users"

  /api/users/{USER_ID}:
    get:
      summary: Get User
      description: Get user specified by {USER_ID} in path.
      operationId: getUser
      tags:
        - Users
      parameters:
        - name: USER_ID
          in: path
          description: USER ID of the user to retrieve data for
          required: true
          schema:
            type: string
      responses:
        '200':
          description: "User retrieved succesfully"
          content:
            application/json:
              example:
                api_model: { }
                first_name: Test
                last_name: User
                email_address: banana@test.com
                password: ''
                org_id: 54b53d3aeba6db5c35000002
                active: true
                id: 54bd0ad9ff4329b88985aafb
                access_key: f81ee6f0c8f2467d539c132c8a422346
    put:
      summary: Update User
      description: Update User
      operationId: updateUser
      parameters:
        - name: USER_ID
          in: path
          description: USER ID of the user to retrieve data for
          required: true
          schema:
            type: string
      tags:
        - Users
      requestBody:
        content:
          application/json:
            schema:
              type: object
            example:
              first_name: Jason
              last_name: File
              email_address: jason.file@jasonsonson.com
              active: true
              user_permissions:
                IsAdmin: admin
      responses:
        '200':
          description: User updated
          content:
            application/json:
              example:
                Status: OK
                Message: User updated
                Meta: null
  /api/users/{USER_ID}/actions/reset:
    parameters:
      - name: USER_ID
        in: path
        description: User ID of the user whose password is being reset
        required: true
        schema:
          type: string
    post:
      summary: Set User Password
      description: Set a user's password
      operationId: setUserPassword
      tags:
        - Users
      requestBody:
        content:
          application/json:
            schema:
              type: object
            example:
              current_password: '12345'
              new_password: test123456
              user_permissions:
                IsAdmin: admin
      responses:
        '200':
          description: User password updated
          content:
            application/json:
              example:
                Status: OK
                Message: User password updated
                Meta: ''
  /api/users/{USER_ID}/actions/key/reset:
    parameters:
      - name: USER_ID
        in: path
        description: User ID of the user whose current Dashboard session will be reset
        required: true
        schema:
          type: string
    put:
      summary: Reset current Dashboard session for specified user
      description: Reset specified user's current Dashboard session.  User's Dashboard API credentials will also be reset.
      operationId: resetUserSession
      tags:
        - Users
      requestBody:
        content:
          application/json:
            schema:
              type: object
            example:
              userId: '{USER_ID}'
      responses:
        '200':
          description: Dashboard session for specified user has been reset successfully
          content:
            application/json:
              example:
                Status: OK
                Message: User session renewed
                Meta: null
    delete:
      summary: Delete User
      description: Delete a Dashboard user
      operationId: deleteUser
      tags:
        - Users
      responses:
        '200':
          description: Dashboard user deleted
          content:
            application/json:
              example:
                Status: OK
                Message: User deleted
                Meta: ''
  /api/data-graphs/data-sources/import:
    post:
      summary: Import a new data source
      tags:
        - Data Graph APIs
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - $ref: "#/components/schemas/NewDataSource"
                - $ref: "#/components/schemas/ImportOrPatchFromURL"
          application/vnd.tyk.udg.v2.openapi:
            schema:
              oneOf:
                - $ref: "https://raw.githubusercontent.com/OAI/OpenAPI-Specification/main/schemas/v3.0/schema.json"
                - $ref: "https://raw.githubusercontent.com/OAI/OpenAPI-Specification/main/schemas/v3.0/schema.yaml"
          application/vnd.tyk.udg.v2.asyncapi:
            schema:
              oneOf:
                - $ref: "https://raw.githubusercontent.com/asyncapi/spec-json-schemas/master/schemas/2.0.0.json"
                - $ref: "https://raw.githubusercontent.com/asyncapi/spec-json-schemas/master/schemas/2.1.0.json"
                - $ref: "https://raw.githubusercontent.com/asyncapi/spec-json-schemas/master/schemas/2.2.0.json"
                - $ref: "https://raw.githubusercontent.com/asyncapi/spec-json-schemas/master/schemas/2.3.0.json"
                - $ref: "https://raw.githubusercontent.com/asyncapi/spec-json-schemas/master/schemas/2.4.0.json"
      responses:
        '200':
          description: A new data source imported
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DataSourceImported"
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/apiStatusMessage"
              examples:
                malformedBody:
                  summary: When the request body is malformed
                  value:
                    message: "Request body malformed"
                    status: "error"
                unknownDataSourceType:
                  summary: When the data source type is unknown
                  value:
                    message: "Unknown data source type"
                    status: "error"


  '/api/schema':
    get:
      description: |-
        Get OAS schema
      tags:
        - Schema
      operationId: getSchema
      parameters:
        - description: The OAS version
          name: oasVersion
          in: query
          schema:
            type: string
      responses:
        '200':
          description: OAS schema response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OASSchemaResponse'
              example:
                status: 'Success'
                schema: <open api 3.0.3 schema>
        '400':
          description: response when parameter oasVersion is missing
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OASSchemaResponse'
              example:
                message: 'Should provide a value for parameter oasVersion'
                status: 'Failed'
        '500':
          description: response when oasSchema fetch failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OASSchemaResponse'
              example:
                message: 'Could not retrieve OAS schema: Schema not found for version 5.0.0'
                status: 'Failed'
  
  /api/examples:
    get:
      summary: Get a list of example API definitions
      description: Returns a list of all example API definitions available in "repository.json" file defined in "x-tyk-examples-index" header. If the header is not provided, Tyk will use the default value of this header which is `tyk-examples` repo as detailed below
      operationId: getAPIExamples
      tags:
        - APIs
      parameters:
        - name: p
          in: query
          description: Page number. If not provided, the first page will be returned
          schema:
            type: integer
        - name: x-tyk-examples-index
          in: header
          description: URL that points to the index file (repository.json) or root of a repository housing examples.
          schema:
            type: string
            default: "https://raw.githubusercontent.com/TykTechnologies/tyk-examples/main/repository.json"
      responses:
        '200':
          description: List of API examples response
          content:
            application/json:
              schema:
                type: object
                description: Paginated response of available example API definition
                properties:
                  data:
                    $ref: "#/components/schemas/APIExample"
                  pages:
                    type: integer
                    example: 1
        '400':
          description: Invalid parameters
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/apiStatusMessage"
              example:
                message: "Invalid examples index file or root path"
                status: "error"
        '500':
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiStatusMessage'
              example:
                message: "Failed to fetch examples index file"
                status: "error"
  /api/examples/{location}:
    get:
      summary: Get details of a single example API definition
      description: Get the details of a single API definition, details include full name, location in the repository, description, features and min tyk version
      operationId: getAPIExample
      tags:
        - APIs
      parameters:
        - name: location
          in: path
          description: Location of the tyk example in the repository defined in `x-tyk-repo-url`
          required: true
          schema:
            type: string
            example: "udg/simple-app"
        - name: x-tyk-repo-url
          in: header
          description: Repository URL to fetch example API definitions from
          schema:
            type: string
            default: "https://github.com/TykTechnologies/tyk-examples.git"
        - name: x-tyk-examples-index
          in: header
          description: URL path to the "repository.json" in the repository defined in `x-tyk-repo-url`
          schema:
            type: string
            default: "https://raw.githubusercontent.com/TykTechnologies/tyk-examples/main/repository.json"
        - name: apiDef
          in: query
          description: If set to true, the response will contain the APIDefinition of the specified example, the definition will be present as the `apiDefinition` field.
          required: false
          schema:
            type: boolean
            default: false
        - name: readme
          in: query
          description: If set to true, the response will contain the content of the Readme file for the specified example, the readme content will be present as the `readme` field.
          required: false
          schema:
            type: boolean
            default: false
      responses:
        '200':
          description: Details on the fetched example API definition.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APIExampleDetailed"
        '400':
          description: Invalid parameters
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/apiStatusMessage"
              example:
                message: "Invalid examples index file or root path"
                status: "error"
        '404':
          description: Example API definition not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/apiStatusMessage"
              example:
                message: "Example API definition not found"
                status: "error"
        '500':
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiStatusMessage'
              example:
                message: "Failed to fetch example API definition"
                status: "Failed"

  /api/system/stats:
    get:
      summary: 'Get system usage info with license entitlements for a specified date range. Return history for current and previous year if no date query parameters are provided.'
      tags:
        - System
      operationId: getSystemStats
      parameters:
        - name: start_day
          in: query
          description: start date
          required: false
          schema:
            type: string
            format: date
            example: 2023-07-01
        - name: end_day
          in: query
          description: end date
          required: false
          schema:
            type: string
            format: date
            example: 2023-07-31
        - name: resolution
          in: query
          description: resolve daily
          required: false
          schema:
            type: string
            enum: [ day ]
        - name: entity
          in: query
          description: The entity for which stats should be retrieved.
          schema:
            type: string
            enum: [ apis ]
      responses:
        '200':
          description: System statistics details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SystemStats'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiStatusMessage'
              example:
                code: 400
                message:
                  request validation failed: invalid date format
        '404':
          description: Configuration not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiStatusMessage'
              example:
                code: 404
                message: Stats not found
  /api/assets:
    get:
      tags:
        - Assets
      summary: Retrieve list of assets
      description: Retrieves all types of assets with optional kind filter.
      parameters:
        - name: kind
          in: query
          description: Filter assets by kind (optional).
          schema:
            type: string
            enum:
              - oas-template
            default: oas-template
          example: oas-template
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Asset'
        '400':
          description: bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiStatusMessage'
              example:
                code: 400
                message:
                  "unsupported asset kind: 'invalid-asset-kind'"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiStatusMessage'
              example:
                code: 500
                message: something went wrong
    post:
      tags:
        - Assets
      summary: Create an asset
      description: Create a new asset.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Asset'
      responses:
        '201':
          description: Asset created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiStatusMessage'
              example:
                code: 200
                status: success
                message: asset created
        '409':
          description: conflict on custom asset ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiStatusMessage'
              example:
                code: 409
                message: "asset ID already exists: 'my-custom-asset'"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiStatusMessage'
              example:
                code: 500
                message: something went wrong

  /api/assets/{assetID}:
    get:
      tags:
        - Assets
      summary: Retrieve an asset.
      description: Retrieve an asset by ID.
      parameters:
        - name: assetID
          in: path
          description: ID of the asset to retrieve - this value can be the database ID of the asset or the custom ID provided during creation/update.
          required: true
          schema:
            type: string
          examples:
            customID:
              value: my-asset
            dbID:
              value: 659b9613a1ed7ef7afdccb9d
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Asset'
        '404':
          description: asset not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiStatusMessage'
              example:
                code: 404
                message: "asset not found: 'my-custom-asset'"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiStatusMessage'
              example:
                code: 500
                message: "error fetching asset: 'my-custom-asset'"
    put:
      tags:
        - Assets
      summary: Update an asset by ID.
      description: Update an existing asset.
      parameters:
        - name: assetID
          in: path
          description: ID of the asset to retrieve - this value can be the database ID of the asset or the custom ID provided during creation/update.
          required: true
          schema:
            type: string
          examples:
            customID:
              value: my-asset
            dbID:
              value: 659b9613a1ed7ef7afdccb9d
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Asset'
      responses:
        '200':
          description: Asset updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiStatusMessage'
              example:
                code: 200
                status: success
                message: asset updated
        '400':
          description: cannot change db ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiStatusMessage'
              example:
                code: 400
                status: failure
                message: cannot change db ID of asset
        '422':
          description: Unprocessible entity
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiStatusMessage'
              example:
                code: 422
                message:
                  unsupported asset kind
        '404':
          description: asset not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiStatusMessage'
              example:
                code: 404
                message: asset not found
        '409':
          description: conflict on custom asset ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiStatusMessage'
              example:
                code: 409
                message: "asset ID already exists: 'my-custom-asset'"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiStatusMessage'
              example:
                code: 500
                message: something went wrong
    delete:
      tags:
        - Assets
      summary: Delete an asset by ID.
      description: Remove an asset ID.
      parameters:
        - name: assetID
          in: path
          description:  ID of the asset to delete - this value can be the database ID of the asset or the custom ID provided during creation/update.
          required: true
          schema:
            type: string
          examples:
            customID:
              value: my-asset
            dbID:
              value: 659b9613a1ed7ef7afdccb9d
      responses:
        '200':
          description: Asset removed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiStatusMessage'
              example:
                code: 200
                message: asset removed successfully
        '404':
          description: asset not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiStatusMessage'
              example:
                code: 404
                message: "asset not found: 'my-custom-asset'"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiStatusMessage'
              example:
                code: 500
                message: something went wrong

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
  schemas:
    APIExample:
      type: object
      description: An example API Definition.
      properties:
        name:
          type: string
          description: Name of the example API definition.
          example: "VAT number validator UDG"
        location:
          type: string
          description: Location (path to folder) of the example API Definition in the current repository
          example: "udg/vat-checker"
        shortDescription:
          type: string
          description: Short description of the example API
          example: "Countries GQL API extended with information from Restcountries"
    APIExampleDetailed:
      type: object
      description: Detailed information of an API Definition available as an example API definition.
      properties:
        name:
          type: string
          description: Name of the example API definition
          example: "Sample App"
        location:
          type: string
          description: Location (path to folder) of the example API Definition in the repository
          example: "udg/simple-api"
        features:
          type: array
          items:
            type: string
          description: Features of the example API Definition
          example:
            - "REST Datasource"
            - "GQL Datasource"
            - "Field mapping"
        min_version:
          type: string
          description: Min tyk version this api definition works with
          example: "5.0"
        apiDefinition:
          $ref: '#/components/schemas/APIDefinition'
        readme:
          type: string
          description: Readme.md content (markdown) of the example.
          example: "# Sample App\n\nThis is a sample app"

    APIDefinition:
      properties:
        tags:
          items:
            type: string
          type: array
          x-go-name: Tags
        CORS:
          properties:
            allow_credentials:
              type: boolean
              x-go-name: AllowCredentials
            allowed_headers:
              items:
                type: string
              type: array
              x-go-name: AllowedHeaders
            allowed_methods:
              items:
                type: string
              type: array
              x-go-name: AllowedMethods
            allowed_origins:
              items:
                type: string
              type: array
              x-go-name: AllowedOrigins
            debug:
              type: boolean
              x-go-name: Debug
            enable:
              type: boolean
              x-go-name: Enable
            exposed_headers:
              items:
                type: string
              type: array
              x-go-name: ExposedHeaders
            max_age:
              format: int64
              type: integer
              x-go-name: MaxAge
            options_passthrough:
              type: boolean
              x-go-name: OptionsPassthrough
          type: object
        active:
          type: boolean
          x-go-name: Active
        allowed_ips:
          items:
            type: string
          type: array
          x-go-name: AllowedIPs
        api_id:
          type: string
          x-go-name: APIID
        auth:
          $ref: '#/components/schemas/Auth'
        auth_provider:
          $ref: '#/components/schemas/AuthProviderMeta'
        base_identity_provided_by:
          $ref: '#/components/schemas/AuthTypeEnum'
        basic_auth:
          properties:
            body_password_regexp:
              type: string
              x-go-name: BodyPasswordRegexp
            body_user_regexp:
              type: string
              x-go-name: BodyUserRegexp
            cache_ttl:
              format: int64
              type: integer
              x-go-name: CacheTTL
            disable_caching:
              type: boolean
              x-go-name: DisableCaching
            extract_from_body:
              type: boolean
              x-go-name: ExtractFromBody
          type: object
          x-go-name: BasicAuth
        blacklisted_ips:
          items:
            type: string
          type: array
          x-go-name: BlacklistedIPs
        cache_options:
          $ref: '#/components/schemas/CacheOptions'
        certificates:
          items:
            type: string
          type: array
          x-go-name: Certificates
        client_certificates:
          items:
            type: string
          type: array
          x-go-name: ClientCertificates
        config_data:
          additionalProperties:
            type: object
          type: object
          x-go-name: ConfigData
        custom_middleware:
          $ref: '#/components/schemas/MiddlewareSection'
        custom_middleware_bundle:
          type: string
          x-go-name: CustomMiddlewareBundle
        definition:
          properties:
            key:
              type: string
              x-go-name: Key
            location:
              type: string
              x-go-name: Location
            strip_path:
              type: boolean
              x-go-name: StripPath
          type: object
          x-go-name: VersionDefinition
        disable_quota:
          type: boolean
          x-go-name: DisableQuota
        disable_rate_limit:
          type: boolean
          x-go-name: DisableRateLimit
        do_not_track:
          type: boolean
          x-go-name: DoNotTrack
        domain:
          type: string
          x-go-name: Domain
        dont_set_quota_on_create:
          type: boolean
          x-go-name: DontSetQuotasOnCreate
        enable_batch_request_support:
          type: boolean
          x-go-name: EnableBatchRequestSupport
        enable_context_vars:
          type: boolean
          x-go-name: EnableContextVars
        enable_coprocess_auth:
          type: boolean
          x-go-name: EnableCoProcessAuth
        enable_ip_blacklisting:
          type: boolean
          x-go-name: EnableIpBlacklisting
        enable_ip_whitelisting:
          type: boolean
          x-go-name: EnableIpWhiteListing
        enable_jwt:
          type: boolean
          x-go-name: EnableJWT
        enable_signature_checking:
          type: boolean
          x-go-name: EnableSignatureChecking
        event_handlers:
          $ref: '#/components/schemas/EventHandlerMetaConfig'
        expire_analytics_after:
          format: int64
          type: integer
          x-go-name: ExpireAnalyticsAfter
        global_rate_limit:
          $ref: '#/components/schemas/GlobalRateLimit'
        hmac_allowed_algorithms:
          items:
            type: string
          type: array
          x-go-name: HmacAllowedAlgorithms
        hmac_allowed_clock_skew:
          format: double
          type: number
          x-go-name: HmacAllowedClockSkew
        id:
          $ref: '#/components/schemas/ObjectID'
        internal:
          type: boolean
          x-go-name: Internal
        jwt_client_base_field:
          type: string
          x-go-name: JWTClientIDBaseField
        jwt_expires_at_validation_skew:
          format: uint64
          type: integer
          x-go-name: JWTExpiresAtValidationSkew
        jwt_identity_base_field:
          type: string
          x-go-name: JWTIdentityBaseField
        jwt_issued_at_validation_skew:
          format: uint64
          type: integer
          x-go-name: JWTIssuedAtValidationSkew
        jwt_not_before_validation_skew:
          format: uint64
          type: integer
          x-go-name: JWTNotBeforeValidationSkew
        jwt_policy_field_name:
          type: string
          x-go-name: JWTPolicyFieldName
        jwt_scope_claim_name:
          type: string
          x-go-name: JWTScopeClaimName
        jwt_scope_to_policy_mapping:
          additionalProperties:
            type: string
          type: object
          x-go-name: JWTScopeToPolicyMapping
        jwt_signing_method:
          type: string
          x-go-name: JWTSigningMethod
        jwt_skip_kid:
          type: boolean
          x-go-name: JWTSkipKid
        jwt_source:
          type: string
          x-go-name: JWTSource
        name:
          type: string
          x-go-name: Name
        notifications:
          $ref: '#/components/schemas/NotificationsManager'
        oauth_meta:
          properties:
            allowed_access_types:
              items:
                $ref: '#/components/schemas/AccessRequestType'
              type: array
              x-go-name: AllowedAccessTypes
            allowed_authorize_types:
              items:
                $ref: '#/components/schemas/AuthorizeRequestType'
              type: array
              x-go-name: AllowedAuthorizeTypes
            auth_login_redirect:
              type: string
              x-go-name: AuthorizeLoginRedirect
          type: object
          x-go-name: Oauth2Meta
        openid_options:
          $ref: '#/components/schemas/OpenIDOptions'
        org_id:
          type: string
          x-go-name: OrgID
        pinned_public_keys:
          additionalProperties:
            type: string
          type: object
          x-go-name: PinnedPublicKeys
        proxy:
          properties:
            check_host_against_uptime_tests:
              type: boolean
              x-go-name: CheckHostAgainstUptimeTests
            disable_strip_slash:
              type: boolean
              x-go-name: DisableStripSlash
            enable_load_balancing:
              type: boolean
              x-go-name: EnableLoadBalancing
            listen_path:
              type: string
              x-go-name: ListenPath
            preserve_host_header:
              type: boolean
              x-go-name: PreserveHostHeader
            service_discovery:
              $ref: '#/components/schemas/ServiceDiscoveryConfiguration'
            strip_listen_path:
              type: boolean
              x-go-name: StripListenPath
            target_list:
              items:
                type: string
              type: array
              x-go-name: Targets
            target_url:
              type: string
              x-go-name: TargetURL
            transport:
              properties:
                proxy_url:
                  type: string
                  x-go-name: ProxyURL
                ssl_ciphers:
                  items:
                    type: string
                  type: array
                  x-go-name: SSLCipherSuites
                ssl_insecure_skip_verify:
                  type: boolean
                  x-go-name: SSLInsecureSkipVerify
                ssl_min_version:
                  format: uint16
                  type: integer
                  x-go-name: SSLMinVersion
              type: object
              x-go-name: Transport
          type: object
          x-go-name: Proxy
        response_processors:
          items:
            $ref: '#/components/schemas/ResponseProcessor'
          type: array
          x-go-name: ResponseProcessors
        session_lifetime:
          format: int64
          type: integer
          x-go-name: SessionLifetime
        session_provider:
          $ref: '#/components/schemas/SessionProviderMeta'
        slug:
          type: string
          x-go-name: Slug
        strip_auth_data:
          type: boolean
          x-go-name: StripAuthData
        tag_headers:
          items:
            type: string
          type: array
          x-go-name: TagHeaders
        upstream_certificates:
          additionalProperties:
            type: string
          type: object
          x-go-name: UpstreamCertificates
        uptime_tests:
          properties:
            check_list:
              items:
                $ref: '#/components/schemas/HostCheckObject'
              type: array
              x-go-name: CheckList
            config:
              properties:
                expire_utime_after:
                  format: int64
                  type: integer
                  x-go-name: ExpireUptimeAnalyticsAfter
                recheck_wait:
                  format: int64
                  type: integer
                  x-go-name: RecheckWait
                service_discovery:
                  $ref: '#/components/schemas/ServiceDiscoveryConfiguration'
              type: object
              x-go-name: Config
          type: object
          x-go-name: UptimeTests
        use_basic_auth:
          type: boolean
          x-go-name: UseBasicAuth
        use_keyless:
          type: boolean
          x-go-name: UseKeylessAccess
        use_mutual_tls_auth:
          type: boolean
          x-go-name: UseMutualTLSAuth
        use_oauth2:
          type: boolean
          x-go-name: UseOauth2
        use_openid:
          type: boolean
          x-go-name: UseOpenID
        use_standard_auth:
          type: boolean
          x-go-name: UseStandardAuth
        version_data:
          properties:
            default_version:
              type: string
              x-go-name: DefaultVersion
            not_versioned:
              type: boolean
              x-go-name: NotVersioned
            versions:
              additionalProperties:
                $ref: '#/components/schemas/VersionInfo'
              type: object
              x-go-name: Versions
          type: object
          x-go-name: VersionData
      title: >-
        APIDefinition represents the configuration for a single proxied API and
        it's versions.
      type: object
      x-go-package: github.com/TykTechnologies/tyk/apidef
    APILimit:
      title: APILimit stores quota and rate limit on ACL level (per API)
      properties:
        per:
          format: double
          type: number
          x-go-name: Per
        quota_max:
          format: int64
          type: integer
          x-go-name: QuotaMax
        quota_remaining:
          format: int64
          type: integer
          x-go-name: QuotaRemaining
        quota_renewal_rate:
          format: int64
          type: integer
          x-go-name: QuotaRenewalRate
        quota_renews:
          format: int64
          type: integer
          x-go-name: QuotaRenews
        rate:
          format: double
          type: number
          x-go-name: Rate
        set_by_policy:
          type: boolean
          x-go-name: SetByPolicy
        throttle_interval:
          format: double
          type: number
          x-go-name: ThrottleInterval
        throttle_retry_limit:
          format: int64
          type: integer
          x-go-name: ThrottleRetryLimit
        smoothing:
          type: object
          $ref: '#/components/schemas/RateLimitSmoothing'
          description: Smoothing contains rate limit smoothing settings.
          x-go-name: Smoothing
      type: object
      x-go-package: github.com/TykTechnologies/tyk/user
    AccessDefinition:
      description: AccessDefinition defines which versions of an API a key has access to
      properties:
        allowed_urls:
          items:
            $ref: '#/components/schemas/AccessSpec'
          type: array
          x-go-name: AllowedURLs
        api_id:
          type: string
          x-go-name: APIID
        api_name:
          type: string
          x-go-name: APIName
        limit:
          $ref: '#/components/schemas/APILimit'
        versions:
          items:
            type: string
          type: array
          x-go-name: Versions
      type: object
      x-go-package: github.com/TykTechnologies/tyk/user
    AccessRequestType:
      description: AccessRequestType is the type for OAuth param `grant_type`
      type: string
      x-go-package: github.com/TykTechnologies/tyk/vendor/github.com/lonelycode/osin
    AccessSpec:
      description: >-
        AccessSpecs define what URLS a user has access to an what methods are
        enabled
      properties:
        methods:
          items:
            type: string
          type: array
          x-go-name: Methods
        url:
          type: string
          x-go-name: URL
      type: object
      x-go-package: github.com/TykTechnologies/tyk/user
    Auth:
      properties:
        auth_header_name:
          type: string
          x-go-name: AuthHeaderName
        cookie_name:
          type: string
          x-go-name: CookieName
        param_name:
          type: string
          x-go-name: ParamName
        signature:
          $ref: '#/components/schemas/SignatureConfig'
        use_certificate:
          type: boolean
          x-go-name: UseCertificate
        use_cookie:
          type: boolean
          x-go-name: UseCookie
        use_param:
          type: boolean
          x-go-name: UseParam
        validate_signature:
          type: boolean
          x-go-name: ValidateSignature
      type: object
      x-go-package: github.com/TykTechnologies/tyk/apidef
    AuthProviderCode:
      type: string
      x-go-package: github.com/TykTechnologies/tyk/apidef
    AuthProviderMeta:
      properties:
        meta:
          additionalProperties:
            type: object
          type: object
          x-go-name: Meta
        name:
          $ref: '#/components/schemas/AuthProviderCode'
        storage_engine:
          $ref: '#/components/schemas/StorageEngineCode'
      type: object
      x-go-package: github.com/TykTechnologies/tyk/apidef
    AuthTypeEnum:
      type: string
      x-go-package: github.com/TykTechnologies/tyk/apidef
    AuthorizeRequestType:
      description: AuthorizeRequestType is the type for OAuth param `response_type`
      type: string
      x-go-package: github.com/TykTechnologies/tyk/vendor/github.com/lonelycode/osin
    CacheMeta:
      properties:
        cache_response_codes:
          items:
            format: int64
            type: integer
          type: array
          x-go-name: CacheOnlyResponseCodes
        cache_key_regex:
          type: string
          x-go-name: CacheKeyRegex
        method:
          type: string
          x-go-name: Method
        path:
          type: string
          x-go-name: Path
      type: object
      x-go-package: github.com/TykTechnologies/tyk/apidef
    CacheOptions:
      properties:
        cache_all_safe_requests:
          type: boolean
          x-go-name: CacheAllSafeRequests
        cache_control_ttl_header:
          type: string
          x-go-name: CacheControlTTLHeader
        cache_response_codes:
          items:
            format: int64
            type: integer
          type: array
          x-go-name: CacheOnlyResponseCodes
        cache_timeout:
          format: int64
          type: integer
          x-go-name: CacheTimeout
        enable_cache:
          type: boolean
          x-go-name: EnableCache
        enable_upstream_cache_control:
          type: boolean
          x-go-name: EnableUpstreamCacheControl
      type: object
      x-go-package: github.com/TykTechnologies/tyk/apidef
    CircuitBreakerMeta:
      properties:
        method:
          type: string
          x-go-name: Method
        path:
          type: string
          x-go-name: Path
        return_to_service_after:
          format: int64
          type: integer
          x-go-name: ReturnToServiceAfter
        samples:
          format: int64
          type: integer
          x-go-name: Samples
        threshold_percent:
          format: double
          type: number
          x-go-name: ThresholdPercent
      type: object
      x-go-package: github.com/TykTechnologies/tyk/apidef
    EndPointMeta:
      properties:
        method_actions:
          additionalProperties:
            $ref: '#/components/schemas/EndpointMethodMeta'
          type: object
          x-go-name: MethodActions
        path:
          type: string
          x-go-name: Path
      type: object
      x-go-package: github.com/TykTechnologies/tyk/apidef
    EndpointMethodAction:
      type: string
      x-go-package: github.com/TykTechnologies/tyk/apidef
    EndpointMethodMeta:
      properties:
        action:
          $ref: '#/components/schemas/EndpointMethodAction'
        code:
          format: int64
          type: integer
          x-go-name: Code
        data:
          type: string
          x-go-name: Data
        headers:
          additionalProperties:
            type: string
          type: object
          x-go-name: Headers
      type: object
      x-go-package: github.com/TykTechnologies/tyk/apidef
    EventHandlerMetaConfig:
      properties:
        events:
          x-go-name: Events
      type: object
      x-go-package: github.com/TykTechnologies/tyk/apidef
    RateLimitMeta:
      properties:
        disabled:
          type: boolean
          x-go-name: Disabled
        method:
          type: string
          x-go-name: Method
        path:
          type: string
          x-go-name: Path
        per:
          type: number
          format: double
          x-go-name: Per
        rate:
          type: number
          format: double
          x-go-name: Rate
      title: RateLimitMeta configures rate limits per API path.
      type: object
      x-go-package: github.com/TykTechnologies/tyk/apidef
    ExtendedPathsSet:
      properties:
        advance_cache_config:
          items:
            $ref: '#/components/schemas/CacheMeta'
          type: array
          x-go-name: AdvanceCacheConfig
        black_list:
          items:
            $ref: '#/components/schemas/EndPointMeta'
          type: array
          x-go-name: BlackList
        cache:
          items:
            type: string
          type: array
          x-go-name: Cached
        circuit_breakers:
          items:
            $ref: '#/components/schemas/CircuitBreakerMeta'
          type: array
          x-go-name: CircuitBreaker
        do_not_track_endpoints:
          items:
            $ref: '#/components/schemas/TrackEndpointMeta'
          type: array
          x-go-name: DoNotTrackEndpoints
        hard_timeouts:
          items:
            $ref: '#/components/schemas/HardTimeoutMeta'
          type: array
          x-go-name: HardTimeouts
        ignored:
          items:
            $ref: '#/components/schemas/EndPointMeta'
          type: array
          x-go-name: Ignored
        internal:
          items:
            $ref: '#/components/schemas/InternalMeta'
          type: array
          x-go-name: Internal
        method_transforms:
          items:
            $ref: '#/components/schemas/MethodTransformMeta'
          type: array
          x-go-name: MethodTransforms
        rate_limit:
          type: array
          items:
            $ref: '#/components/schemas/RateLimitMeta'
          x-go-name: RateLimit
        size_limits:
          items:
            $ref: '#/components/schemas/RequestSizeMeta'
          type: array
          x-go-name: SizeLimit
        track_endpoints:
          items:
            $ref: '#/components/schemas/TrackEndpointMeta'
          type: array
          x-go-name: TrackEndpoints
        transform:
          items:
            $ref: '#/components/schemas/TemplateMeta'
          type: array
          x-go-name: Transform
        transform_headers:
          items:
            $ref: '#/components/schemas/HeaderInjectionMeta'
          type: array
          x-go-name: TransformHeader
        transform_jq:
          items:
            $ref: '#/components/schemas/TransformJQMeta'
          type: array
          x-go-name: TransformJQ
        transform_jq_response:
          items:
            $ref: '#/components/schemas/TransformJQMeta'
          type: array
          x-go-name: TransformJQResponse
        transform_response:
          items:
            $ref: '#/components/schemas/TemplateMeta'
          type: array
          x-go-name: TransformResponse
        transform_response_headers:
          items:
            $ref: '#/components/schemas/HeaderInjectionMeta'
          type: array
          x-go-name: TransformResponseHeader
        url_rewrites:
          items:
            $ref: '#/components/schemas/URLRewriteMeta'
          type: array
          x-go-name: URLRewrite
        validate_json:
          items:
            $ref: '#/components/schemas/ValidatePathMeta'
          type: array
          x-go-name: ValidateJSON
        virtual:
          items:
            $ref: '#/components/schemas/VirtualMeta'
          type: array
          x-go-name: Virtual
        white_list:
          items:
            $ref: '#/components/schemas/EndPointMeta'
          type: array
          x-go-name: WhiteList
      type: object
      x-go-package: github.com/TykTechnologies/tyk/apidef
    GlobalRateLimit:
      properties:
        per:
          format: double
          type: number
          x-go-name: Per
        rate:
          format: double
          type: number
          x-go-name: Rate
      type: object
      x-go-package: github.com/TykTechnologies/tyk/apidef
    GraphAccessDefinition:
      type: object
      x-go-package: github.com/TykTechnologies/tyk/user
    HardTimeoutMeta:
      properties:
        method:
          type: string
          x-go-name: Method
        path:
          type: string
          x-go-name: Path
        timeout:
          format: int64
          type: integer
          x-go-name: TimeOut
      type: object
      x-go-package: github.com/TykTechnologies/tyk/apidef
    HashType:
      type: string
      x-go-package: github.com/TykTechnologies/tyk/user
    HeaderInjectionMeta:
      properties:
        act_on:
          type: boolean
          x-go-name: ActOnResponse
        add_headers:
          additionalProperties:
            type: string
          type: object
          x-go-name: AddHeaders
        delete_headers:
          items:
            type: string
          type: array
          x-go-name: DeleteHeaders
        method:
          type: string
          x-go-name: Method
        path:
          type: string
          x-go-name: Path
      type: object
      x-go-package: github.com/TykTechnologies/tyk/apidef
    HostCheckObject:
      properties:
        body:
          type: string
          x-go-name: Body
        headers:
          additionalProperties:
            type: string
          type: object
          x-go-name: Headers
        method:
          type: string
          x-go-name: Method
        url:
          type: string
          x-go-name: CheckURL
      type: object
      x-go-package: github.com/TykTechnologies/tyk/apidef
    IdExtractorSource:
      type: string
      x-go-package: github.com/TykTechnologies/tyk/apidef
    IdExtractorType:
      type: string
      x-go-package: github.com/TykTechnologies/tyk/apidef
    InternalMeta:
      properties:
        method:
          type: string
          x-go-name: Method
        path:
          type: string
          x-go-name: Path
      type: object
      x-go-package: github.com/TykTechnologies/tyk/apidef
    MethodTransformMeta:
      properties:
        method:
          type: string
          x-go-name: Method
        path:
          type: string
          x-go-name: Path
        to_method:
          type: string
          x-go-name: ToMethod
      type: object
      x-go-package: github.com/TykTechnologies/tyk/apidef
    MiddlewareDefinition:
      properties:
        name:
          type: string
          x-go-name: Name
        path:
          type: string
          x-go-name: Path
        require_session:
          type: boolean
          x-go-name: RequireSession
      type: object
      x-go-package: github.com/TykTechnologies/tyk/apidef
    MiddlewareDriver:
      type: string
      x-go-package: github.com/TykTechnologies/tyk/apidef
    MiddlewareIdExtractor:
      properties:
        extract_from:
          $ref: '#/components/schemas/IdExtractorSource'
        extract_with:
          $ref: '#/components/schemas/IdExtractorType'
        extractor_config:
          additionalProperties:
            type: object
          type: object
          x-go-name: ExtractorConfig
      type: object
      x-go-package: github.com/TykTechnologies/tyk/apidef
    MiddlewareSection:
      properties:
        auth_check:
          $ref: '#/components/schemas/MiddlewareDefinition'
        driver:
          $ref: '#/components/schemas/MiddlewareDriver'
        id_extractor:
          $ref: '#/components/schemas/MiddlewareIdExtractor'
        post:
          items:
            $ref: '#/components/schemas/MiddlewareDefinition'
          type: array
          x-go-name: Post
        post_key_auth:
          items:
            $ref: '#/components/schemas/MiddlewareDefinition'
          type: array
          x-go-name: PostKeyAuth
        pre:
          items:
            $ref: '#/components/schemas/MiddlewareDefinition'
          type: array
          x-go-name: Pre
        response:
          items:
            $ref: '#/components/schemas/MiddlewareDefinition'
          type: array
          x-go-name: Response
      type: object
      x-go-package: github.com/TykTechnologies/tyk/apidef
    NewClientRequest:
      description: >-
        NewClientRequest is an outward facing JSON object translated from osin
        OAuthClients
      properties:
        api_id:
          type: string
          x-go-name: APIID
        client_id:
          type: string
          x-go-name: ClientID
        description:
          type: string
          x-go-name: Description
        meta_data:
          type: object
          x-go-name: MetaData
        policy_id:
          type: string
          x-go-name: PolicyID
        redirect_uri:
          type: string
          x-go-name: ClientRedirectURI
        secret:
          type: string
          x-go-name: ClientSecret
      type: object
      x-go-package: github.com/TykTechnologies/tyk
    NotificationsManager:
      description: 'TODO: Make this more generic'
      properties:
        oauth_on_keychange_url:
          type: string
          x-go-name: OAuthKeyChangeURL
        shared_secret:
          type: string
          x-go-name: SharedSecret
      title: >-
        NotificationsManager handles sending notifications to OAuth endpoints to
        notify the provider of key changes.
      type: object
      x-go-package: github.com/TykTechnologies/tyk/apidef
    OAuthClientToken:
      properties:
        code:
          type: string
          x-go-name: Token
        expires:
          format: int64
          type: integer
          x-go-name: Expires
      type: object
      x-go-package: github.com/TykTechnologies/tyk
    OIDProviderConfig:
      properties:
        client_ids:
          additionalProperties:
            type: string
          type: object
          x-go-name: ClientIDs
        issuer:
          type: string
          x-go-name: Issuer
      type: object
      x-go-package: github.com/TykTechnologies/tyk/apidef
    ObjectID:
      description: 'http://www.mongodb.org/display/DOCS/Object+IDs'
      title: >-
        ObjectID is a unique ID identifying a BSON value. It must be exactly 12
        bytes

        long. MongoDB objects by default have such a property set in their "_id"

        property.
      type: string
      x-go-package: github.com/TykTechnologies/tyk/vendor/gopkg.in/mgo.v2/bson
    OpenIDOptions:
      properties:
        providers:
          items:
            $ref: '#/components/schemas/OIDProviderConfig'
          type: array
          x-go-name: Providers
        segregate_by_client:
          type: boolean
          x-go-name: SegregateByClient
      type: object
      x-go-package: github.com/TykTechnologies/tyk/apidef
    Policy:
      properties:
        _id:
          $ref: '#/components/schemas/ObjectID'
          type: object
          x-go-name: MID
        id:
          type: string
          x-go-name: ID
        name:
          type: string
          x-go-name: Name
        org_id:
          type: string
          x-go-name: OrgID
        rate:
          format: double
          type: number
          x-go-name: Rate
        per:
          format: double
          type: number
          x-go-name: Per
        quota_max:
          format: int64
          type: integer
          x-go-name: QuotaMax
        quota_renewal_rate:
          format: int64
          type: integer
          x-go-name: QuotaRenewalRate
        throttle_interval:
          format: double
          type: number
          x-go-name: ThrottleInterval
        throttle_retry_limit:
          type: number
          x-go-name: ThrottleRetryLimit
        max_query_depth:
          type: number
          x-go-name: MaxQueryDepth
        access_rights:
          type: object
          x-go-name: AccessRights
          additionalProperties:
              $ref: '#/components/schemas/AccessDefinition'
        hmac_enabled:
          type: boolean
          x-go-name: HMACEnabled
        enable_http_signature_validation:
          type: boolean
          x-go-name: EnableHTTPSignatureValidation
        active:
          type: boolean
          x-go-name: Active
        is_inactive:
          type: boolean
          x-go-name: IsInactive
        tags:
          type: array
          items:
            type: string
          x-go-name: Tags
        key_expires_in:
          format: int64
          type: number
          x-go-name: KeyExpiresIn
        partitions:
          $ref: '#/components/schemas/PolicyPartitions'
          type: object
          x-go-name: Partitions
        last_updated:
          type: string
          x-go-name: LastUpdates
        smoothing:
          type: object
          $ref: '#/components/schemas/RateLimitSmoothing'
          description: Smoothing contains rate limit smoothing settings.
          x-go-name: Smoothing
        meta_data:
          type: object
          x-go-name: MetaData
        graphql_access_rights:
          $ref: '#/components/schemas/GraphAccessDefinition'
      type: object
      title: Policy represents a user policy
      x-go-package: github.com/TykTechnologies/tyk/user
    PolicyPartitions:
      properties:
        quota:
          type: boolean
          x-go-name: Quota
        rate_limit:
          type: boolean
          x-go-name: RateLimit
        complexity:
          type: boolean
          x-go-name: Complexity
        acl:
          type: boolean
          x-go-name: Acl
        per_api:
          type: boolean
          x-go-name: PerAPI
      type: object
      x-go-package: github.com/TykTechnologies/tyk/user
    RateLimitSmoothing:
      properties:
        delay:
          type: integer
          format: int64
          description: Delay is a hold-off between smoothing events and controls how frequently the current allowance will step up or down (in seconds).
          minimum: 1
          x-go-name: Delay
        enabled:
          type: boolean
          description: Enabled indicates if rate limit smoothing is active.
          x-go-name: Enabled
        step:
          type: integer
          format: int64
          description: Step is the increment by which the current allowance will be increased or decreased each time a smoothing event is emitted.
          minimum: 1
          x-go-name: Step
        threshold:
          type: integer
          format: int64
          description: Threshold is the initial rate limit beyond which smoothing will be applied. It is a count of requests during the `per` interval and should be less than the maximum configured `rate`.
          minimum: 1
          x-go-name: Threshold
        trigger:
          type: number
          format: double
          description: Trigger is a fraction (typically in the range 0.1-1.0) of the step at which point a smoothing event will be emitted as the request rate approaches the current allowance.
          minimum: 0
          exclusiveMinimum: true
          multipleOf: 0.01
          x-go-name: Trigger
      title:  RateLimitSmoothing holds the rate smoothing configuration.
      description: |-
        Rate Limit Smoothing is a mechanism to dynamically adjust the request rate
        limits based on the current traffic patterns. It helps in managing request
        spikes by gradually increasing or decreasing the rate limit instead of making
        abrupt changes or blocking requests excessively.
    
        Once the rate limit smoothing triggers an allowance change, one of the
        following events is emitted:
    
        - `RateLimitSmoothingUp` when the allowance increases
        - `RateLimitSmoothingDown` when the allowance decreases
    
        Events are emitted based on the configuration:
    
        - `enabled` (boolean) to enable or disable rate limit smoothing
        - `threshold` after which to apply smoothing (minimum rate for window)
        - `trigger` configures at which fraction of a step a smoothing event is emitted
        - `step` is the value by which the rate allowance will get adjusted
        - `delay` is a hold-off in seconds providing a minimum period between rate allowance adjustments
    
        To determine if the request rate is growing and needs to be smoothed, the
        `step * trigger` value is subtracted from the request allowance and, if
        the request rate goes above that, then a RateLimitSmoothingUp event is
        emitted and the rate allowance is increased by `step`.
    
        Once the request allowance has been increased above the `threshold`, Tyk
        will start to check for decreasing request rate. When the request rate
        drops `step * (1 + trigger)` below the request allowance, a
        `RateLimitSmoothingDown` event is emitted and the rate allowance is
        decreased by `step`.
    
        After the request allowance has been adjusted (up or down), the request
        rate will be checked again over the next `delay` seconds and, if
        required, further adjustment made to the rate allowance after the
        hold-off.
    
        For any allowance, events are emitted based on the following calculations:
    
         - When the request rate rises above `allowance - (step * trigger)`,
          a RateLimitSmoothingUp event is emitted and allowance increases by `step`.
         - When the request rate falls below `allowance - (step + step * trigger)`,
          a RateLimitSmoothingDown event is emitted and allowance decreases by `step`.
    
        Example: Threshold: 400, Request allowance: 600, Current rate: 500, Step: 100, Trigger: 0.5.
    
        To trigger a RateLimitSmoothingUp event, the request rate must exceed:
    
         - Calculation: Allowance - (Step * Trigger).
         - Example: 600 - (100 * 0.5) = `550`.
    
        Exceeding a request rate of `550` will increase the allowance to 700 (Allowance + Step).
    
        To trigger a RateLimitSmoothingDown event, the request rate must fall below:
    
         - Calculation: Allowance - (Step + (Step * Trigger)).
         - Example: 600 - (100 + (100 * 0.5)) = 450.
    
        As the request rate falls below 450, that will decrease the allowance to 500 (Allowance - Step).
    
        The request allowance will be smoothed between `threshold`, and the
        defined `rate` limit (maximum). The request allowance will be updated
        internally every `delay` seconds.
      type: object
      x-go-package: github.com/TykTechnologies/tyk/apidef
    Regexp:
      description: Regexp is a wrapper around regexp.Regexp but with caching
      properties:
        FromCache:
          type: boolean
      type: object
      x-go-package: github.com/TykTechnologies/tyk/regexp
    RequestInputType:
      type: string
      x-go-package: github.com/TykTechnologies/tyk/apidef
    RequestSizeMeta:
      properties:
        method:
          type: string
          x-go-name: Method
        path:
          type: string
          x-go-name: Path
        size_limit:
          format: int64
          type: integer
          x-go-name: SizeLimit
      type: object
      x-go-package: github.com/TykTechnologies/tyk/apidef
    ResponseProcessor:
      properties:
        name:
          type: string
          x-go-name: Name
        options:
          type: object
          x-go-name: Options
      type: object
      x-go-package: github.com/TykTechnologies/tyk/apidef
    RoutingTrigger:
      properties:
        'on':
          $ref: '#/components/schemas/RoutingTriggerOnType'
        options:
          $ref: '#/components/schemas/RoutingTriggerOptions'
        rewrite_to:
          type: string
          x-go-name: RewriteTo
      type: object
      x-go-package: github.com/TykTechnologies/tyk/apidef
    RoutingTriggerOnType:
      type: string
      x-go-package: github.com/TykTechnologies/tyk/apidef
    RoutingTriggerOptions:
      properties:
        header_matches:
          additionalProperties:
            $ref: '#/components/schemas/StringRegexMap'
          type: object
          x-go-name: HeaderMatches
        path_part_matches:
          additionalProperties:
            $ref: '#/components/schemas/StringRegexMap'
          type: object
          x-go-name: PathPartMatches
        payload_matches:
          $ref: '#/components/schemas/StringRegexMap'
        query_val_matches:
          additionalProperties:
            $ref: '#/components/schemas/StringRegexMap'
          type: object
          x-go-name: QueryValMatches
        request_context_matches:
          additionalProperties:
            $ref: '#/components/schemas/StringRegexMap'
          type: object
          x-go-name: RequestContextMatches
        session_meta_matches:
          additionalProperties:
            $ref: '#/components/schemas/StringRegexMap'
          type: object
          x-go-name: SessionMetaMatches
      type: object
      x-go-package: github.com/TykTechnologies/tyk/apidef
    ServiceDiscoveryConfiguration:
      properties:
        cache_timeout:
          format: int64
          type: integer
          x-go-name: CacheTimeout
        data_path:
          type: string
          x-go-name: DataPath
        endpoint_returns_list:
          type: boolean
          x-go-name: EndpointReturnsList
        parent_data_path:
          type: string
          x-go-name: ParentDataPath
        port_data_path:
          type: string
          x-go-name: PortDataPath
        query_endpoint:
          type: string
          x-go-name: QueryEndpoint
        target_path:
          type: string
          x-go-name: TargetPath
        use_discovery_service:
          type: boolean
          x-go-name: UseDiscoveryService
        use_nested_query:
          type: boolean
          x-go-name: UseNestedQuery
        use_target_list:
          type: boolean
          x-go-name: UseTargetList
      type: object
      x-go-package: github.com/TykTechnologies/tyk/apidef
    SessionProviderCode:
      type: string
      x-go-package: github.com/TykTechnologies/tyk/apidef
    SessionProviderMeta:
      properties:
        meta:
          additionalProperties:
            type: object
          type: object
          x-go-name: Meta
        name:
          $ref: '#/components/schemas/SessionProviderCode'
        storage_engine:
          $ref: '#/components/schemas/StorageEngineCode'
      type: object
      x-go-package: github.com/TykTechnologies/tyk/apidef
    SessionState:
      description: >-
        There's a data structure that's based on this and it's used for Protocol
        Buffer support, make sure to update
        "coprocess/proto/coprocess_session_state.proto" and generate the
        bindings using: cd coprocess/proto && ./update_bindings.sh
      properties:
        tags:
          items:
            type: string
          type: array
          x-go-name: Tags
        access_rights:
          additionalProperties:
            $ref: '#/components/schemas/AccessDefinition'
          type: object
          x-go-name: AccessRights
        alias:
          type: string
          x-go-name: Alias
        allowance:
          format: double
          type: number
          x-go-name: Allowance
        apply_policies:
          items:
            type: string
          type: array
          x-go-name: ApplyPolicies
        apply_policy_id:
          type: string
          x-go-name: ApplyPolicyID
        basic_auth_data:
          properties:
            hash_type:
              $ref: '#/components/schemas/HashType'
            password:
              type: string
              x-go-name: Password
          type: object
          x-go-name: BasicAuthData
        certificate:
          type: string
          x-go-name: Certificate
        data_expires:
          format: int64
          type: integer
          x-go-name: DataExpires
        enable_detail_recording:
          type: boolean
          x-go-name: EnableDetailedRecording
        expires:
          format: int64
          type: integer
          x-go-name: Expires
        hmac_enabled:
          type: boolean
          x-go-name: HMACEnabled
        hmac_string:
          type: string
          x-go-name: HmacSecret
        id_extractor_deadline:
          format: int64
          type: integer
          x-go-name: IdExtractorDeadline
        is_inactive:
          type: boolean
          x-go-name: IsInactive
        jwt_data:
          properties:
            secret:
              type: string
              x-go-name: Secret
          type: object
          x-go-name: JWTData
        last_check:
          format: int64
          type: integer
          x-go-name: LastCheck
        last_updated:
          type: string
          x-go-name: LastUpdated
        meta_data:
          additionalProperties:
            type: object
          type: object
          x-go-name: MetaData
        monitor:
          properties:
            trigger_limits:
              items:
                format: double
                type: number
              type: array
              x-go-name: TriggerLimits
          type: object
          x-go-name: Monitor
        oauth_client_id:
          type: string
          x-go-name: OauthClientID
        oauth_keys:
          additionalProperties:
            type: string
          type: object
          x-go-name: OauthKeys
        org_id:
          type: string
          x-go-name: OrgID
        per:
          format: double
          type: number
          x-go-name: Per
        quota_max:
          format: int64
          type: integer
          x-go-name: QuotaMax
        quota_remaining:
          format: int64
          type: integer
          x-go-name: QuotaRemaining
        quota_renewal_rate:
          format: int64
          type: integer
          x-go-name: QuotaRenewalRate
        quota_renews:
          format: int64
          type: integer
          x-go-name: QuotaRenews
        rate:
          format: double
          type: number
          x-go-name: Rate
        session_lifetime:
          format: int64
          type: integer
          x-go-name: SessionLifetime
        smoothing:
          type: object
          $ref: '#/components/schemas/RateLimitSmoothing'
          description: Smoothing contains rate limit smoothing settings.
          x-go-name: Smoothing
        throttle_interval:
          format: double
          type: number
          x-go-name: ThrottleInterval
        throttle_retry_limit:
          format: int64
          type: integer
          x-go-name: ThrottleRetryLimit
      title: >-
        SessionState objects represent a current API session, mainly used for
        rate limiting.
      type: object
      x-go-package: github.com/TykTechnologies/tyk/user
    SignatureConfig:
      properties:
        algorithm:
          type: string
          x-go-name: Algorithm
        allowed_clock_skew:
          format: int64
          type: integer
          x-go-name: AllowedClockSkew
        error_code:
          format: int64
          type: integer
          x-go-name: ErrorCode
        error_message:
          type: string
          x-go-name: ErrorMessage
        header:
          type: string
          x-go-name: Header
        secret:
          type: string
          x-go-name: Secret
      type: object
      x-go-package: github.com/TykTechnologies/tyk/apidef
    StorageEngineCode:
      type: string
      x-go-package: github.com/TykTechnologies/tyk/apidef
    StringRegexMap:
      properties:
        match_rx:
          type: string
          x-go-name: MatchPattern
        reverse:
          type: boolean
          x-go-name: Reverse
      type: object
      x-go-package: github.com/TykTechnologies/tyk/apidef
    TemplateData:
      properties:
        enable_session:
          type: boolean
          x-go-name: EnableSession
        input_type:
          $ref: '#/components/schemas/RequestInputType'
        template_mode:
          $ref: '#/components/schemas/TemplateMode'
        template_source:
          type: string
          x-go-name: TemplateSource
      type: object
      x-go-package: github.com/TykTechnologies/tyk/apidef
    TemplateMeta:
      properties:
        method:
          type: string
          x-go-name: Method
        path:
          type: string
          x-go-name: Path
        template_data:
          $ref: '#/components/schemas/TemplateData'
      type: object
      x-go-package: github.com/TykTechnologies/tyk/apidef
    TemplateMode:
      type: string
      x-go-package: github.com/TykTechnologies/tyk/apidef
    TrackEndpointMeta:
      properties:
        method:
          type: string
          x-go-name: Method
        path:
          type: string
          x-go-name: Path
      type: object
      x-go-package: github.com/TykTechnologies/tyk/apidef
    TransformJQMeta:
      properties:
        filter:
          type: string
          x-go-name: Filter
        method:
          type: string
          x-go-name: Method
        path:
          type: string
          x-go-name: Path
      type: object
      x-go-package: github.com/TykTechnologies/tyk/apidef
    URLRewriteMeta:
      properties:
        MatchRegexp:
          $ref: '#/components/schemas/Regexp'
        match_pattern:
          type: string
          x-go-name: MatchPattern
        method:
          type: string
          x-go-name: Method
        path:
          type: string
          x-go-name: Path
        rewrite_to:
          type: string
          x-go-name: RewriteTo
        triggers:
          items:
            $ref: '#/components/schemas/RoutingTrigger'
          type: array
          x-go-name: Triggers
      type: object
      x-go-package: github.com/TykTechnologies/tyk/apidef
    UserSearchCriteria:
      type: object
      properties:
        filters:
          type: object
          properties:
            query:
              type: string
              description: Query term used to search for users (email address)
          required:
            - query
      required:
        - filters
    ValidatePathMeta:
      properties:
        error_response_code:
          description: >-
            Allows override of default 422 Unprocessible Entity response code
            for validation errors.
          format: int64
          type: integer
          x-go-name: ErrorResponseCode
        method:
          type: string
          x-go-name: Method
        path:
          type: string
          x-go-name: Path
        schema:
          additionalProperties:
            type: object
          type: object
          x-go-name: Schema
        schema_b64:
          type: string
          x-go-name: SchemaB64
      type: object
      x-go-package: github.com/TykTechnologies/tyk/apidef
    VersionInfo:
      properties:
        paths:
          properties:
            black_list:
              items:
                type: string
              type: array
              x-go-name: BlackList
            ignored:
              items:
                type: string
              type: array
              x-go-name: Ignored
            white_list:
              items:
                type: string
              type: array
              x-go-name: WhiteList
          type: object
          x-go-name: Paths
        expires:
          type: string
          x-go-name: Expires
        extended_paths:
          $ref: '#/components/schemas/ExtendedPathsSet'
        global_headers:
          additionalProperties:
            type: string
          type: object
          x-go-name: GlobalHeaders
        global_headers_remove:
          items:
            type: string
          type: array
          x-go-name: GlobalHeadersRemove
        global_size_limit:
          format: int64
          type: integer
          x-go-name: GlobalSizeLimit
        name:
          type: string
          x-go-name: Name
        override_target:
          type: string
          x-go-name: OverrideTarget
        use_extended_paths:
          type: boolean
          x-go-name: UseExtendedPaths
      type: object
      x-go-package: github.com/TykTechnologies/tyk/apidef
    VirtualMeta:
      properties:
        function_source_type:
          type: string
          x-go-name: FunctionSourceType
        function_source_uri:
          type: string
          x-go-name: FunctionSourceURI
        method:
          type: string
          x-go-name: Method
        path:
          type: string
          x-go-name: Path
        proxy_on_error:
          type: boolean
          x-go-name: ProxyOnError
        response_function_name:
          type: string
          x-go-name: ResponseFunctionName
        use_session:
          type: boolean
          x-go-name: UseSession
      type: object
      x-go-package: github.com/TykTechnologies/tyk/apidef
    apiAllKeys:
      description: apiAllKeys represents a list of keys in the memory store
      properties:
        keys:
          items:
            type: string
          type: array
          x-go-name: APIKeys
      type: object
      x-go-package: github.com/TykTechnologies/tyk
    CategoriesPayload:
      description: CategoriesPayload is a list of category names
      properties:
        categories:
          items:
            type: string
          type: array
          x-go-name: CategoriesPayload
      type: object
      x-go-package: github.com/TykTechnologies/tyk-analytics/dashboard
    AllCategoriesResponse:
      description: allCategoriesPayload is a list of all the currently defined categories, each with a count of the number of APIs that have been tagged with that category name
      properties:
        categories:
          items:
            type: object
            properties:
              name:
                type: string
                x-go-name: Name
              count:
                type: integer
                x-go-name: Count
          type: array
          x-go-name: AllCategoriesResponse
      type: object
      x-go-package: github.com/TykTechnologies/tyk-analytics/dashboard
    apiModifyKeySuccess:
      description: apiModifyKeySuccess represents when a Key modification was successful
      properties:
        action:
          type: string
          x-go-name: Action
        key:
          description: 'in:body'
          type: string
          x-go-name: Key
        key_hash:
          type: string
          x-go-name: KeyHash
        status:
          type: string
          x-go-name: Status
      type: object
      x-go-package: github.com/TykTechnologies/tyk
    apiStatusMessage:
      description: apiStatusMessage represents an API status message
      properties:
        message:
          description: Response details
          type: string
          x-go-name: Message
        status:
          type: string
          x-go-name: Status
      type: object
      x-go-package: github.com/TykTechnologies/tyk
    APIAllCertificates:
      description: APIAllCertificates represents a list of certificates
      properties:
        certs:
          items:
            type: string
          type: array
          x-go-name: Certs
      type: object
      x-go-package: github.com/TykTechnologies/tyk
    APIAllCertificateBasics:
      description: APIAllCertificates represents a list of certificate basics
      properties:
        certs:
          items:
            $ref: '#/components/schemas/CertificateBasics'
          type: array
          x-go-name: Certs
      type: object
      x-go-package: github.com/TykTechnologies/tyk
    CertificateBasics:
      description: CertificateBasics represents basic details of a certificate
      properties:
        id:
          type: string
          x-go-name: ID
        issuer_cn:
          type: string
          x-go-name: IssuerCN
        subject_cn:
          type: string
          x-go-name: SubjectCN
        dns_names:
          type: array
          items:
            type: string
          x-go-name: DNSNames
        has_private:
          type: string
          x-go-name: HasPrivateKey
        not_before:
          type: string
          x-go-name: NotBefore
        not_after:
          type: string
          x-go-name: NotAfter
        is_ca:
          type: boolean
          x-go-name: IsCA
          description: Indicates whether the certificate is a root Certificate Authority (CA) certificate.
      type: object
      x-go-package: github.com/TykTechnologies/tyk
    CertificateMeta:
      description: CertificateBasics represents basic details of a certificate
      properties:
        id:
          type: string
          x-go-name: ID
        fingerprint:
          type: string
          x-go-name: Fingerprint
        has_private:
          type: string
          x-go-name: HasPrivateKey
        issuer:
          $ref: '#/components/schemas/pkixName'
        subject:
          $ref: '#/components/schemas/pkixName'
        not_before:
          type: string
          x-go-name: NotBefore
        not_after:
          type: string
          x-go-name: NotAfter
        dns_names:
          type: array
          items:
            type: string
          x-go-name: DNSNames
        is_ca:
          type: boolean
          x-go-name: IsCA
          description: Indicates whether the certificate is a root Certificate Authority (CA) certificate.
      type: object
      x-go-package: github.com/TykTechnologies/tyk
    pkixName:
      description: Name represents an X.509 distinguished name
      properties:
        Country:
          type: array
          items:
            type: string
        Organization:
          type: array
          items:
            type: string
        OrganizationalUnit:
          type: array
          items:
            type: string
        Locality:
          type: array
          items:
            type: string
        Province:
          type: array
          items:
            type: string
        StreetAddress:
          type: array
          items:
            type: string
        PostalCode:
          type: array
          items:
            type: string
        SerialNumber:
          type: string
        CommonName:
          type: string
        Names:
          type: array
          items:
            $ref: '#/components/schemas/pkixAttributeTypeAndValue'
        ExtraNames:
          type: array
          items:
            $ref: '#/components/schemas/pkixAttributeTypeAndValueSET'
    pkixAttributeTypeAndValue:
      description: AttributeTypeAndValue mirrors the ASN.1 structure of the same name in RFC 5280, Section 4.1.2.4.
      properties:
        Type:
          type: array
          items:
            type: integer
        Value:
          type: object
    ImportOrPatchFromURL:
      type: object
      properties:
        url:
          type: string
          format: uri
          description: The URL from which to import the OpenAPI document.
      required:
        - url
    XTykApiGateway:
      type: object
      properties:
        x-tyk-api-gateway:
          type: object
          properties:
            info:
              type: object
              properties:
                id:
                  type: string
                dbId:
                  type: string
                orgId:
                  type: string
                name:
                  type: string
                state:
                  type: object
                  properties:
                    active:
                      type: boolean
            upstream:
              type: object
              properties:
                url:
                  type: string
            server:
              type: object
              properties:
                listenPath:
                  type: object
                  properties:
                    value:
                      type: string
                    strip:
                      type: boolean
    TykOasApiDefinition:
        allOf:
          - $ref: "https://raw.githubusercontent.com/OAI/OpenAPI-Specification/main/schemas/v3.0/schema.json"
          - $ref: "#/components/schemas/XTykApiGateway"
    DryRunRequest:
      type: object
      properties:
        oas:
          $ref: "https://raw.githubusercontent.com/OAI/OpenAPI-Specification/main/schemas/v3.0/schema.json"
        tyk_oas:
          $ref: "#/components/schemas/TykOasApiDefinition"

    APIAccessManagementPayload:
        description: APIAccessManagementPayload represents two lists containing users and user groups that have access to an API
        properties:
          userIds:
            type: array
            items:
              type: string
          userGroupIds:
            type: array
            items:
              type: string
        type: object
        x-go-name: AccessManagementPayload
        x-go-package: github.com/TykTechnologies/tyk-analytics/dashboard/model
    pkixAttributeTypeAndValueSET:
      description: AttributeTypeAndValueSET represents a set of ASN.1 sequences of AttributeTypeAndValue sequences from RFC 2986 (PKCS #10).
      properties:
        Type:
          type: array
          items:
            type: integer
        Value:
          type: array
          items:
            type: array
            items:
              $ref: '#/components/schemas/pkixAttributeTypeAndValue'
    APICertificateStatusMessage:
      description: Status message when certificate is added
      properties:
        id:
          type: string
          x-go-name: CertID
        status:
          type: string
          x-go-name: Status
        message:
          type: string
          x-go-name: Message
      type: object
      x-go-package: github.com/TykTechnologies/tyk
    OASSchemaResponse:
      description: OAS schema endpoint response
      type: object
      properties:
        status:
          type: string
        message:
          type: string
        schema:
          type: string
          description: <OAS schema definition>
    BooleanQueryParam:
      type: boolean
      enum: [ true, false ]
      example: true
    APIVersionMeta:
      description: API version meta
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        versionName:
          type: string
        internal:
          type: boolean
        expirationDate:
          type: string
        isDefaultVersion:
          type: boolean
    NewDataSource:
      description: Defines a new data source to be imported
      type: object
      properties:
        type:
          type: string
          enum:
            - asyncapi
            - openapi
        data:
          type: string
    DataSourceImported:
      description: A new data source imported successfully
      type: object
      properties:
        status:
          type: string
          x-go-name: Status
        message:
          type: string
          x-go-name: Message
        meta:
          type: string
          x-go-name: Meta
    SystemStats:
      type: object
      properties:
        code:
          type: integer
          example: 200
        message:
          type: string
          example: 'success'
        stats:
          type: object
          properties:
            apis:
              type: array
              items:
                $ref: '#/components/schemas/Stats'
    Stats:
      type: object
      properties:
        date:
          type: string
          example: 2023-07-01
        max_usage:
          type: integer
          example: 20
        max_active_usage:
          type: integer
          example: 18
        min_usage:
          type: integer
          example: 10
        min_active_usage:
          type: integer
          example: 8
        avg_usage:
          type: integer
          example: 15
        avg_active_usage:
          type: integer
          example: 13
        license_entitlement:
          type: integer
          example: 25
        license_entitlement_active:
          type: integer
          example: 20
    Asset:
      type: object
      properties:
        _id:
          description: database id of asset
          type: string
          readOnly: true
          example: 659b9613a1ed7ef7afdccb9d
        id:
          description: custom id of asset that can be provided while creation/updation.
          type: string
          example: my-asset
        kind:
          description: Type of asset.
          type: string
          enum:
            - oas-template
          default: oas-template
          example: oas-template
        data:
          type: object
          description: Data associated with the asset
          example: { "info": { "title": "oas doc title","version": "1" },"openapi": "3.0.3","paths": { },"x-tyk-api-gateway": { "info": { "orgId": "659f7ebba1ed7e3ab9796caa","name": "oas api","state": { "active": false } },"upstream": { "url": "" },"server": { "listenPath": { "value": "/" } } } }
        last_updated_at:
          type: string
          description: last updated time stamp
          readOnly: true
          example: '2024-01-10T08:48:36.183Z'
  parameters:
    UpstreamURL:
      name: upstreamURL
      in: query
      description: Upstream URL for the API
      required: false
      schema:
        type: string
    ListenPath:
      name: listenPath
      in: query
      description: Listen path for the API
      schema:
        type: string
      required: false
    CustomDomain:
      name: customDomain
      schema:
        type: string
      description: Custom domain for the API
      in: query
      required: false
    ValidateRequest:
      name: validateRequest
      in: query
      description: Enable validateRequest middleware for all endpoints having a request body with media type application/json
      required: false
      schema:
        $ref: '#/components/schemas/BooleanQueryParam'
    MockResponse:
      name: mockResponse
      in: query
      description: Enable mockResponse middleware for all endpoints having responses configured.
      required: false
      schema:
        $ref: '#/components/schemas/BooleanQueryParam'
    AllowList:
      name: allowList
      in: query
      description: Enable allowList middleware for all endpoints
      required: false
      schema:
        $ref: '#/components/schemas/BooleanQueryParam'
    Authentication:
      name: authentication
      in: query
      description: Enable/disable the authentication mechanism in your Tyk Gateway for your OAS API
      schema:
        $ref: '#/components/schemas/BooleanQueryParam'
    TemplateID:
      name: templateID
      in: query
      description: The asset ID of template applied while creating or importing an OAS API.
      schema:
        $ref: '#/components/schemas/BooleanQueryParam'
    SearchText:
      name: searchText
      schema:
        type: string
      description: Search for API version name
      in: query
      required: false
    AccessType:
      name: accessType
      schema:
        type: string
        enum: [ "internal", "external" ]
      description: Filter for internal or external API versions
      in: query
      required: false
security:
  - bearerAuth: [ ]
