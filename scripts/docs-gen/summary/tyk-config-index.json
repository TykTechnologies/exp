[
  {
    "versions": [
      "v3.0.0"
    ],
    "path": "AnalyticsConfigConfig.EnableDetailedRecording",
    "type": "bool",
    "tag": "json:\"enable_detailed_recording\"",
    "doc": ""
  },
  {
    "versions": [
      "v3.0.0"
    ],
    "path": "AnalyticsConfigConfig.EnableGeoIP",
    "type": "bool",
    "tag": "json:\"enable_geo_ip\"",
    "doc": ""
  },
  {
    "versions": [
      "v3.0.0"
    ],
    "path": "AnalyticsConfigConfig.GeoIPDBLocation",
    "type": "string",
    "tag": "json:\"geo_ip_db_path\"",
    "doc": ""
  },
  {
    "versions": [
      "v3.0.0"
    ],
    "path": "AnalyticsConfigConfig.IgnoredIPs",
    "type": "[]string",
    "tag": "json:\"ignored_ips\"",
    "doc": ""
  },
  {
    "versions": [
      "v3.0.0"
    ],
    "path": "AnalyticsConfigConfig.NormaliseUrls",
    "type": "NormalisedURLConfig",
    "tag": "json:\"normalise_urls\"",
    "doc": ""
  },
  {
    "versions": [
      "v3.0.0"
    ],
    "path": "AnalyticsConfigConfig.PoolSize",
    "type": "int",
    "tag": "json:\"pool_size\"",
    "doc": ""
  },
  {
    "versions": [
      "v3.0.0"
    ],
    "path": "AnalyticsConfigConfig.RecordsBufferSize",
    "type": "uint64",
    "tag": "json:\"records_buffer_size\"",
    "doc": ""
  },
  {
    "versions": [
      "v3.0.0"
    ],
    "path": "AnalyticsConfigConfig.StorageExpirationTime",
    "type": "int",
    "tag": "json:\"storage_expiration_time\"",
    "doc": ""
  },
  {
    "versions": [
      "v3.0.0"
    ],
    "path": "AnalyticsConfigConfig.Type",
    "type": "string",
    "tag": "json:\"type\"",
    "doc": ""
  },
  {
    "versions": [
      "v3.0.0"
    ],
    "path": "AuthOverrideConf.AuthProvider",
    "type": "apidef.AuthProviderMeta",
    "tag": "json:\"auth_provider\"",
    "doc": ""
  },
  {
    "versions": [
      "v3.0.0"
    ],
    "path": "AuthOverrideConf.ForceAuthProvider",
    "type": "bool",
    "tag": "json:\"force_auth_provider\"",
    "doc": ""
  },
  {
    "versions": [
      "v3.0.0"
    ],
    "path": "AuthOverrideConf.ForceSessionProvider",
    "type": "bool",
    "tag": "json:\"force_session_provider\"",
    "doc": ""
  },
  {
    "versions": [
      "v3.0.0"
    ],
    "path": "AuthOverrideConf.SessionProvider",
    "type": "apidef.SessionProviderMeta",
    "tag": "json:\"session_provider\"",
    "doc": ""
  },
  {
    "versions": [
      "v3.0.0"
    ],
    "path": "CertData.CertFile",
    "type": "string",
    "tag": "json:\"cert_file\"",
    "doc": ""
  },
  {
    "versions": [
      "v3.0.0"
    ],
    "path": "CertData.KeyFile",
    "type": "string",
    "tag": "json:\"key_file\"",
    "doc": ""
  },
  {
    "versions": [
      "v3.0.0"
    ],
    "path": "CertData.Name",
    "type": "string",
    "tag": "json:\"domain_name\"",
    "doc": ""
  },
  {
    "versions": [
      "v3.0.0"
    ],
    "path": "CertificatesConfig.API",
    "type": "[]string",
    "tag": "json:\"apis\"",
    "doc": ""
  },
  {
    "versions": [
      "v3.0.0"
    ],
    "path": "CertificatesConfig.ControlAPI",
    "type": "[]string",
    "tag": "json:\"control_api\"",
    "doc": ""
  },
  {
    "versions": [
      "v3.0.0"
    ],
    "path": "CertificatesConfig.Dashboard",
    "type": "[]string",
    "tag": "json:\"dashboard_api\"",
    "doc": ""
  },
  {
    "versions": [
      "v3.0.0"
    ],
    "path": "CertificatesConfig.MDCB",
    "type": "[]string",
    "tag": "json:\"mdcb_api\"",
    "doc": ""
  },
  {
    "versions": [
      "v3.0.0"
    ],
    "path": "CertificatesConfig.Upstream",
    "type": "map[string]string",
    "tag": "json:\"upstream\"",
    "doc": ""
  },
  {
    "versions": [
      "v3.0.0"
    ],
    "path": "CoProcessConfig.CoProcessGRPCServer",
    "type": "string",
    "tag": "json:\"coprocess_grpc_server\"",
    "doc": ""
  },
  {
    "versions": [
      "v3.0.0"
    ],
    "path": "CoProcessConfig.EnableCoProcess",
    "type": "bool",
    "tag": "json:\"enable_coprocess\"",
    "doc": ""
  },
  {
    "versions": [
      "v3.0.0"
    ],
    "path": "CoProcessConfig.GRPCRecvMaxSize",
    "type": "int",
    "tag": "json:\"grpc_recv_max_size\"",
    "doc": ""
  },
  {
    "versions": [
      "v3.0.0"
    ],
    "path": "CoProcessConfig.GRPCSendMaxSize",
    "type": "int",
    "tag": "json:\"grpc_send_max_size\"",
    "doc": ""
  },
  {
    "versions": [
      "v3.0.0"
    ],
    "path": "CoProcessConfig.PythonPathPrefix",
    "type": "string",
    "tag": "json:\"python_path_prefix\"",
    "doc": ""
  },
  {
    "versions": [
      "v3.0.0"
    ],
    "path": "CoProcessConfig.PythonVersion",
    "type": "string",
    "tag": "json:\"python_version\"",
    "doc": ""
  },
  {
    "versions": [
      "v3.0.0"
    ],
    "path": "Config.AllowInsecureConfigs",
    "type": "bool",
    "tag": "json:\"allow_insecure_configs\"",
    "doc": ""
  },
  {
    "versions": [
      "v3.0.0"
    ],
    "path": "Config.AllowMasterKeys",
    "type": "bool",
    "tag": "json:\"allow_master_keys\"",
    "doc": "If AllowMasterKeys is set to true, session objects (key definitions) that do not have explicit access rights set\nwill be allowed by Tyk. This means that keys that are created have access to ALL APIs, which in many cases is\nunwanted behaviour unless you are sure about what you are doing."
  },
  {
    "versions": [
      "v3.0.0"
    ],
    "path": "Config.AllowRemoteConfig",
    "type": "bool",
    "tag": "bson:\"allow_remote_config\" json:\"allow_remote_config\"",
    "doc": ""
  },
  {
    "versions": [
      "v3.0.0"
    ],
    "path": "Config.AnalyticsConfig",
    "type": "AnalyticsConfigConfig",
    "tag": "json:\"analytics_config\"",
    "doc": ""
  },
  {
    "versions": [
      "v3.0.0"
    ],
    "path": "Config.AppPath",
    "type": "string",
    "tag": "json:\"app_path\"",
    "doc": "CE Configurations"
  },
  {
    "versions": [
      "v3.0.0"
    ],
    "path": "Config.AuthOverride",
    "type": "AuthOverrideConf",
    "tag": "json:\"auth_override\"",
    "doc": ""
  },
  {
    "versions": [
      "v3.0.0"
    ],
    "path": "Config.BundleBaseURL",
    "type": "string",
    "tag": "bson:\"bundle_base_url\" json:\"bundle_base_url\"",
    "doc": ""
  },
  {
    "versions": [
      "v3.0.0"
    ],
    "path": "Config.BundleInsecureSkipVerify",
    "type": "bool",
    "tag": "bson:\"bundle_insecure_skip_verify\" json:\"bundle_insecure_skip_verify\"",
    "doc": ""
  },
  {
    "versions": [
      "v3.0.0"
    ],
    "path": "Config.CacheStorage",
    "type": "StorageOptionsConf",
    "tag": "json:\"cache_storage\"",
    "doc": ""
  },
  {
    "versions": [
      "v3.0.0"
    ],
    "path": "Config.CloseConnections",
    "type": "bool",
    "tag": "json:\"close_connections\"",
    "doc": ""
  },
  {
    "versions": [
      "v3.0.0"
    ],
    "path": "Config.CloseIdleConnections",
    "type": "bool",
    "tag": "json:\"close_idle_connections\"",
    "doc": ""
  },
  {
    "versions": [
      "v3.0.0"
    ],
    "path": "Config.Cloud",
    "type": "bool",
    "tag": "json:\"cloud\"",
    "doc": "Cloud flag shows that gateway runs in Tyk-cloud."
  },
  {
    "versions": [
      "v3.0.0"
    ],
    "path": "Config.CoProcessOptions",
    "type": "CoProcessConfig",
    "tag": "json:\"coprocess_options\"",
    "doc": ""
  },
  {
    "versions": [
      "v3.0.0"
    ],
    "path": "Config.ControlAPIHostname",
    "type": "string",
    "tag": "json:\"control_api_hostname\"",
    "doc": ""
  },
  {
    "versions": [
      "v3.0.0"
    ],
    "path": "Config.ControlAPIPort",
    "type": "int",
    "tag": "json:\"control_api_port\"",
    "doc": ""
  },
  {
    "versions": [
      "v3.0.0"
    ],
    "path": "Config.DBAppConfOptions",
    "type": "DBAppConfOptionsConfig",
    "tag": "json:\"db_app_conf_options\"",
    "doc": ""
  },
  {
    "versions": [
      "v3.0.0"
    ],
    "path": "Config.DRLNotificationFrequency",
    "type": "int",
    "tag": "json:\"drl_notification_frequency\"",
    "doc": ""
  },
  {
    "versions": [
      "v3.0.0"
    ],
    "path": "Config.DRLThreshold",
    "type": "float64",
    "tag": "json:\"drl_threshold\"",
    "doc": ""
  },
  {
    "versions": [
      "v3.0.0"
    ],
    "path": "Config.DisableDashboardZeroConf",
    "type": "bool",
    "tag": "json:\"disable_dashboard_zeroconf\"",
    "doc": ""
  },
  {
    "versions": [
      "v3.0.0"
    ],
    "path": "Config.DisablePortWhiteList",
    "type": "bool",
    "tag": "json:\"disable_ports_whitelist\"",
    "doc": ""
  },
  {
    "versions": [
      "v3.0.0"
    ],
    "path": "Config.DisableRegexpCache",
    "type": "bool",
    "tag": "json:\"disable_regexp_cache\"",
    "doc": ""
  },
  {
    "versions": [
      "v3.0.0"
    ],
    "path": "Config.DisableVirtualPathBlobs",
    "type": "bool",
    "tag": "json:\"disable_virtual_path_blobs\"",
    "doc": ""
  },
  {
    "versions": [
      "v3.0.0"
    ],
    "path": "Config.DnsCache",
    "type": "DnsCacheConfig",
    "tag": "json:\"dns_cache\"",
    "doc": "Cache"
  },
  {
    "versions": [
      "v3.0.0"
    ],
    "path": "Config.EnableAPISegregation",
    "type": "bool",
    "tag": "json:\"enable_api_segregation\"",
    "doc": ""
  },
  {
    "versions": [
      "v3.0.0"
    ],
    "path": "Config.EnableAnalytics",
    "type": "bool",
    "tag": "json:\"enable_analytics\"",
    "doc": "Proxy analytics configuration"
  },
  {
    "versions": [
      "v3.0.0"
    ],
    "path": "Config.EnableBundleDownloader",
    "type": "bool",
    "tag": "bson:\"enable_bundle_downloader\" json:\"enable_bundle_downloader\"",
    "doc": "Middleware/Plugin Configuration"
  },
  {
    "versions": [
      "v3.0.0"
    ],
    "path": "Config.EnableCustomDomains",
    "type": "bool",
    "tag": "json:\"enable_custom_domains\"",
    "doc": ""
  },
  {
    "versions": [
      "v3.0.0"
    ],
    "path": "Config.EnableHashedKeysListing",
    "type": "bool",
    "tag": "json:\"enable_hashed_keys_listing\"",
    "doc": ""
  },
  {
    "versions": [
      "v3.0.0"
    ],
    "path": "Config.EnableJSVM",
    "type": "bool",
    "tag": "json:\"enable_jsvm\"",
    "doc": ""
  },
  {
    "versions": [
      "v3.0.0"
    ],
    "path": "Config.EnableKeyLogging",
    "type": "bool",
    "tag": "json:\"enable_key_logging\"",
    "doc": ""
  },
  {
    "versions": [
      "v3.0.0"
    ],
    "path": "Config.EnableNonTransactionalRateLimiter",
    "type": "bool",
    "tag": "json:\"enable_non_transactional_rate_limiter\"",
    "doc": "Rate Limiting Strategy"
  },
  {
    "versions": [
      "v3.0.0"
    ],
    "path": "Config.EnableRedisRollingLimiter",
    "type": "bool",
    "tag": "json:\"enable_redis_rolling_limiter\"",
    "doc": ""
  },
  {
    "versions": [
      "v3.0.0"
    ],
    "path": "Config.EnableSentinelRateLimiter",
    "type": "bool",
    "tag": "json:\"enable_sentinel_rate_limiter\"",
    "doc": ""
  },
  {
    "versions": [
      "v3.0.0"
    ],
    "path": "Config.EnableSeperateCacheStore",
    "type": "bool",
    "tag": "json:\"enable_separate_cache_store\"",
    "doc": ""
  },
  {
    "versions": [
      "v3.0.0"
    ],
    "path": "Config.EnforceOrgDataAge",
    "type": "bool",
    "tag": "json:\"enforce_org_data_age\"",
    "doc": "Organization configurations"
  },
  {
    "versions": [
      "v3.0.0"
    ],
    "path": "Config.EnforceOrgDataDetailLogging",
    "type": "bool",
    "tag": "json:\"enforce_org_data_detail_logging\"",
    "doc": ""
  },
  {
    "versions": [
      "v3.0.0"
    ],
    "path": "Config.EnforceOrgQuotas",
    "type": "bool",
    "tag": "json:\"enforce_org_quotas\"",
    "doc": ""
  },
  {
    "versions": [
      "v3.0.0"
    ],
    "path": "Config.EventHandlers",
    "type": "apidef.EventHandlerMetaConfig",
    "tag": "json:\"event_handlers\"",
    "doc": "Event System"
  },
  {
    "versions": [
      "v3.0.0"
    ],
    "path": "Config.EventTriggers",
    "type": "any",
    "tag": "json:\"event_trigers_defunct\"",
    "doc": ""
  },
  {
    "versions": [
      "v3.0.0"
    ],
    "path": "Config.EventTriggersDefunct",
    "type": "any",
    "tag": "json:\"event_triggers_defunct\"",
    "doc": ""
  },
  {
    "versions": [
      "v3.0.0"
    ],
    "path": "Config.ExperimentalProcessOrgOffThread",
    "type": "bool",
    "tag": "json:\"experimental_process_org_off_thread\"",
    "doc": ""
  },
  {
    "versions": [
      "v3.0.0"
    ],
    "path": "Config.ForceGlobalSessionLifetime",
    "type": "bool",
    "tag": "bson:\"force_global_session_lifetime\" json:\"force_global_session_lifetime\"",
    "doc": ""
  },
  {
    "versions": [
      "v3.0.0"
    ],
    "path": "Config.GlobalSessionLifetime",
    "type": "int64",
    "tag": "bson:\"global_session_lifetime\" json:\"global_session_lifetime\"",
    "doc": ""
  },
  {
    "versions": [
      "v3.0.0"
    ],
    "path": "Config.GraylogNetworkAddr",
    "type": "string",
    "tag": "json:\"graylog_network_addr\"",
    "doc": ""
  },
  {
    "versions": [
      "v3.0.0"
    ],
    "path": "Config.HTTPProfile",
    "type": "bool",
    "tag": "json:\"enable_http_profiler\"",
    "doc": ""
  },
  {
    "versions": [
      "v3.0.0"
    ],
    "path": "Config.HashKeyFunction",
    "type": "string",
    "tag": "json:\"hash_key_function\"",
    "doc": ""
  },
  {
    "versions": [
      "v3.0.0"
    ],
    "path": "Config.HashKeys",
    "type": "bool",
    "tag": "json:\"hash_keys\"",
    "doc": "Gateway Security Policies"
  },
  {
    "versions": [
      "v3.0.0"
    ],
    "path": "Config.HealthCheck",
    "type": "HealthCheckConfig",
    "tag": "json:\"health_check\"",
    "doc": ""
  },
  {
    "versions": [
      "v3.0.0"
    ],
    "path": "Config.HealthCheckEndpointName",
    "type": "string",
    "tag": "json:\"health_check_endpoint_name\"",
    "doc": ""
  },
  {
    "versions": [
      "v3.0.0"
    ],
    "path": "Config.HideGeneratorHeader",
    "type": "bool",
    "tag": "json:\"hide_generator_header\"",
    "doc": ""
  },
  {
    "versions": [
      "v3.0.0"
    ],
    "path": "Config.HostName",
    "type": "string",
    "tag": "json:\"hostname\"",
    "doc": ""
  },
  {
    "versions": [
      "v3.0.0"
    ],
    "path": "Config.HttpServerOptions",
    "type": "HttpServerOptionsConfig",
    "tag": "json:\"http_server_options\"",
    "doc": ""
  },
  {
    "versions": [
      "v3.0.0"
    ],
    "path": "Config.IgnoreEndpointCase",
    "type": "bool",
    "tag": "json:\"ignore_endpoint_case\"",
    "doc": ""
  },
  {
    "versions": [
      "v3.0.0"
    ],
    "path": "Config.JSVMTimeout",
    "type": "int",
    "tag": "json:\"jsvm_timeout\"",
    "doc": ""
  },
  {
    "versions": [
      "v3.0.0"
    ],
    "path": "Config.KV",
    "type": "struct{}",
    "tag": "json:\"kv\"",
    "doc": ""
  },
  {
    "versions": [
      "v3.0.0"
    ],
    "path": "Config.LegacyEnableAllowanceCountdown",
    "type": "bool",
    "tag": "bson:\"legacy_enable_allowance_countdown\" json:\"legacy_enable_allowance_countdown\"",
    "doc": ""
  },
  {
    "versions": [
      "v3.0.0"
    ],
    "path": "Config.ListenAddress",
    "type": "string",
    "tag": "json:\"listen_address\"",
    "doc": ""
  },
  {
    "versions": [
      "v3.0.0"
    ],
    "path": "Config.ListenPort",
    "type": "int",
    "tag": "json:\"listen_port\"",
    "doc": ""
  },
  {
    "versions": [
      "v3.0.0"
    ],
    "path": "Config.LivenessCheck",
    "type": "LivenessCheckConfig",
    "tag": "json:\"liveness_check\"",
    "doc": ""
  },
  {
    "versions": [
      "v3.0.0"
    ],
    "path": "Config.LocalSessionCache",
    "type": "LocalSessionCacheConf",
    "tag": "json:\"local_session_cache\"",
    "doc": ""
  },
  {
    "versions": [
      "v3.0.0"
    ],
    "path": "Config.LogLevel",
    "type": "string",
    "tag": "json:\"log_level\"",
    "doc": "Monitoring, Logging \u0026 Profiling"
  },
  {
    "versions": [
      "v3.0.0"
    ],
    "path": "Config.LogstashNetworkAddr",
    "type": "string",
    "tag": "json:\"logstash_network_addr\"",
    "doc": ""
  },
  {
    "versions": [
      "v3.0.0"
    ],
    "path": "Config.LogstashTransport",
    "type": "string",
    "tag": "json:\"logstash_transport\"",
    "doc": ""
  },
  {
    "versions": [
      "v3.0.0"
    ],
    "path": "Config.ManagementNode",
    "type": "bool",
    "tag": "json:\"management_node\"",
    "doc": ""
  },
  {
    "versions": [
      "v3.0.0"
    ],
    "path": "Config.MaxConnTime",
    "type": "int64",
    "tag": "json:\"max_conn_time\"",
    "doc": ""
  },
  {
    "versions": [
      "v3.0.0"
    ],
    "path": "Config.MaxIdleConns",
    "type": "int",
    "tag": "bson:\"max_idle_connections\" json:\"max_idle_connections\"",
    "doc": "Client-Gateway Configuration"
  },
  {
    "versions": [
      "v3.0.0"
    ],
    "path": "Config.MaxIdleConnsPerHost",
    "type": "int",
    "tag": "bson:\"max_idle_connections_per_host\" json:\"max_idle_connections_per_host\"",
    "doc": ""
  },
  {
    "versions": [
      "v3.0.0"
    ],
    "path": "Config.MiddlewarePath",
    "type": "string",
    "tag": "json:\"middleware_path\"",
    "doc": ""
  },
  {
    "versions": [
      "v3.0.0"
    ],
    "path": "Config.MinTokenLength",
    "type": "int",
    "tag": "json:\"min_token_length\"",
    "doc": ""
  },
  {
    "versions": [
      "v3.0.0"
    ],
    "path": "Config.Monitor",
    "type": "MonitorConfig",
    "tag": "json:\"monitor\"",
    "doc": ""
  },
  {
    "versions": [
      "v3.0.0"
    ],
    "path": "Config.NewRelic",
    "type": "NewRelicConfig",
    "tag": "json:\"newrelic\"",
    "doc": ""
  },
  {
    "versions": [
      "v3.0.0"
    ],
    "path": "Config.NodeSecret",
    "type": "string",
    "tag": "json:\"node_secret\"",
    "doc": ""
  },
  {
    "versions": [
      "v3.0.0"
    ],
    "path": "Config.OauthErrorStatusCode",
    "type": "int",
    "tag": "json:\"oauth_error_status_code\"",
    "doc": ""
  },
  {
    "versions": [
      "v3.0.0"
    ],
    "path": "Config.OauthRedirectUriSeparator",
    "type": "string",
    "tag": "json:\"oauth_redirect_uri_separator\"",
    "doc": ""
  },
  {
    "versions": [
      "v3.0.0"
    ],
    "path": "Config.OauthRefreshExpire",
    "type": "int64",
    "tag": "json:\"oauth_refresh_token_expire\"",
    "doc": ""
  },
  {
    "versions": [
      "v3.0.0"
    ],
    "path": "Config.OauthTokenExpire",
    "type": "int32",
    "tag": "json:\"oauth_token_expire\"",
    "doc": ""
  },
  {
    "versions": [
      "v3.0.0"
    ],
    "path": "Config.OauthTokenExpiredRetainPeriod",
    "type": "int32",
    "tag": "json:\"oauth_token_expired_retain_period\"",
    "doc": ""
  },
  {
    "versions": [
      "v3.0.0"
    ],
    "path": "Config.OriginalPath",
    "type": "string",
    "tag": "json:\"-\"",
    "doc": "OriginalPath is the path to the config file that was read. If\nnone was found, it's the path to the default config file that\nwas written."
  },
  {
    "versions": [
      "v3.0.0"
    ],
    "path": "Config.OverrideMessages",
    "type": "map[string]TykError",
    "tag": "bson:\"override_messages\" json:\"override_messages\"",
    "doc": "OverrideMessages is used to override returned API error codes and messages."
  },
  {
    "versions": [
      "v3.0.0"
    ],
    "path": "Config.PIDFileLocation",
    "type": "string",
    "tag": "json:\"pid_file_location\"",
    "doc": ""
  },
  {
    "versions": [
      "v3.0.0"
    ],
    "path": "Config.Policies",
    "type": "PoliciesConfig",
    "tag": "json:\"policies\"",
    "doc": ""
  },
  {
    "versions": [
      "v3.0.0"
    ],
    "path": "Config.PortWhiteList",
    "type": "map[string]PortWhiteList",
    "tag": "json:\"ports_whitelist\"",
    "doc": "Defines the ports that will be available for the api services to bind to.\nThis is a map of protocol to PortWhiteList. This allows per protocol\nconfigurations."
  },
  {
    "versions": [
      "v3.0.0"
    ],
    "path": "Config.ProxyCloseConnections",
    "type": "bool",
    "tag": "json:\"proxy_close_connections\"",
    "doc": ""
  },
  {
    "versions": [
      "v3.0.0"
    ],
    "path": "Config.ProxyDefaultTimeout",
    "type": "float64",
    "tag": "json:\"proxy_default_timeout\"",
    "doc": ""
  },
  {
    "versions": [
      "v3.0.0"
    ],
    "path": "Config.ProxyEnableHttp2",
    "type": "bool",
    "tag": "json:\"proxy_enable_http2\"",
    "doc": ""
  },
  {
    "versions": [
      "v3.0.0"
    ],
    "path": "Config.ProxySSLCipherSuites",
    "type": "[]string",
    "tag": "json:\"proxy_ssl_ciphers\"",
    "doc": ""
  },
  {
    "versions": [
      "v3.0.0"
    ],
    "path": "Config.ProxySSLDisableRenegotiation",
    "type": "bool",
    "tag": "json:\"proxy_ssl_disable_renegotiation\"",
    "doc": ""
  },
  {
    "versions": [
      "v3.0.0"
    ],
    "path": "Config.ProxySSLInsecureSkipVerify",
    "type": "bool",
    "tag": "json:\"proxy_ssl_insecure_skip_verify\"",
    "doc": ""
  },
  {
    "versions": [
      "v3.0.0"
    ],
    "path": "Config.ProxySSLMinVersion",
    "type": "uint16",
    "tag": "json:\"proxy_ssl_min_version\"",
    "doc": ""
  },
  {
    "versions": [
      "v3.0.0"
    ],
    "path": "Config.PublicKeyPath",
    "type": "string",
    "tag": "json:\"public_key_path\"",
    "doc": ""
  },
  {
    "versions": [
      "v3.0.0"
    ],
    "path": "Config.RegexpCacheExpire",
    "type": "int32",
    "tag": "json:\"regexp_cache_expire\"",
    "doc": ""
  },
  {
    "versions": [
      "v3.0.0"
    ],
    "path": "Config.ReloadWaitTime",
    "type": "int",
    "tag": "bson:\"reload_wait_time\" json:\"reload_wait_time\"",
    "doc": ""
  },
  {
    "versions": [
      "v3.0.0"
    ],
    "path": "Config.SSLForceCommonNameCheck",
    "type": "bool",
    "tag": "json:\"ssl_force_common_name_check\"",
    "doc": ""
  },
  {
    "versions": [
      "v3.0.0"
    ],
    "path": "Config.Secret",
    "type": "string",
    "tag": "json:\"secret\"",
    "doc": ""
  },
  {
    "versions": [
      "v3.0.0"
    ],
    "path": "Config.Secrets",
    "type": "map[string]string",
    "tag": "json:\"secrets\"",
    "doc": "Secrets are key-value pairs that can be accessed in the dashboard via \"secrets://\""
  },
  {
    "versions": [
      "v3.0.0"
    ],
    "path": "Config.Security",
    "type": "SecurityConfig",
    "tag": "json:\"security\"",
    "doc": ""
  },
  {
    "versions": [
      "v3.0.0"
    ],
    "path": "Config.SentryCode",
    "type": "string",
    "tag": "json:\"sentry_code\"",
    "doc": ""
  },
  {
    "versions": [
      "v3.0.0"
    ],
    "path": "Config.SentryLogLevel",
    "type": "string",
    "tag": "json:\"sentry_log_level\"",
    "doc": ""
  },
  {
    "versions": [
      "v3.0.0"
    ],
    "path": "Config.ServiceDiscovery",
    "type": "ServiceDiscoveryConf",
    "tag": "json:\"service_discovery\"",
    "doc": "Gateway-Service Configuration"
  },
  {
    "versions": [
      "v3.0.0"
    ],
    "path": "Config.SessionUpdateBufferSize",
    "type": "int",
    "tag": "json:\"session_update_buffer_size\"",
    "doc": ""
  },
  {
    "versions": [
      "v3.0.0"
    ],
    "path": "Config.SessionUpdatePoolSize",
    "type": "int",
    "tag": "json:\"session_update_pool_size\"",
    "doc": "TODO: These config options are not documented - What do they do?"
  },
  {
    "versions": [
      "v3.0.0"
    ],
    "path": "Config.SlaveOptions",
    "type": "SlaveOptionsConfig",
    "tag": "json:\"slave_options\"",
    "doc": "Slave Configurations"
  },
  {
    "versions": [
      "v3.0.0"
    ],
    "path": "Config.StatsdConnectionString",
    "type": "string",
    "tag": "json:\"statsd_connection_string\"",
    "doc": ""
  },
  {
    "versions": [
      "v3.0.0"
    ],
    "path": "Config.StatsdPrefix",
    "type": "string",
    "tag": "json:\"statsd_prefix\"",
    "doc": ""
  },
  {
    "versions": [
      "v3.0.0"
    ],
    "path": "Config.Storage",
    "type": "StorageOptionsConf",
    "tag": "json:\"storage\"",
    "doc": ""
  },
  {
    "versions": [
      "v3.0.0"
    ],
    "path": "Config.SuppressRedisSignalReload",
    "type": "bool",
    "tag": "json:\"suppress_redis_signal_reload\"",
    "doc": ""
  },
  {
    "versions": [
      "v3.0.0"
    ],
    "path": "Config.SupressDefaultOrgStore",
    "type": "bool",
    "tag": "json:\"suppress_default_org_store\"",
    "doc": ""
  },
  {
    "versions": [
      "v3.0.0"
    ],
    "path": "Config.SyslogNetworkAddr",
    "type": "string",
    "tag": "json:\"syslog_network_addr\"",
    "doc": ""
  },
  {
    "versions": [
      "v3.0.0"
    ],
    "path": "Config.SyslogTransport",
    "type": "string",
    "tag": "json:\"syslog_transport\"",
    "doc": ""
  },
  {
    "versions": [
      "v3.0.0"
    ],
    "path": "Config.TemplatePath",
    "type": "string",
    "tag": "json:\"template_path\"",
    "doc": ""
  },
  {
    "versions": [
      "v3.0.0"
    ],
    "path": "Config.Tracer",
    "type": "Tracer",
    "tag": "json:\"tracing\"",
    "doc": ""
  },
  {
    "versions": [
      "v3.0.0"
    ],
    "path": "Config.Track404Logs",
    "type": "bool",
    "tag": "json:\"track_404_logs\"",
    "doc": ""
  },
  {
    "versions": [
      "v3.0.0"
    ],
    "path": "Config.TykJSPath",
    "type": "string",
    "tag": "json:\"tyk_js_path\"",
    "doc": ""
  },
  {
    "versions": [
      "v3.0.0"
    ],
    "path": "Config.UptimeTests",
    "type": "UptimeTestsConfig",
    "tag": "json:\"uptime_tests\"",
    "doc": ""
  },
  {
    "versions": [
      "v3.0.0"
    ],
    "path": "Config.UseAsyncSessionWrite",
    "type": "bool",
    "tag": "json:\"optimisations_use_async_session_write\"",
    "doc": ""
  },
  {
    "versions": [
      "v3.0.0"
    ],
    "path": "Config.UseDBAppConfigs",
    "type": "bool",
    "tag": "json:\"use_db_app_configs\"",
    "doc": "Dashboard Configurations"
  },
  {
    "versions": [
      "v3.0.0"
    ],
    "path": "Config.UseGraylog",
    "type": "bool",
    "tag": "json:\"use_graylog\"",
    "doc": ""
  },
  {
    "versions": [
      "v3.0.0"
    ],
    "path": "Config.UseLogstash",
    "type": "bool",
    "tag": "json:\"use_logstash\"",
    "doc": ""
  },
  {
    "versions": [
      "v3.0.0"
    ],
    "path": "Config.UseRedisLog",
    "type": "bool",
    "tag": "json:\"use_redis_log\"",
    "doc": ""
  },
  {
    "versions": [
      "v3.0.0"
    ],
    "path": "Config.UseSentry",
    "type": "bool",
    "tag": "json:\"use_sentry\"",
    "doc": ""
  },
  {
    "versions": [
      "v3.0.0"
    ],
    "path": "Config.UseSyslog",
    "type": "bool",
    "tag": "json:\"use_syslog\"",
    "doc": ""
  },
  {
    "versions": [
      "v3.0.0"
    ],
    "path": "Config.VersionHeader",
    "type": "string",
    "tag": "json:\"version_header\"",
    "doc": ""
  },
  {
    "versions": [
      "v3.0.0"
    ],
    "path": "ConsulConfig.Address",
    "type": "string",
    "tag": "json:\"address\"",
    "doc": "Address is the address of the Consul server"
  },
  {
    "versions": [
      "v3.0.0"
    ],
    "path": "ConsulConfig.Datacenter",
    "type": "string",
    "tag": "json:\"datacenter\"",
    "doc": "Datacenter to use. If not provided, the default agent datacenter is used."
  },
  {
    "versions": [
      "v3.0.0"
    ],
    "path": "ConsulConfig.HttpAuth",
    "type": "struct{}",
    "tag": "json:\"http_auth\"",
    "doc": "HttpAuth is the auth info to use for http access."
  },
  {
    "versions": [
      "v3.0.0"
    ],
    "path": "ConsulConfig.Scheme",
    "type": "string",
    "tag": "json:\"scheme\"",
    "doc": "Scheme is the URI scheme for the Consul server"
  },
  {
    "versions": [
      "v3.0.0"
    ],
    "path": "ConsulConfig.TLSConfig",
    "type": "struct{}",
    "tag": "json:\"tls_config\"",
    "doc": ""
  },
  {
    "versions": [
      "v3.0.0"
    ],
    "path": "ConsulConfig.Token",
    "type": "string",
    "tag": "json:\"token\"",
    "doc": "Token is used to provide a per-request ACL token\nwhich overrides the agent's default token."
  },
  {
    "versions": [
      "v3.0.0"
    ],
    "path": "ConsulConfig.WaitTime",
    "type": "time.Duration",
    "tag": "json:\"wait_time\"",
    "doc": "WaitTime limits how long a Watch will block. If not provided,\nthe agent default values will be used."
  },
  {
    "versions": [
      "v3.0.0"
    ],
    "path": "DBAppConfOptionsConfig.ConnectionString",
    "type": "string",
    "tag": "json:\"connection_string\"",
    "doc": ""
  },
  {
    "versions": [
      "v3.0.0"
    ],
    "path": "DBAppConfOptionsConfig.NodeIsSegmented",
    "type": "bool",
    "tag": "json:\"node_is_segmented\"",
    "doc": ""
  },
  {
    "versions": [
      "v3.0.0"
    ],
    "path": "DBAppConfOptionsConfig.Tags",
    "type": "[]string",
    "tag": "json:\"tags\"",
    "doc": ""
  },
  {
    "versions": [
      "v3.0.0"
    ],
    "path": "DnsCacheConfig.CheckInterval",
    "type": "int64",
    "tag": "json:\"-\" ignored:\"true\"",
    "doc": ""
  },
  {
    "versions": [
      "v3.0.0"
    ],
    "path": "DnsCacheConfig.Enabled",
    "type": "bool",
    "tag": "json:\"enabled\"",
    "doc": ""
  },
  {
    "versions": [
      "v3.0.0"
    ],
    "path": "DnsCacheConfig.MultipleIPsHandleStrategy",
    "type": "IPsHandleStrategy",
    "tag": "json:\"multiple_ips_handle_strategy\"",
    "doc": ""
  },
  {
    "versions": [
      "v3.0.0"
    ],
    "path": "DnsCacheConfig.TTL",
    "type": "int64",
    "tag": "json:\"ttl\"",
    "doc": ""
  },
  {
    "versions": [
      "v3.0.0"
    ],
    "path": "EventMessage.Meta",
    "type": "",
    "tag": "",
    "doc": ""
  },
  {
    "versions": [
      "v3.0.0"
    ],
    "path": "EventMessage.TimeStamp",
    "type": "string",
    "tag": "",
    "doc": ""
  },
  {
    "versions": [
      "v3.0.0"
    ],
    "path": "EventMessage.Type",
    "type": "apidef.TykEvent",
    "tag": "",
    "doc": ""
  },
  {
    "versions": [
      "v3.0.0"
    ],
    "path": "HealthCheckConfig.EnableHealthChecks",
    "type": "bool",
    "tag": "json:\"enable_health_checks\"",
    "doc": ""
  },
  {
    "versions": [
      "v3.0.0"
    ],
    "path": "HealthCheckConfig.HealthCheckValueTimeout",
    "type": "int64",
    "tag": "json:\"health_check_value_timeouts\"",
    "doc": ""
  },
  {
    "versions": [
      "v3.0.0"
    ],
    "path": "HttpServerOptionsConfig.Certificates",
    "type": "[]CertData",
    "tag": "json:\"certificates\"",
    "doc": ""
  },
  {
    "versions": [
      "v3.0.0"
    ],
    "path": "HttpServerOptionsConfig.Ciphers",
    "type": "[]string",
    "tag": "json:\"ssl_ciphers\"",
    "doc": ""
  },
  {
    "versions": [
      "v3.0.0"
    ],
    "path": "HttpServerOptionsConfig.EnableHttp2",
    "type": "bool",
    "tag": "json:\"enable_http2\"",
    "doc": ""
  },
  {
    "versions": [
      "v3.0.0"
    ],
    "path": "HttpServerOptionsConfig.EnableWebSockets",
    "type": "bool",
    "tag": "json:\"enable_websockets\"",
    "doc": ""
  },
  {
    "versions": [
      "v3.0.0"
    ],
    "path": "HttpServerOptionsConfig.FlushInterval",
    "type": "int",
    "tag": "json:\"flush_interval\"",
    "doc": ""
  },
  {
    "versions": [
      "v3.0.0"
    ],
    "path": "HttpServerOptionsConfig.MinVersion",
    "type": "uint16",
    "tag": "json:\"min_version\"",
    "doc": ""
  },
  {
    "versions": [
      "v3.0.0"
    ],
    "path": "HttpServerOptionsConfig.OverrideDefaults",
    "type": "bool",
    "tag": "json:\"override_defaults\"",
    "doc": ""
  },
  {
    "versions": [
      "v3.0.0"
    ],
    "path": "HttpServerOptionsConfig.ReadTimeout",
    "type": "int",
    "tag": "json:\"read_timeout\"",
    "doc": ""
  },
  {
    "versions": [
      "v3.0.0"
    ],
    "path": "HttpServerOptionsConfig.SSLCertificates",
    "type": "[]string",
    "tag": "json:\"ssl_certificates\"",
    "doc": ""
  },
  {
    "versions": [
      "v3.0.0"
    ],
    "path": "HttpServerOptionsConfig.SSLInsecureSkipVerify",
    "type": "bool",
    "tag": "json:\"ssl_insecure_skip_verify\"",
    "doc": ""
  },
  {
    "versions": [
      "v3.0.0"
    ],
    "path": "HttpServerOptionsConfig.ServerName",
    "type": "string",
    "tag": "json:\"server_name\"",
    "doc": ""
  },
  {
    "versions": [
      "v3.0.0"
    ],
    "path": "HttpServerOptionsConfig.SkipTargetPathEscaping",
    "type": "bool",
    "tag": "json:\"skip_target_path_escaping\"",
    "doc": ""
  },
  {
    "versions": [
      "v3.0.0"
    ],
    "path": "HttpServerOptionsConfig.SkipURLCleaning",
    "type": "bool",
    "tag": "json:\"skip_url_cleaning\"",
    "doc": ""
  },
  {
    "versions": [
      "v3.0.0"
    ],
    "path": "HttpServerOptionsConfig.UseLE_SSL",
    "type": "bool",
    "tag": "json:\"use_ssl_le\"",
    "doc": ""
  },
  {
    "versions": [
      "v3.0.0"
    ],
    "path": "HttpServerOptionsConfig.UseSSL",
    "type": "bool",
    "tag": "json:\"use_ssl\"",
    "doc": ""
  },
  {
    "versions": [
      "v3.0.0"
    ],
    "path": "HttpServerOptionsConfig.WriteTimeout",
    "type": "int",
    "tag": "json:\"write_timeout\"",
    "doc": ""
  },
  {
    "versions": [
      "v3.0.0"
    ],
    "path": "LivenessCheckConfig.CheckDuration",
    "type": "time.Duration",
    "tag": "json:\"check_duration\"",
    "doc": ""
  },
  {
    "versions": [
      "v3.0.0"
    ],
    "path": "LocalSessionCacheConf.CacheSessionEviction",
    "type": "int",
    "tag": "json:\"cached_session_eviction\"",
    "doc": ""
  },
  {
    "versions": [
      "v3.0.0"
    ],
    "path": "LocalSessionCacheConf.CachedSessionTimeout",
    "type": "int",
    "tag": "json:\"cached_session_timeout\"",
    "doc": ""
  },
  {
    "versions": [
      "v3.0.0"
    ],
    "path": "LocalSessionCacheConf.DisableCacheSessionState",
    "type": "bool",
    "tag": "json:\"disable_cached_session_state\"",
    "doc": ""
  },
  {
    "versions": [
      "v3.0.0"
    ],
    "path": "MonitorConfig.Config",
    "type": "WebHookHandlerConf",
    "tag": "json:\"configuration\"",
    "doc": ""
  },
  {
    "versions": [
      "v3.0.0"
    ],
    "path": "MonitorConfig.EnableTriggerMonitors",
    "type": "bool",
    "tag": "json:\"enable_trigger_monitors\"",
    "doc": ""
  },
  {
    "versions": [
      "v3.0.0"
    ],
    "path": "MonitorConfig.GlobalTriggerLimit",
    "type": "float64",
    "tag": "json:\"global_trigger_limit\"",
    "doc": ""
  },
  {
    "versions": [
      "v3.0.0"
    ],
    "path": "MonitorConfig.MonitorOrgKeys",
    "type": "bool",
    "tag": "json:\"monitor_org_keys\"",
    "doc": ""
  },
  {
    "versions": [
      "v3.0.0"
    ],
    "path": "MonitorConfig.MonitorUserKeys",
    "type": "bool",
    "tag": "json:\"monitor_user_keys\"",
    "doc": ""
  },
  {
    "versions": [
      "v3.0.0"
    ],
    "path": "NewRelicConfig.AppName",
    "type": "string",
    "tag": "json:\"app_name\"",
    "doc": ""
  },
  {
    "versions": [
      "v3.0.0"
    ],
    "path": "NewRelicConfig.LicenseKey",
    "type": "string",
    "tag": "json:\"license_key\"",
    "doc": ""
  },
  {
    "versions": [
      "v3.0.0"
    ],
    "path": "NormaliseURLPatterns.Custom",
    "type": "[]*regexp.Regexp",
    "tag": "",
    "doc": ""
  },
  {
    "versions": [
      "v3.0.0"
    ],
    "path": "NormaliseURLPatterns.IDs",
    "type": "regexp.Regexp",
    "tag": "",
    "doc": ""
  },
  {
    "versions": [
      "v3.0.0"
    ],
    "path": "NormaliseURLPatterns.UUIDs",
    "type": "regexp.Regexp",
    "tag": "",
    "doc": ""
  },
  {
    "versions": [
      "v3.0.0"
    ],
    "path": "NormalisedURLConfig.CompiledPatternSet",
    "type": "NormaliseURLPatterns",
    "tag": "json:\"-\"",
    "doc": ""
  },
  {
    "versions": [
      "v3.0.0"
    ],
    "path": "NormalisedURLConfig.Custom",
    "type": "[]string",
    "tag": "json:\"custom_patterns\"",
    "doc": ""
  },
  {
    "versions": [
      "v3.0.0"
    ],
    "path": "NormalisedURLConfig.Enabled",
    "type": "bool",
    "tag": "json:\"enabled\"",
    "doc": ""
  },
  {
    "versions": [
      "v3.0.0"
    ],
    "path": "NormalisedURLConfig.NormaliseNumbers",
    "type": "bool",
    "tag": "json:\"normalise_numbers\"",
    "doc": ""
  },
  {
    "versions": [
      "v3.0.0"
    ],
    "path": "NormalisedURLConfig.NormaliseUUIDs",
    "type": "bool",
    "tag": "json:\"normalise_uuids\"",
    "doc": ""
  },
  {
    "versions": [
      "v3.0.0"
    ],
    "path": "PoliciesConfig.AllowExplicitPolicyID",
    "type": "bool",
    "tag": "json:\"allow_explicit_policy_id\"",
    "doc": ""
  },
  {
    "versions": [
      "v3.0.0"
    ],
    "path": "PoliciesConfig.PolicyConnectionString",
    "type": "string",
    "tag": "json:\"policy_connection_string\"",
    "doc": ""
  },
  {
    "versions": [
      "v3.0.0"
    ],
    "path": "PoliciesConfig.PolicyRecordName",
    "type": "string",
    "tag": "json:\"policy_record_name\"",
    "doc": ""
  },
  {
    "versions": [
      "v3.0.0"
    ],
    "path": "PoliciesConfig.PolicySource",
    "type": "string",
    "tag": "json:\"policy_source\"",
    "doc": ""
  },
  {
    "versions": [
      "v3.0.0"
    ],
    "path": "PortRange.From",
    "type": "int",
    "tag": "json:\"from\"",
    "doc": ""
  },
  {
    "versions": [
      "v3.0.0"
    ],
    "path": "PortRange.To",
    "type": "int",
    "tag": "json:\"to\"",
    "doc": ""
  },
  {
    "versions": [
      "v3.0.0"
    ],
    "path": "PortWhiteList.Ports",
    "type": "[]int",
    "tag": "json:\"ports,omitempty\"",
    "doc": ""
  },
  {
    "versions": [
      "v3.0.0"
    ],
    "path": "PortWhiteList.Ranges",
    "type": "[]PortRange",
    "tag": "json:\"ranges,omitempty\"",
    "doc": ""
  },
  {
    "versions": [
      "v3.0.0"
    ],
    "path": "Reporter.BatchSize",
    "type": "int",
    "tag": "json:\"batch_size\"",
    "doc": ""
  },
  {
    "versions": [
      "v3.0.0"
    ],
    "path": "Reporter.MaxBacklog",
    "type": "int",
    "tag": "json:\"max_backlog\"",
    "doc": ""
  },
  {
    "versions": [
      "v3.0.0"
    ],
    "path": "Reporter.URL",
    "type": "string",
    "tag": "json:\"url\"",
    "doc": "URL connection url to the zipkin server"
  },
  {
    "versions": [
      "v3.0.0"
    ],
    "path": "Sampler.Mod",
    "type": "uint64",
    "tag": "json:\"mod\"",
    "doc": "Mod is only used when sampler is mod"
  },
  {
    "versions": [
      "v3.0.0"
    ],
    "path": "Sampler.Name",
    "type": "string",
    "tag": "json:\"name\"",
    "doc": "Name is the name of the sampler to use. Options are\n\n\t\"boundary\"\nis appropriate for high-traffic instrumentation who\nprovision random trace ids, and make the sampling decision only once.\nIt defends against nodes in the cluster selecting exactly the same ids.\n\n\t\"count\"\nis appropriate for low-traffic instrumentation or\nthose who do not provision random trace ids. It is not appropriate for\ncollectors as the sampling decision isn't idempotent (consistent based\non trace id).\n\n\"mod\"\nprovides a generic type Sampler"
  },
  {
    "versions": [
      "v3.0.0"
    ],
    "path": "Sampler.Rate",
    "type": "float64",
    "tag": "json:\"rate\"",
    "doc": "Rate is used by both \"boundary\" and \"count\" samplers"
  },
  {
    "versions": [
      "v3.0.0"
    ],
    "path": "Sampler.Salt",
    "type": "int64",
    "tag": "json:\"salt\"",
    "doc": "Salt is used by \"boundary\" sampler"
  },
  {
    "versions": [
      "v3.0.0"
    ],
    "path": "SecurityConfig.Certificates",
    "type": "CertificatesConfig",
    "tag": "json:\"certificates\"",
    "doc": ""
  },
  {
    "versions": [
      "v3.0.0"
    ],
    "path": "SecurityConfig.ControlAPIUseMutualTLS",
    "type": "bool",
    "tag": "json:\"control_api_use_mutual_tls\"",
    "doc": ""
  },
  {
    "versions": [
      "v3.0.0"
    ],
    "path": "SecurityConfig.PinnedPublicKeys",
    "type": "map[string]string",
    "tag": "json:\"pinned_public_keys\"",
    "doc": ""
  },
  {
    "versions": [
      "v3.0.0"
    ],
    "path": "SecurityConfig.PrivateCertificateEncodingSecret",
    "type": "string",
    "tag": "json:\"private_certificate_encoding_secret\"",
    "doc": ""
  },
  {
    "versions": [
      "v3.0.0"
    ],
    "path": "ServiceDiscoveryConf.DefaultCacheTimeout",
    "type": "int",
    "tag": "json:\"default_cache_timeout\"",
    "doc": ""
  },
  {
    "versions": [
      "v3.0.0"
    ],
    "path": "ServicePort.Port",
    "type": "int",
    "tag": "json:\"port\"",
    "doc": ""
  },
  {
    "versions": [
      "v3.0.0"
    ],
    "path": "ServicePort.Protocol",
    "type": "string",
    "tag": "json:\"protocol\"",
    "doc": ""
  },
  {
    "versions": [
      "v3.0.0"
    ],
    "path": "SlaveOptionsConfig.APIKey",
    "type": "string",
    "tag": "json:\"api_key\"",
    "doc": ""
  },
  {
    "versions": [
      "v3.0.0"
    ],
    "path": "SlaveOptionsConfig.BindToSlugsInsteadOfListenPaths",
    "type": "bool",
    "tag": "json:\"bind_to_slugs\"",
    "doc": ""
  },
  {
    "versions": [
      "v3.0.0"
    ],
    "path": "SlaveOptionsConfig.CallTimeout",
    "type": "int",
    "tag": "json:\"call_timeout\"",
    "doc": ""
  },
  {
    "versions": [
      "v3.0.0"
    ],
    "path": "SlaveOptionsConfig.ConnectionString",
    "type": "string",
    "tag": "json:\"connection_string\"",
    "doc": ""
  },
  {
    "versions": [
      "v3.0.0"
    ],
    "path": "SlaveOptionsConfig.DisableKeySpaceSync",
    "type": "bool",
    "tag": "json:\"disable_keyspace_sync\"",
    "doc": ""
  },
  {
    "versions": [
      "v3.0.0"
    ],
    "path": "SlaveOptionsConfig.EnableRPCCache",
    "type": "bool",
    "tag": "json:\"enable_rpc_cache\"",
    "doc": ""
  },
  {
    "versions": [
      "v3.0.0"
    ],
    "path": "SlaveOptionsConfig.GroupID",
    "type": "string",
    "tag": "json:\"group_id\"",
    "doc": ""
  },
  {
    "versions": [
      "v3.0.0"
    ],
    "path": "SlaveOptionsConfig.PingTimeout",
    "type": "int",
    "tag": "json:\"ping_timeout\"",
    "doc": ""
  },
  {
    "versions": [
      "v3.0.0"
    ],
    "path": "SlaveOptionsConfig.RPCKey",
    "type": "string",
    "tag": "json:\"rpc_key\"",
    "doc": ""
  },
  {
    "versions": [
      "v3.0.0"
    ],
    "path": "SlaveOptionsConfig.RPCPoolSize",
    "type": "int",
    "tag": "json:\"rpc_pool_size\"",
    "doc": ""
  },
  {
    "versions": [
      "v3.0.0"
    ],
    "path": "SlaveOptionsConfig.SSLInsecureSkipVerify",
    "type": "bool",
    "tag": "json:\"ssl_insecure_skip_verify\"",
    "doc": ""
  },
  {
    "versions": [
      "v3.0.0"
    ],
    "path": "SlaveOptionsConfig.UseRPC",
    "type": "bool",
    "tag": "json:\"use_rpc\"",
    "doc": ""
  },
  {
    "versions": [
      "v3.0.0"
    ],
    "path": "SlaveOptionsConfig.UseSSL",
    "type": "bool",
    "tag": "json:\"use_ssl\"",
    "doc": ""
  },
  {
    "versions": [
      "v3.0.0"
    ],
    "path": "StorageOptionsConf.Addrs",
    "type": "[]string",
    "tag": "json:\"addrs\"",
    "doc": ""
  },
  {
    "versions": [
      "v3.0.0"
    ],
    "path": "StorageOptionsConf.Database",
    "type": "int",
    "tag": "json:\"database\"",
    "doc": ""
  },
  {
    "versions": [
      "v3.0.0"
    ],
    "path": "StorageOptionsConf.EnableCluster",
    "type": "bool",
    "tag": "json:\"enable_cluster\"",
    "doc": ""
  },
  {
    "versions": [
      "v3.0.0"
    ],
    "path": "StorageOptionsConf.Host",
    "type": "string",
    "tag": "json:\"host\"",
    "doc": ""
  },
  {
    "versions": [
      "v3.0.0"
    ],
    "path": "StorageOptionsConf.Hosts",
    "type": "map[string]string",
    "tag": "json:\"hosts\"",
    "doc": ""
  },
  {
    "versions": [
      "v3.0.0"
    ],
    "path": "StorageOptionsConf.MasterName",
    "type": "string",
    "tag": "json:\"master_name\"",
    "doc": ""
  },
  {
    "versions": [
      "v3.0.0"
    ],
    "path": "StorageOptionsConf.MaxActive",
    "type": "int",
    "tag": "json:\"optimisation_max_active\"",
    "doc": ""
  },
  {
    "versions": [
      "v3.0.0"
    ],
    "path": "StorageOptionsConf.MaxIdle",
    "type": "int",
    "tag": "json:\"optimisation_max_idle\"",
    "doc": ""
  },
  {
    "versions": [
      "v3.0.0"
    ],
    "path": "StorageOptionsConf.Password",
    "type": "string",
    "tag": "json:\"password\"",
    "doc": ""
  },
  {
    "versions": [
      "v3.0.0"
    ],
    "path": "StorageOptionsConf.Port",
    "type": "int",
    "tag": "json:\"port\"",
    "doc": ""
  },
  {
    "versions": [
      "v3.0.0"
    ],
    "path": "StorageOptionsConf.SSLInsecureSkipVerify",
    "type": "bool",
    "tag": "json:\"ssl_insecure_skip_verify\"",
    "doc": ""
  },
  {
    "versions": [
      "v3.0.0"
    ],
    "path": "StorageOptionsConf.Timeout",
    "type": "int",
    "tag": "json:\"timeout\"",
    "doc": ""
  },
  {
    "versions": [
      "v3.0.0"
    ],
    "path": "StorageOptionsConf.Type",
    "type": "string",
    "tag": "json:\"type\"",
    "doc": ""
  },
  {
    "versions": [
      "v3.0.0"
    ],
    "path": "StorageOptionsConf.UseSSL",
    "type": "bool",
    "tag": "json:\"use_ssl\"",
    "doc": ""
  },
  {
    "versions": [
      "v3.0.0"
    ],
    "path": "StorageOptionsConf.Username",
    "type": "string",
    "tag": "json:\"username\"",
    "doc": ""
  },
  {
    "versions": [
      "v3.0.0"
    ],
    "path": "Tracer.Enabled",
    "type": "bool",
    "tag": "json:\"enabled\"",
    "doc": "If true then this tracer will be activated and all tracing data will be sent\nto this tracer.NoOp tracer is used otherwise which collects traces but\ndiscard them."
  },
  {
    "versions": [
      "v3.0.0"
    ],
    "path": "Tracer.Name",
    "type": "string",
    "tag": "json:\"name\"",
    "doc": "The name of the tracer to initialize. For instance appdash, to use appdash\ntracer"
  },
  {
    "versions": [
      "v3.0.0"
    ],
    "path": "Tracer.Options",
    "type": "map[string]interface{}",
    "tag": "json:\"options\"",
    "doc": "Key value pairs used to initialize the tracer. These are tracer specific,\neach tracer requires different options to operate. Please see trace package\nfor options required by supported tracer implementation."
  },
  {
    "versions": [
      "v3.0.0"
    ],
    "path": "TykError.Code",
    "type": "int",
    "tag": "json:\"code\"",
    "doc": ""
  },
  {
    "versions": [
      "v3.0.0"
    ],
    "path": "TykError.Message",
    "type": "string",
    "tag": "json:\"message\"",
    "doc": ""
  },
  {
    "versions": [
      "v3.0.0"
    ],
    "path": "UptimeTestsConfig.Config",
    "type": "UptimeTestsConfigDetail",
    "tag": "json:\"config\"",
    "doc": ""
  },
  {
    "versions": [
      "v3.0.0"
    ],
    "path": "UptimeTestsConfig.Disable",
    "type": "bool",
    "tag": "json:\"disable\"",
    "doc": ""
  },
  {
    "versions": [
      "v3.0.0"
    ],
    "path": "UptimeTestsConfigDetail.CheckerPoolSize",
    "type": "int",
    "tag": "json:\"checker_pool_size\"",
    "doc": ""
  },
  {
    "versions": [
      "v3.0.0"
    ],
    "path": "UptimeTestsConfigDetail.EnableUptimeAnalytics",
    "type": "bool",
    "tag": "json:\"enable_uptime_analytics\"",
    "doc": ""
  },
  {
    "versions": [
      "v3.0.0"
    ],
    "path": "UptimeTestsConfigDetail.FailureTriggerSampleSize",
    "type": "int",
    "tag": "json:\"failure_trigger_sample_size\"",
    "doc": ""
  },
  {
    "versions": [
      "v3.0.0"
    ],
    "path": "UptimeTestsConfigDetail.TimeWait",
    "type": "int",
    "tag": "json:\"time_wait\"",
    "doc": ""
  },
  {
    "versions": [
      "v3.0.0"
    ],
    "path": "VaultConfig.Address",
    "type": "string",
    "tag": "json:\"address\"",
    "doc": "Address is the address of the Vault server. This should be a complete\nURL such as \"http://vault.example.com\"."
  },
  {
    "versions": [
      "v3.0.0"
    ],
    "path": "VaultConfig.AgentAddress",
    "type": "string",
    "tag": "json:\"agent_address\"",
    "doc": "AgentAddress is the address of the local Vault agent. This should be a\ncomplete URL such as \"http://vault.example.com\"."
  },
  {
    "versions": [
      "v3.0.0"
    ],
    "path": "VaultConfig.KVVersion",
    "type": "int",
    "tag": "json:\"kv_version\"",
    "doc": "KVVersion is the version number of Vault. Usually defaults to 2"
  },
  {
    "versions": [
      "v3.0.0"
    ],
    "path": "VaultConfig.MaxRetries",
    "type": "int",
    "tag": "json:\"max_retries\"",
    "doc": "MaxRetries controls the maximum number of times to retry when a vault\nserer occurs"
  },
  {
    "versions": [
      "v3.0.0"
    ],
    "path": "VaultConfig.Timeout",
    "type": "time.Duration",
    "tag": "json:\"timeout\"",
    "doc": ""
  },
  {
    "versions": [
      "v3.0.0"
    ],
    "path": "VaultConfig.Token",
    "type": "string",
    "tag": "json:\"token\"",
    "doc": "Token is the vault root token"
  },
  {
    "versions": [
      "v3.0.0"
    ],
    "path": "WebHookHandlerConf.EventTimeout",
    "type": "int64",
    "tag": "bson:\"event_timeout\" json:\"event_timeout\"",
    "doc": ""
  },
  {
    "versions": [
      "v3.0.0"
    ],
    "path": "WebHookHandlerConf.HeaderList",
    "type": "map[string]string",
    "tag": "bson:\"header_map\" json:\"header_map\"",
    "doc": ""
  },
  {
    "versions": [
      "v3.0.0"
    ],
    "path": "WebHookHandlerConf.Method",
    "type": "string",
    "tag": "bson:\"method\" json:\"method\"",
    "doc": ""
  },
  {
    "versions": [
      "v3.0.0"
    ],
    "path": "WebHookHandlerConf.TargetPath",
    "type": "string",
    "tag": "bson:\"target_path\" json:\"target_path\"",
    "doc": ""
  },
  {
    "versions": [
      "v3.0.0"
    ],
    "path": "WebHookHandlerConf.TemplatePath",
    "type": "string",
    "tag": "bson:\"template_path\" json:\"template_path\"",
    "doc": ""
  },
  {
    "versions": [
      "v3.0.0"
    ],
    "path": "ZipkinConfig.Reporter",
    "type": "Reporter",
    "tag": "json:\"reporter\"",
    "doc": ""
  },
  {
    "versions": [
      "v3.0.0"
    ],
    "path": "ZipkinConfig.Sampler",
    "type": "Sampler",
    "tag": "json:\"sampler\"",
    "doc": ""
  },
  {
    "versions": [
      "v3.0.10",
      "v3.2.0",
      "v4.0.0",
      "v5.0.0"
    ],
    "path": "AnalyticsConfigConfig.EnableMultipleAnalyticsKeys",
    "type": "bool",
    "tag": "json:\"enable_multiple_analytics_keys\"",
    "doc": "Set this to `true` to have Tyk automatically divide the analytics records in multiple analytics keys.\nThis is especially useful when `storage.enable_cluster` is set to `true` since it will distribute the analytic keys across all the cluster nodes."
  },
  {
    "versions": [
      "v3.0.10",
      "v4.0.0",
      "v5.0.0"
    ],
    "path": "AnalyticsConfigConfig.PurgeInterval",
    "type": "float32",
    "tag": "json:\"purge_interval\"",
    "doc": "You can set the interval length on how often the tyk Gateway will purge analytics data. This value is in seconds and defaults to 10 seconds."
  },
  {
    "versions": [
      "v3.0.10",
      "v3.2.0",
      "v4.0.0",
      "v5.0.0"
    ],
    "path": "Config.AnalyticsStorage",
    "type": "StorageOptionsConf",
    "tag": "json:\"analytics_storage\"",
    "doc": ""
  },
  {
    "versions": [
      "v3.0.10",
      "v3.1.1",
      "v3.2.0",
      "v4.0.0",
      "v5.0.0"
    ],
    "path": "Config.DRLEnableSentinelRateLimiter",
    "type": "bool",
    "tag": "json:\"drl_enable_sentinel_rate_limiter\"",
    "doc": "Controls which algorthm to use as a fallback when your distributed rate limiter can't be used."
  },
  {
    "versions": [
      "v3.0.10",
      "v3.2.0",
      "v4.0.0",
      "v5.0.0"
    ],
    "path": "Config.EnableSeperateAnalyticsStore",
    "type": "bool",
    "tag": "json:\"enable_separate_analytics_store\"",
    "doc": "Enable separate analytics storage. Used together with `analytics_storage`."
  },
  {
    "versions": [
      "v3.0.10",
      "v3.2.0",
      "v4.0.0",
      "v5.0.0"
    ],
    "path": "Config.HashKeyFunctionFallback",
    "type": "[]string",
    "tag": "json:\"hash_key_function_fallback\"",
    "doc": "Specify your previous key hashing algorithm if you migrated from one algorithm to another."
  },
  {
    "versions": [
      "v3.0.10",
      "v3.1.1",
      "v3.2.0",
      "v4.0.0",
      "v5.0.0"
    ],
    "path": "Config.IgnoreCanonicalMIMEHeaderKey",
    "type": "bool",
    "tag": "json:\"ignore_canonical_mime_header_key\"",
    "doc": "When enabled Tyk ignores the canonical format of the MIME header keys.\n\nFor example when a request header with a “my-header” key is injected using “global_headers”, the upstream would typically get it as “My-Header”. When this flag is enabled it will be sent as “my-header” instead.\n\nCurrent support is limited to JavaScript plugins, global header injection, virtual endpoint and JQ transform header rewrites.\nThis functionality doesn’t affect headers that are sent by the HTTP client and the default formatting will apply in this case.\n\nFor technical details refer to the [CanonicalMIMEHeaderKey](https://golang.org/pkg/net/textproto/#CanonicalMIMEHeaderKey) functionality in the Go documentation."
  },
  {
    "versions": [
      "v3.0.10",
      "v3.1.0",
      "v4.0.0",
      "v5.0.0"
    ],
    "path": "SlaveOptionsConfig.KeySpaceSyncInterval",
    "type": "float32",
    "tag": "json:\"key_space_sync_interval\"",
    "doc": "You can use this to set a period for which the Gateway will check if there are changes in keys that must be synchronized. If this value is not set then it will default to 10 seconds."
  },
  {
    "versions": [
      "v3.0.10",
      "v3.1.1",
      "v3.2.0",
      "v4.0.0",
      "v5.0.0"
    ],
    "path": "StorageOptionsConf.SentinelPassword",
    "type": "string",
    "tag": "json:\"sentinel_password\"",
    "doc": "Redis sentinel password"
  },
  {
    "versions": [
      "v3.0.10",
      "v3.1.1",
      "v3.2.0",
      "v4.0.0",
      "v5.0.0"
    ],
    "path": "UptimeTestsConfig.PollerGroup",
    "type": "string",
    "tag": "json:\"poller_group\"",
    "doc": "If you have multiple Gateway clusters connected to the same Redis instance, you need to set a unique poller group for each cluster."
  },
  {
    "versions": [
      "v3.0.11",
      "v4.0.10",
      "v4.1.0",
      "v4.2.0",
      "v4.3.0",
      "v5.0.0"
    ],
    "path": "SlaveOptionsConfig.RPCCertCacheExpiration",
    "type": "float32",
    "tag": "json:\"rpc_cert_cache_expiration\"",
    "doc": "RPCCertCacheExpiration defines the expiration time of the rpc cache that stores the certificates, defined in seconds"
  },
  {
    "versions": [
      "v3.0.11",
      "v4.0.10",
      "v4.1.0",
      "v4.2.0",
      "v4.3.0",
      "v5.0.0"
    ],
    "path": "SlaveOptionsConfig.RPCGlobalCacheExpiration",
    "type": "float32",
    "tag": "json:\"rpc_global_cache_expiration\"",
    "doc": "RPCKeysCacheExpiration defines the expiration time of the rpc cache that stores the keys, defined in seconds"
  },
  {
    "versions": [
      "v3.2.0"
    ],
    "path": "Config.JWTSSLInsecureSkipVerify",
    "type": "bool",
    "tag": "json:\"jwt_ssl_insecure_skip_verify\"",
    "doc": "SSL options for JWT middleware."
  },
  {
    "versions": [
      "v3.2.0"
    ],
    "path": "Config.ProxySSLMaxVersion",
    "type": "uint16",
    "tag": "json:\"proxy_ssl_max_version\"",
    "doc": ""
  },
  {
    "versions": [
      "v3.2.0"
    ],
    "path": "HttpServerOptionsConfig.MaxVersion",
    "type": "uint16",
    "tag": "json:\"max_version\"",
    "doc": ""
  },
  {
    "versions": [
      "v4.0.10",
      "v4.1.0",
      "v4.2.0",
      "v4.3.0",
      "v5.0.0"
    ],
    "path": "Config.BasicAuthHashKeyFunction",
    "type": "string",
    "tag": "json:\"basic_auth_hash_key_function\"",
    "doc": "Specify the Key hashing algorithm for \"basic auth\". Possible values: murmur64, murmur128, sha256, bcrypt.\nWill default to \"bcrypt\" if not set."
  },
  {
    "versions": [
      "v4.0.10",
      "v4.1.0",
      "v4.2.0",
      "v4.3.0",
      "v5.0.0"
    ],
    "path": "HttpServerOptionsConfig.EnableStrictRoutes",
    "type": "bool",
    "tag": "json:\"enable_strict_routes\"",
    "doc": "EnableStrictRoutes changes the routing to avoid nearest-neighbour requests on overlapping routes\n\n- if disabled, `/apple` will route to `/app`, the current default behavior,\n- if enabled, `/app` only responds to `/app`, `/app/` and `/app/*` but not `/apple`\n\nRegular expressions and parameterized routes will be left alone regardless of this setting."
  },
  {
    "versions": [
      "v4.0.13",
      "v5.0.0"
    ],
    "path": "HttpServerOptionsConfig.SkipClientCAAnnouncement",
    "type": "bool",
    "tag": "json:\"skip_client_ca_announcement\"",
    "doc": "When mTLS enabled, this option allows to skip client CA announcement in the TLS handshake.\nThis option is useful when you have a lot of ClientCAs and you want to reduce the handshake overhead, as some clients can hit TLS handshake limits.\nThis option does not give any hints to the client, on which certificate to pick (but this is very rare situation when it is required)"
  },
  {
    "versions": [
      "v4.0.13",
      "v5.0.1",
      "v5.1.0",
      "v5.2.0"
    ],
    "path": "NewRelicConfig.EnableDistributedTracing",
    "type": "bool",
    "tag": "json:\"enable_distributed_tracing\"",
    "doc": "Enable distributed tracing"
  },
  {
    "versions": [
      "v4.0.14",
      "v5.0.3",
      "v5.1.0",
      "v5.2.0"
    ],
    "path": "CoProcessConfig.GRPCAuthority",
    "type": "string",
    "tag": "json:\"grpc_authority\"",
    "doc": "Authority used in GRPC connection"
  },
  {
    "versions": [
      "v4.0.14",
      "v4.3.5",
      "v5.0.3",
      "v5.1.1",
      "v5.2.0"
    ],
    "path": "DBAppConfOptionsConfig.ConnectionTimeout",
    "type": "int",
    "tag": "json:\"connection_timeout\"",
    "doc": "Set the timeout for your Dashboard connection. Defaults to 30 seconds. In seconds."
  },
  {
    "versions": [
      "v4.1.0"
    ],
    "path": "AnalyticsConfigConfig.SerializerType",
    "type": "string",
    "tag": "json:\"serializer_type\"",
    "doc": "Determines the serialization engine for analytics. Available options: msgpack, and protobuf. By default, msgpack."
  },
  {
    "versions": [
      "v4.1.0"
    ],
    "path": "PoliciesConfig.PolicyPath",
    "type": "string",
    "tag": "json:\"policy_path\"",
    "doc": "This option is used for storing a policies  if `policies.policy_source` is set to `file`.\nit should be some existing file path on hard drive"
  },
  {
    "versions": [
      "v4.2.0"
    ],
    "path": "Config.SessionLifetimeRespectsKeyExpiration",
    "type": "bool",
    "tag": "bson:\"session_lifetime_respects_key_expiration\" json:\"session_lifetime_respects_key_expiration\"",
    "doc": "SessionLifetimeRespectsKeyExpiration respects the key expiration time when the session lifetime is less than the key expiration. That is, Redis waits the key expiration for physical removal."
  },
  {
    "versions": [
      "v4.2.1",
      "v4.3.0",
      "v5.0.0"
    ],
    "path": "SlaveOptionsConfig.SynchroniserEnabled",
    "type": "bool",
    "tag": "json:\"synchroniser_enabled\"",
    "doc": "SynchroniserEnabled enable this config if MDCB has enabled the synchoniser. If disabled then it will ignore signals to synchonise recources"
  },
  {
    "versions": [
      "v4.3.8",
      "v5.0.6",
      "v5.2.1"
    ],
    "path": "Config.ReloadInterval",
    "type": "int64",
    "tag": "json:\"reload_interval\"",
    "doc": "ReloadInterval defines a duration in seconds within which the gateway responds to a reload event.\nThe value defaults to 1, values lower than 1 are ignored."
  },
  {
    "versions": [
      "v5.0.4",
      "v5.1.1",
      "v5.2.0"
    ],
    "path": "Config.DisableKeyActionsByUsername",
    "type": "bool",
    "tag": "json:\"disable_key_actions_by_username\"",
    "doc": "DisableKeyActionsByUsername disables key search by username."
  },
  {
    "versions": [
      "v5.0.6",
      "v5.2.1"
    ],
    "path": "Config.ResourceSync",
    "type": "ResourceSyncConfig",
    "tag": "json:\"resource_sync\"",
    "doc": "ResourceSync configures mitigation strategy in case sync fails."
  },
  {
    "versions": [
      "v5.0.6",
      "v5.2.1"
    ],
    "path": "ResourceSyncConfig.Interval",
    "type": "int",
    "tag": "json:\"interval\"",
    "doc": "Interval configures the interval in seconds between each retry on a resource sync error."
  },
  {
    "versions": [
      "v5.0.6",
      "v5.2.1"
    ],
    "path": "ResourceSyncConfig.RetryAttempts",
    "type": "int",
    "tag": "json:\"retry_attempts\"",
    "doc": "RetryAttempts configures the number of retry attempts before returning on a resource sync."
  },
  {
    "versions": [
      "v5.1.0"
    ],
    "path": "HttpServerOptionsConfig.MaxRequestBodySize",
    "type": "int64",
    "tag": "json:\"max_request_body_size\"",
    "doc": "MaxRequestBodySize configures a maximum size limit for request body size (in bytes) for all APIs on the Gateway.\n\nTyk Gateway will evaluate all API requests against this size limit and will respond with HTTP 413 status code if the body of the request is larger.\n\nTwo methods are used to perform the comparison:\n - If the API Request contains the `Content-Length` header, this is directly compared against `MaxRequestBodySize`.\n - If the `Content-Length` header is not provided, the Request body is read in chunks to compare total size against `MaxRequestBodySize`.\n\nA value of zero (default) means that no maximum is set and API requests will not be tested.\n\nSee more information about setting request size limits here:\nhttps://tyk.io/docs/basic-config-and-security/control-limit-traffic/request-size-limits/#maximum-request-sizes"
  },
  {
    "versions": [
      "v5.2.0"
    ],
    "path": "Config.OpenTelemetry",
    "type": "otel.OpenTelemetry",
    "tag": "json:\"opentelemetry\"",
    "doc": "Section for configuring Opentelemetry"
  },
  {
    "versions": [
      "v5.2.2"
    ],
    "path": "NormaliseURLPatterns.ULIDs",
    "type": "regexp.Regexp",
    "tag": "",
    "doc": ""
  },
  {
    "versions": [
      "v5.2.2"
    ],
    "path": "NormalisedURLConfig.NormaliseULIDs",
    "type": "bool",
    "tag": "json:\"normalise_ulids\"",
    "doc": "Each ULID will be replaced with a placeholder {ulid}"
  }
]
