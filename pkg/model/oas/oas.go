package oas

// This code is autogenerated by exp/cmd/schema-gen, do not modify.

import (
	"github.com/lonelycode/osin"

	"github.com/TykTechnologies/storage/persistent/model"
	"github.com/TykTechnologies/tyk/apidef"
)

type OAuthProvider struct {
	JWT JWTValidation `bson:"jwt,omitempty" json:"jwt,omitempty"`

	Introspection Introspection `bson:"introspection,omitempty" json:"introspection,omitempty"`
}

type JWTValidation struct {
	// Enabled enables OAuth access token validation by introspection to a third party.
	Enabled bool `bson:"enabled" json:"enabled"`

	// SigningMethod to verify signing method used in jwt - allowed values HMAC/RSA/ECDSA.
	SigningMethod string `bson:"signingMethod" json:"signingMethod"`

	// Source is the secret to verify signature, it could be one among:
	// - a base64 encoded static secret,
	// - a valid JWK url in plain text,
	// - a valid JWK url in base64 encoded format.
	Source string `bson:"source" json:"source"`

	// IdentityBaseField is the identity claim name.
	IdentityBaseField string `bson:"identityBaseField,omitempty" json:"identityBaseField,omitempty"`

	// IssuedAtValidationSkew is the clock skew to be considered while validating iat claim.
	IssuedAtValidationSkew uint64 `bson:"issuedAtValidationSkew,omitempty" json:"issuedAtValidationSkew,omitempty"`

	// NotBeforeValidationSkew is the clock skew to be considered while validating nbf claim.
	NotBeforeValidationSkew uint64 `bson:"notBeforeValidationSkew,omitempty" json:"notBeforeValidationSkew,omitempty"`

	// ExpiresAtValidationSkew is the clock skew to be considered while validating exp claim.
	ExpiresAtValidationSkew uint64 `bson:"expiresAtValidationSkew,omitempty" json:"expiresAtValidationSkew,omitempty"`
}

type Introspection struct {
	// Enabled enables OAuth access token validation by introspection to a third party.
	Enabled bool `bson:"enabled" json:"enabled"`

	// URL is the URL of the third party provider's introspection endpoint.
	URL string `bson:"url" json:"url"`

	// ClientID is the public identifier for the client, acquired from the third party.
	ClientID string `bson:"clientId" json:"clientId"`

	// ClientSecret is a secret known only to the client and the authorization server, acquired from the third party.
	ClientSecret string `bson:"clientSecret" json:"clientSecret"`

	// IdentityBaseField is the key showing where to find the user id in the claims. If it is empty, the `sub` key is looked at.
	IdentityBaseField string `bson:"identityBaseField,omitempty" json:"identityBaseField,omitempty"`

	// Cache is the caching mechanism for introspection responses.
	Cache IntrospectionCache `bson:"cache" json:"cache"`
}

type IntrospectionCache struct {
	// Enabled enables the caching mechanism for introspection responses.
	Enabled bool `bson:"enabled" json:"enabled"`

	// Timeout is the duration in seconds of how long the cached value stays.
	// For introspection caching, it is suggested to use a short interval.
	Timeout int64 `bson:"timeout" json:"timeout"`
}

type ExternalOAuth struct {
	Enabled bool `bson:"enabled" json:"enabled"` // required

	Providers []OAuthProvider `bson:"providers" json:"providers"` // required
}

type EndpointPostPlugins []EndpointPostPlugin

// APIDef is struct to hold both OAS and Classic forms of an API definition.
type APIDef struct {
	OAS OAS

	Classic apidef.APIDefinition
}

// Allowance describes allowance actions and behaviour.
type Allowance struct {
	// Enabled is a boolean flag, if set to `true`, then individual allowances (allow, block, ignore) will be enforced.
	Enabled bool `bson:"enabled" json:"enabled"`

	// IgnoreCase is a boolean flag, If set to `true`, checks for requests allowance will be case insensitive.
	IgnoreCase bool `bson:"ignoreCase,omitempty" json:"ignoreCase,omitempty"`
}

// AllowanceType holds the valid allowance types values.
type AllowanceType int

// AuthSource defines an authentication source.
type AuthSource struct {
	// Enabled enables the auth source.
	// Tyk classic API definition: `auth_configs[X].use_param/use_cookie`
	Enabled bool `bson:"enabled" json:"enabled"` // required

	// Name is the name of the auth source.
	// Tyk classic API definition: `auth_configs[X].param_name/cookie_name`
	Name string `bson:"name,omitempty" json:"name,omitempty"`
}

// AuthSources defines authentication source configuration: headers, cookies and query parameters.
//
// Tyk classic API definition: `auth_configs{}`.
type AuthSources struct {
	// Header contains configurations for the header value auth source, it is enabled by default.
	//
	// Tyk classic API definition: `auth_configs[x].header`
	Header AuthSource `bson:"header,omitempty" json:"header,omitempty"`

	// Cookie contains configurations for the cookie value auth source.
	//
	// Tyk classic API definition: `auth_configs[x].cookie`
	Cookie AuthSource `bson:"cookie,omitempty" json:"cookie,omitempty"`

	// Query contains configurations for the query parameters auth source.
	//
	// Tyk classic API definition: `auth_configs[x].query`
	Query AuthSource `bson:"query,omitempty" json:"query,omitempty"`
}

// Authentication types contains configuration about the authentication methods and security policies applied to requests.
type Authentication struct {
	// Enabled makes the API protected when one of the authentication modes is enabled.
	//
	// Tyk classic API definition: `!use_keyless`.
	Enabled bool `bson:"enabled" json:"enabled"` // required

	// StripAuthorizationData ensures that any security tokens used for accessing APIs are stripped and not leaked to the upstream.
	//
	// Tyk classic API definition: `strip_auth_data`.
	StripAuthorizationData bool `bson:"stripAuthorizationData,omitempty" json:"stripAuthorizationData,omitempty"`

	// BaseIdentityProvider enables multi authentication mechanism and provides the session object that determines rate limits, ACL rules and quotas.
	// It should be set to one of the following:
	//
	// - `auth_token`
	// - `hmac_key`
	// - `basic_auth_user`
	// - `jwt_claim`
	// - `oidc_user`
	// - `oauth_key`
	// - `custom_auth`
	//
	// Tyk classic API definition: `base_identity_provided_by`.
	BaseIdentityProvider apidef.AuthTypeEnum `bson:"baseIdentityProvider,omitempty" json:"baseIdentityProvider,omitempty"`

	// HMAC contains the configurations related to HMAC authentication mode.
	//
	// Tyk classic API definition: `auth_configs["hmac"]`
	HMAC HMAC `bson:"hmac,omitempty" json:"hmac,omitempty"`

	// OIDC contains the configurations related to OIDC authentication mode.
	//
	// Tyk classic API definition: `auth_configs["oidc"]`
	OIDC OIDC `bson:"oidc,omitempty" json:"oidc,omitempty"`

	// Custom contains the configurations related to Custom authentication mode.
	//
	// Tyk classic API definition: `auth_configs["coprocess"]`
	Custom CustomPluginAuthentication `bson:"custom,omitempty" json:"custom,omitempty"`

	// SecuritySchemes contains security schemes definitions.
	SecuritySchemes SecuritySchemes `bson:"securitySchemes,omitempty" json:"securitySchemes,omitempty"`
}

// AuthenticationPlugin holds the configuration for custom authentication plugin.
type AuthenticationPlugin struct {
	// Enabled enables custom authentication plugin.
	Enabled bool `bson:"enabled" json:"enabled"` // required.

	// FunctionName is the name of authentication method.
	FunctionName string `bson:"functionName" json:"functionName"` // required.

	// Path is the path to shared object file in case of gopluign mode or path to js code in case of otto auth plugin.
	Path string `bson:"path" json:"path"`

	// RawBodyOnly if set to true, do not fill body in request or response object.
	RawBodyOnly bool `bson:"rawBodyOnly,omitempty" json:"rawBodyOnly,omitempty"`

	// IDExtractor configures ID extractor with coprocess custom authentication.
	IDExtractor IDExtractor `bson:"idExtractor,omitempty" json:"idExtractor,omitempty"`
}

// Basic type holds configuration values related to http basic authentication.
type Basic struct {
	// Enabled enables the basic authentication mode.
	// Tyk classic API definition: `use_basic_auth`
	Enabled bool `bson:"enabled" json:"enabled"` // required

	// DisableCaching disables the caching of basic authentication key.
	// Tyk classic API definition: `basic_auth.disable_caching`
	DisableCaching bool `bson:"disableCaching,omitempty" json:"disableCaching,omitempty"`

	// CacheTTL is the TTL for a cached basic authentication key in seconds.
	// Tyk classic API definition: `basic_auth.cache_ttl`
	CacheTTL int `bson:"cacheTTL,omitempty" json:"cacheTTL,omitempty"`

	// ExtractCredentialsFromBody helps to extract username and password from body. In some cases, like dealing with SOAP,
	// user credentials can be passed via request body.
	ExtractCredentialsFromBody ExtractCredentialsFromBody `bson:"extractCredentialsFromBody,omitempty" json:"extractCredentialsFromBody,omitempty"`
}

// CORS holds configuration for cross-origin resource sharing.
type CORS struct {
	// Enabled is a boolean flag, if set to `true`, this option enables CORS processing.
	//
	// Tyk classic API definition: `CORS.enable`.
	Enabled bool `bson:"enabled" json:"enabled"` // required

	// MaxAge indicates how long (in seconds) the results of a preflight request can be cached. The default is 0 which stands for no max age.
	//
	// Tyk classic API definition: `CORS.max_age`.
	MaxAge int `bson:"maxAge,omitempty" json:"maxAge,omitempty"`

	// AllowCredentials indicates whether the request can include user credentials like cookies,
	// HTTP authentication or client side SSL certificates.
	//
	// Tyk classic API definition: `CORS.allow_credentials`.
	AllowCredentials bool `bson:"allowCredentials,omitempty" json:"allowCredentials,omitempty"`

	// ExposedHeaders indicates which headers are safe to expose to the API of a CORS API specification.
	//
	// Tyk classic API definition: `CORS.exposed_headers`.
	ExposedHeaders []string `bson:"exposedHeaders,omitempty" json:"exposedHeaders,omitempty"`

	// AllowedHeaders holds a list of non simple headers the client is allowed to use with cross-domain requests.
	//
	// Tyk classic API definition: `CORS.allowed_headers`.
	AllowedHeaders []string `bson:"allowedHeaders,omitempty" json:"allowedHeaders,omitempty"`

	// OptionsPassthrough is a boolean flag. If set to `true`, it will proxy the CORS OPTIONS pre-flight
	// request directly to upstream, without authentication and any CORS checks. This means that pre-flight
	// requests generated by web-clients such as SwaggerUI or the Tyk Portal documentation system
	// will be able to test the API using trial keys.
	//
	// If your service handles CORS natively, then enable this option.
	//
	// Tyk classic API definition: `CORS.options_passthrough`.
	OptionsPassthrough bool `bson:"optionsPassthrough,omitempty" json:"optionsPassthrough,omitempty"`

	// Debug is a boolean flag, If set to `true`, this option produces log files for the CORS middleware.
	//
	// Tyk classic API definition: `CORS.debug`.
	Debug bool `bson:"debug,omitempty" json:"debug,omitempty"`

	// AllowedOrigins holds a list of origin domains to allow access from. Wildcards are also supported, e.g. `http://*.foo.com`
	//
	// Tyk classic API definition: `CORS.allowed_origins`.
	AllowedOrigins []string `bson:"allowedOrigins,omitempty" json:"allowedOrigins,omitempty"`

	// AllowedMethods holds a list of methods to allow access via.
	//
	// Tyk classic API definition: `CORS.allowed_methods`.
	AllowedMethods []string `bson:"allowedMethods,omitempty" json:"allowedMethods,omitempty"`
}

// Cache holds configuration for caching the requests.
type Cache struct {
	// Enabled turns global cache middleware on or off. It is still possible to enable caching on a per-path basis
	// by explicitly setting the endpoint cache middleware.
	//
	// Tyk classic API definition: `cache_options.enable_cache`
	Enabled bool `bson:"enabled" json:"enabled"` // required

	// Timeout is the TTL for a cached object in seconds.
	//
	// Tyk classic API definition: `cache_options.cache_timeout`
	Timeout int64 `bson:"timeout,omitempty" json:"timeout,omitempty"`

	// CacheAllSafeRequests caches responses to (`GET`, `HEAD`, `OPTIONS`) requests overrides per-path cache settings in versions,
	// applies across versions.
	//
	// Tyk classic API definition: `cache_options.cache_all_safe_requests`
	CacheAllSafeRequests bool `bson:"cacheAllSafeRequests,omitempty" json:"cacheAllSafeRequests,omitempty"`

	// CacheResponseCodes is an array of response codes which are safe to cache e.g. `404`.
	//
	// Tyk classic API definition: `cache_options.cache_response_codes`
	CacheResponseCodes []int `bson:"cacheResponseCodes,omitempty" json:"cacheResponseCodes,omitempty"`

	// CacheByHeaders allows header values to be used as part of the cache key.
	//
	// Tyk classic API definition: `cache_options.cache_by_headers`
	CacheByHeaders []string `bson:"cacheByHeaders,omitempty" json:"cacheByHeaders,omitempty"`

	// EnableUpstreamCacheControl instructs Tyk Cache to respect upstream cache control headers.
	//
	// Tyk classic API definition: `cache_options.enable_upstream_cache_control`
	EnableUpstreamCacheControl bool `bson:"enableUpstreamCacheControl,omitempty" json:"enableUpstreamCacheControl,omitempty"`

	// ControlTTLHeaderName is the response header which tells Tyk how long it is safe to cache the response for.
	//
	// Tyk classic API definition: `cache_options.cache_control_ttl_header`
	ControlTTLHeaderName string `bson:"controlTTLHeaderName,omitempty" json:"controlTTLHeaderName,omitempty"`
}

// CachePlugin holds the configuration for the cache plugins.
type CachePlugin struct {
	// Enabled is a boolean flag. If set to `true`, the advanced caching plugin will be enabled.
	Enabled bool `bson:"enabled" json:"enabled"`

	// CacheByRegex defines a regular expression used against the request body to produce a cache key.
	//
	// Example value: `\"id\":[^,]*` (quoted json value).
	CacheByRegex string `bson:"cacheByRegex,omitempty" json:"cacheByRegex,omitempty"`

	// CacheResponseCodes contains a list of valid response codes for responses that are okay to add to the cache.
	CacheResponseCodes []int `bson:"cacheResponseCodes,omitempty" json:"cacheResponseCodes,omitempty"`
}

// CertificatePinning holds the configuration about mapping of domains to pinned public keys.
type CertificatePinning struct {
	// Enabled is a boolean flag, if set to `true`, it enables certificate pinning for the API.
	//
	// Tyk classic API definition: `certificate_pinning_disabled`
	Enabled bool `bson:"enabled" json:"enabled"`

	// DomainToPublicKeysMapping maintains the mapping of domain to pinned public keys.
	//
	// Tyk classic API definition: `pinned_public_keys`
	DomainToPublicKeysMapping PinnedPublicKeys `bson:"domainToPublicKeysMapping" json:"domainToPublicKeysMapping"`
}

// ClientCertificates holds a list of client certificates which are allowed to make requests against the server.
type ClientCertificates struct {
	// Enabled enables static mTLS for the API.
	Enabled bool `bson:"enabled" json:"enabled"`

	// Allowlist is the list of client certificates which are allowed.
	Allowlist []string `bson:"allowlist" json:"allowlist"`
}

// ClientToPolicy contains a 1-1 mapping between Client ID and Policy ID.
type ClientToPolicy struct {
	// ClientID contains a Client ID.
	ClientID string `bson:"clientId,omitempty" json:"clientId,omitempty"`

	// PolicyID contains a Policy ID.
	PolicyID string `bson:"policyId,omitempty" json:"policyId,omitempty"`
}

// CustomPlugin configures custom plugin.
type CustomPlugin struct {
	// Enabled enables the custom pre plugin.
	Enabled bool `bson:"enabled" json:"enabled"` // required.

	// FunctionName is the name of authentication method.
	FunctionName string `bson:"functionName" json:"functionName"` // required.

	// Path is the path to shared object file in case of gopluign mode or path to js code in case of otto auth plugin.
	Path string `bson:"path" json:"path"`

	// RawBodyOnly if set to true, do not fill body in request or response object.
	RawBodyOnly bool `bson:"rawBodyOnly,omitempty" json:"rawBodyOnly,omitempty"`

	// RequireSession if set to true passes down the session information for plugins after authentication.
	// RequireSession is used only with JSVM custom middleware.
	RequireSession bool `bson:"requireSession,omitempty" json:"requireSession,omitempty"`
}

// CustomPluginAuthentication holds configuration for custom plugins.
type CustomPluginAuthentication struct {
	// Enabled enables the CustomPluginAuthentication authentication mode.
	//
	// Tyk classic API definition: `enable_coprocess_auth`/`use_go_plugin_auth`.
	Enabled bool `bson:"enabled" json:"enabled"` // required

	// Config contains configuration related to custom authentication plugin.
	// Tyk classic API definition: `custom_middleware.auth_check`.
	Config AuthenticationPlugin `bson:"config,omitempty" json:"config,omitempty"`
}

// CustomPlugins is a list of CustomPlugin.
type CustomPlugins []CustomPlugin

// Domain holds the configuration of the domain name the server should listen on.
type Domain struct {
	// Enabled allow/disallow the usage of the domain.
	Enabled bool `bson:"enabled" json:"enabled"`

	// Name is the name of the domain.
	Name string `bson:"name" json:"name"`
}

// DomainToCertificate holds a single mapping of domain name into a certificate.
type DomainToCertificate struct {
	// Domain contains the domain name.
	Domain string `bson:"domain" json:"domain"`

	// Certificate contains the certificate mapped to the domain.
	Certificate string `bson:"certificate" json:"certificate"`
}

// EndpointPostPlugin contains endpoint level post plugin configuration.
type EndpointPostPlugin struct {
	// Enabled enables post plugin.
	Enabled bool `bson:"enabled" json:"enabled"` // required.

	// Name is the name of plugin function to be executed.
	Name string `bson:"name" json:"name"` // required.

	// Path is the path to plugin.
	Path string `bson:"path" json:"path"` // required.
}

// EnforceTimeout holds the configuration for enforcing request timeouts.
type EnforceTimeout struct {
	// Enabled is a boolean flag. If set to `true`, requests will enforce a configured timeout.
	Enabled bool `bson:"enabled" json:"enabled"`

	// Value is the configured timeout in seconds.
	Value int `bson:"value" json:"value"`
}

// ExtractCredentialsFromBody configures extracting credentials from the request body.
type ExtractCredentialsFromBody struct {
	// Enabled enables extracting credentials from body.
	// Tyk classic API definition: `basic_auth.extract_from_body`
	Enabled bool `bson:"enabled" json:"enabled"` // required

	// UserRegexp is the regex for username e.g. `<User>(.*)</User>`.
	// Tyk classic API definition: `basic_auth.userRegexp`
	UserRegexp string `bson:"userRegexp,omitempty" json:"userRegexp,omitempty"`

	// PasswordRegexp is the regex for password e.g. `<Password>(.*)</Password>`.
	// Tyk classic API definition: `basic_auth.passwordRegexp`
	PasswordRegexp string `bson:"passwordRegexp,omitempty" json:"passwordRegexp,omitempty"`
}

// FieldDocError holds a list of errors.
type FieldDocError struct{}

// FieldInfo holds details about a field.
type FieldInfo struct {
	// Doc is field docs. comments that are not part of docs are excluded.
	Doc string `json:"doc"`

	// JSONName is the corresponding json name of the field.
	JSONName string `json:"json_name"`

	// JSONType valid json type if it was found
	JSONType string `json:"json_type"`

	// GoPath is the go path of this field starting from root object
	GoPath string `json:"go_path"`

	// MapKey is the map key type, if this field is a map
	MapKey string `json:"map_key,omitempty"`

	// IsArray reports if this field is an array.
	IsArray bool `json:"is_array"`
}

// FromOASExamples configures mock responses should be returned from OAS example responses.
type FromOASExamples struct {
	// Enabled enables getting a mock response from OAS examples or schemas documented in OAS.
	Enabled bool `bson:"enabled" json:"enabled"`

	// Code is the default HTTP response code that the gateway reads from the path responses documented in OAS.
	Code int `bson:"code,omitempty" json:"code,omitempty"`

	// ContentType is the default HTTP response body type that the gateway reads from the path responses documented in OAS.
	ContentType string `bson:"contentType,omitempty" json:"contentType,omitempty"`

	// ExampleName is the default example name among multiple path response examples documented in OAS.
	ExampleName string `bson:"exampleName,omitempty" json:"exampleName,omitempty"`
}

// GatewayTags holds a list of segment tags that should apply for a gateway.
type GatewayTags struct {
	// Enabled enables use of segment tags.
	Enabled bool `bson:"enabled" json:"enabled"`

	// Tags is a list of segment tags
	Tags []string `bson:"tags" json:"tags"`
}

// Global holds configuration applies globally: CORS and caching.
type Global struct {
	// PluginConfig contains the configuration related custom plugin bundles/driver.
	PluginConfig PluginConfig `bson:"pluginConfig,omitempty" json:"pluginConfig,omitempty"`

	// CORS contains the configuration related to cross origin resource sharing.
	// Tyk classic API definition: `CORS`.
	CORS CORS `bson:"cors,omitempty" json:"cors,omitempty"`

	// PrePlugin contains configuration related to custom pre-authentication plugin.
	// Tyk classic API definition: `custom_middleware.pre`.
	PrePlugin PrePlugin `bson:"prePlugin,omitempty" json:"prePlugin,omitempty"`

	// PostAuthenticationPlugin contains configuration related to custom post authentication plugin.
	// Tyk classic API definition: `custom_middleware.post_key_auth`.
	PostAuthenticationPlugin PostAuthenticationPlugin `bson:"postAuthenticationPlugin,omitempty" json:"postAuthenticationPlugin,omitempty"`

	// PostPlugin contains configuration related to custom post plugin.
	// Tyk classic API definition: `custom_middleware.post`.
	PostPlugin PostPlugin `bson:"postPlugin,omitempty" json:"postPlugin,omitempty"`

	// ResponsePlugin contains configuration related to custom post plugin.
	// Tyk classic API definition: `custom_middleware.response`.
	ResponsePlugin ResponsePlugin `bson:"responsePlugin,omitempty" json:"responsePlugin,omitempty"`

	// Cache contains the configurations related to caching.
	// Tyk classic API definition: `cache_options`.
	Cache Cache `bson:"cache,omitempty" json:"cache,omitempty"`
}

// HMAC holds the configuration for the HMAC authentication mode.
type HMAC struct {
	// Enabled enables the HMAC authentication mode.
	// Tyk classic API definition: `enable_signature_checking`
	Enabled bool `bson:"enabled" json:"enabled"` // required

	// AllowedAlgorithms is the array of HMAC algorithms which are allowed. Tyk supports the following HMAC algorithms:
	//
	// - `hmac-sha1`
	// - `hmac-sha256`
	// - `hmac-sha384`
	// - `hmac-sha512`
	//
	// and reads the value from algorithm header.
	//
	// Tyk classic API definition: `hmac_allowed_algorithms`
	AllowedAlgorithms []string `bson:"allowedAlgorithms,omitempty" json:"allowedAlgorithms,omitempty"`

	// AllowedClockSkew is the amount of milliseconds that will be tolerated for clock skew. It is used against replay attacks.
	// The default value is `0`, which deactivates clock skew checks.
	// Tyk classic API definition: `hmac_allowed_clock_skew`
	AllowedClockSkew float64 `bson:"allowedClockSkew,omitempty" json:"allowedClockSkew,omitempty"`
}

// Header holds a header name and value pair.
type Header struct {
	// Name is the name of the header.
	Name string `bson:"name" json:"name"`

	// Value is the value of the header.
	Value string `bson:"value" json:"value"`
}

// IDExtractor configures ID Extractor.
type IDExtractor struct {
	// Enabled enables ID extractor with coprocess authentication.
	Enabled bool `bson:"enabled" json:"enabled"` // required

	// Source is the source from which ID to be extracted from.
	Source apidef.IdExtractorSource `bson:"source" json:"source"` // required

	// With is the type of ID extractor to be used.
	With apidef.IdExtractorType `bson:"with" json:"with"` // required

	// Config holds the configuration specific to ID extractor type mentioned via With.
	Config IDExtractorConfig `bson:"config" json:"config"` // required
}

// IDExtractorConfig specifies the configuration for ID extractor.
type IDExtractorConfig struct {
	// HeaderName is the header name to extract ID from.
	HeaderName string `bson:"headerName,omitempty" json:"headerName,omitempty"`

	// FormParamName is the form parameter name to extract ID from.
	FormParamName string `bson:"formParamName,omitempty" json:"formParamName,omitempty"`

	// Regexp is the regular expression to match ID.
	Regexp string `bson:"regexp,omitempty" json:"regexp,omitempty"`

	// RegexpMatchIndex is the index from which ID to be extracted after a match.
	// Default value is 0, ie if regexpMatchIndex is not provided ID is matched from index 0.
	RegexpMatchIndex int `bson:"regexpMatchIndex,omitempty" json:"regexpMatchIndex,omitempty"`

	// XPathExp is the xpath expression to match ID.
	XPathExp string `bson:"xPathExp,omitempty" json:"xPathExp,omitempty"`
}

// Info contains the main metadata about the API definition.
type Info struct {
	// ID is the unique ID of the API.
	// Tyk classic API definition: `api_id`
	ID string `bson:"id" json:"id,omitempty"`

	// DBID is the unique database ID of the API.
	// Tyk classic API definition: `id`
	DBID model.ObjectID `bson:"dbId" json:"dbId,omitempty"`

	// OrgID is the ID of the organisation which the API belongs to.
	// Tyk classic API definition: `org_id`
	OrgID string `bson:"orgId" json:"orgId,omitempty"`

	// Name is the name of the API.
	// Tyk classic API definition: `name`
	Name string `bson:"name" json:"name"` // required

	// Expiration date.
	Expiration string `bson:"expiration,omitempty" json:"expiration,omitempty"`

	// State holds configuration about API definition states (active, internal).
	State State `bson:"state" json:"state"` // required

	// Versioning holds configuration for API versioning.
	Versioning Versioning `bson:"versioning,omitempty" json:"versioning,omitempty"`
}

// JWT holds the configuration for the JWT middleware.
type JWT struct {
	Enabled bool `bson:"enabled" json:"enabled"` // required

	Source string `bson:"source,omitempty" json:"source,omitempty"`

	SigningMethod string `bson:"signingMethod,omitempty" json:"signingMethod,omitempty"`

	IdentityBaseField string `bson:"identityBaseField,omitempty" json:"identityBaseField,omitempty"`

	SkipKid bool `bson:"skipKid,omitempty" json:"skipKid,omitempty"`

	PolicyFieldName string `bson:"policyFieldName,omitempty" json:"policyFieldName,omitempty"`

	ClientBaseField string `bson:"clientBaseField,omitempty" json:"clientBaseField,omitempty"`

	Scopes Scopes `bson:"scopes,omitempty" json:"scopes,omitempty"`

	DefaultPolicies []string `bson:"defaultPolicies,omitempty" json:"defaultPolicies,omitempty"`

	IssuedAtValidationSkew uint64 `bson:"issuedAtValidationSkew,omitempty" json:"issuedAtValidationSkew,omitempty"`

	NotBeforeValidationSkew uint64 `bson:"notBeforeValidationSkew,omitempty" json:"notBeforeValidationSkew,omitempty"`

	ExpiresAtValidationSkew uint64 `bson:"expiresAtValidationSkew,omitempty" json:"expiresAtValidationSkew,omitempty"`
}

// ListenPath represents the path the server should listen on.
type ListenPath struct {
	// Value is the value of the listen path e.g. `/api/` or `/` or `/httpbin/`.
	// Tyk classic API definition: `proxy.listen_path`
	Value string `bson:"value" json:"value"` // required

	// Strip removes the inbound listen path in the outgoing request. e.g. `http://acme.com/httpbin/get` where `httpbin`
	// is the listen path. The `httpbin` listen path which is used to identify the API loaded in Tyk is removed,
	// and the outbound request would be `http://httpbin.org/get`.
	// Tyk classic API definition: `proxy.strip_listen_path`
	Strip bool `bson:"strip,omitempty" json:"strip,omitempty"`
}

// Middleware holds configuration for middleware.
type Middleware struct {
	// Global contains the configurations related to the global middleware.
	Global Global `bson:"global,omitempty" json:"global,omitempty"`

	// Operations configuration.
	Operations Operations `bson:"operations,omitempty" json:"operations,omitempty"`
}

// MockResponse configures the mock responses.
type MockResponse struct {
	// Enabled enables the mock response middleware.
	Enabled bool `bson:"enabled" json:"enabled"`

	// Code is the HTTP response code that will be returned.
	Code int `bson:"code,omitempty" json:"code,omitempty"`

	// Body is the HTTP response body that will be returned.
	Body string `bson:"body,omitempty" json:"body,omitempty"`

	// Headers are the HTTP response headers that will be returned.
	Headers []Header `bson:"headers,omitempty" json:"headers,omitempty"`

	// FromOASExamples is the configuration to extract a mock response from OAS documentation.
	FromOASExamples FromOASExamples `bson:"fromOASExamples,omitempty" json:"fromOASExamples,omitempty"`
}

// MutualTLS holds configuration related to mTLS on APIs, domain to certificate mappings.
type MutualTLS struct {
	// Enabled enables/disables upstream mutual TLS auth for the API.
	// Tyk classic API definition: `upstream_certificates_disabled`
	Enabled bool `bson:"enabled" json:"enabled"`

	// DomainToCertificates maintains the mapping of domain to certificate.
	// Tyk classic API definition: `upstream_certificates`
	DomainToCertificates []DomainToCertificate `bson:"domainToCertificateMapping" json:"domainToCertificateMapping"`
}

// Notifications holds configuration for updates to keys.
type Notifications struct {
	// SharedSecret is the shared secret used in the notification request.
	SharedSecret string `bson:"sharedSecret,omitempty" json:"sharedSecret,omitempty"`

	// OnKeyChangeURL is the URL a request will be triggered against.
	OnKeyChangeURL string `bson:"onKeyChangeUrl,omitempty" json:"onKeyChangeUrl,omitempty"`
}

// OAS holds the upstream OAS definition as well as adds functionality like custom JSON marshalling.
type OAS struct{}

// OAuth configures the OAuth middleware.
type OAuth struct {
	Enabled bool `bson:"enabled" json:"enabled"` // required

	AllowedAuthorizeTypes []osin.AuthorizeRequestType `bson:"allowedAuthorizeTypes,omitempty" json:"allowedAuthorizeTypes,omitempty"`

	RefreshToken bool `bson:"refreshToken,omitempty" json:"refreshToken,omitempty"`

	AuthLoginRedirect string `bson:"authLoginRedirect,omitempty" json:"authLoginRedirect,omitempty"`

	Notifications Notifications `bson:"notifications,omitempty" json:"notifications,omitempty"`
}

// OIDC contains configuration for the OIDC authentication mode.
type OIDC struct {
	// Enabled enables the OIDC authentication mode.
	//
	// Tyk classic API definition: `use_openid`
	Enabled bool `bson:"enabled" json:"enabled"` // required

	// SegregateByClientId is a boolean flag. If set to `true, the policies will be applied to a combination of Client ID and User ID.
	//
	// Tyk classic API definition: `openid_options.segregate_by_client`.
	SegregateByClientId bool `bson:"segregateByClientId,omitempty" json:"segregateByClientId,omitempty"`

	// Providers contains a list of authorised providers and their Client IDs, and matched policies.
	//
	// Tyk classic API definition: `openid_options.providers`.
	Providers []Provider `bson:"providers,omitempty" json:"providers,omitempty"`

	// Scopes contains the defined scope claims.
	Scopes Scopes `bson:"scopes,omitempty" json:"scopes,omitempty"`
}

// Operation holds a request operation configuration, allowances, tranformations, caching, timeouts and validation.
type Operation struct {
	// Allow request by allowance.
	Allow Allowance `bson:"allow,omitempty" json:"allow,omitempty"`

	// Block request by allowance.
	Block Allowance `bson:"block,omitempty" json:"block,omitempty"`

	// IgnoreAuthentication ignores authentication on request by allowance.
	IgnoreAuthentication Allowance `bson:"ignoreAuthentication,omitempty" json:"ignoreAuthentication,omitempty"`

	// TransformRequestMethod allows you to transform the method of a request.
	TransformRequestMethod TransformRequestMethod `bson:"transformRequestMethod,omitempty" json:"transformRequestMethod,omitempty"`

	// TransformRequestBody allows you to transform request body.
	// When both `path` and `body` are provided, body would take precedence.
	TransformRequestBody TransformRequestBody `bson:"transformRequestBody,omitempty" json:"transformRequestBody,omitempty"`

	// Cache contains the caching plugin configuration.
	Cache CachePlugin `bson:"cache,omitempty" json:"cache,omitempty"`

	// EnforceTimeout contains the request timeout configuration.
	EnforceTimeout EnforceTimeout `bson:"enforceTimeout,omitempty" json:"enforceTimeout,omitempty"`

	// ValidateRequest contains the request validation configuration.
	ValidateRequest ValidateRequest `bson:"validateRequest,omitempty" json:"validateRequest,omitempty"`

	// MockResponse contains the mock response configuration.
	MockResponse MockResponse `bson:"mockResponse,omitempty" json:"mockResponse,omitempty"`

	// VirtualEndpoint contains virtual endpoint configuration.
	VirtualEndpoint VirtualEndpoint `bson:"virtualEndpoint,omitempty" json:"virtualEndpoint,omitempty"`

	// PostPlugins contains endpoint level post plugins configuration.
	PostPlugins EndpointPostPlugins `bson:"postPlugins,omitempty" json:"postPlugins,omitempty"`
}

// Operations holds Operation definitions.
type Operations map[string]interface{}

// Path holds plugin configurations for HTTP method verbs.
type Path struct {
	Delete Plugins `bson:"DELETE,omitempty" json:"DELETE,omitempty"`

	Get Plugins `bson:"GET,omitempty" json:"GET,omitempty"`

	Head Plugins `bson:"HEAD,omitempty" json:"HEAD,omitempty"`

	Options Plugins `bson:"OPTIONS,omitempty" json:"OPTIONS,omitempty"`

	Patch Plugins `bson:"PATCH,omitempty" json:"PATCH,omitempty"`

	Post Plugins `bson:"POST,omitempty" json:"POST,omitempty"`

	Put Plugins `bson:"PUT,omitempty" json:"PUT,omitempty"`

	Trace Plugins `bson:"TRACE,omitempty" json:"TRACE,omitempty"`

	Connect Plugins `bson:"CONNECT,omitempty" json:"CONNECT,omitempty"`
}

// Paths is a mapping of API endpoints to Path plugin configurations.
type Paths map[string]interface{}

// PinnedPublicKey contains a mapping from the domain name into a list of public keys.
type PinnedPublicKey struct {
	// Domain contains the domain name.
	Domain string `bson:"domain" json:"domain"`

	// PublicKeys contains a list of the public keys pinned to the domain name.
	PublicKeys []string `bson:"publicKeys" json:"publicKeys"`
}

// PinnedPublicKeys is a list of domains and pinned public keys for them.
type PinnedPublicKeys []PinnedPublicKey

// PluginBundle holds configuration for custom plugins.
type PluginBundle struct {
	// Enabled enables the custom plugin bundles.
	//
	// Tyk classic API definition: `custom_middleware_bundle_disabled`
	Enabled bool `bson:"enabled" json:"enabled"` // required.

	// Path is the path suffix to construct the URL to fetch plugin bundle from.
	// Path will be suffixed to `bundle_base_url` in gateway config.
	Path string `bson:"path" json:"path"` // required.
}

// PluginConfig holds configuration for custom plugins.
type PluginConfig struct {
	// Driver configures which custom plugin to be used.
	// It's value should be set to one of the following:
	//
	// - `otto`,
	// - `python`,
	// - `lua`,
	// - `grpc`,
	// - `goplugin`.
	//
	// Tyk classic API definition: `custom_middleware.driver`.
	Driver apidef.MiddlewareDriver `bson:"driver,omitempty" json:"driver,omitempty"`

	// Bundle configures custom plugin bundles.
	Bundle PluginBundle `bson:"bundle,omitempty" json:"bundle,omitempty"`

	// Data configures custom plugin data.
	Data PluginConfigData `bson:"data,omitempty" json:"data,omitempty"`
}

// PluginConfigData configures config data for custom plugins.
type PluginConfigData struct {
	// Enabled enables custom plugin config data.
	Enabled bool `bson:"enabled" json:"enabled"` // required.

	// Value is the value of custom plugin config data.
	Value map[string]interface{} `bson:"value" json:"value"` // required.
}

// Plugins configures common settings for each plugin, allowances, transforms, caching and timeouts.
type Plugins struct {
	// Allow request by allowance.
	Allow Allowance `bson:"allow,omitempty" json:"allow,omitempty"`

	// Block request by allowance.
	Block Allowance `bson:"block,omitempty" json:"block,omitempty"`

	// Ignore authentication on request by allowance.
	IgnoreAuthentication Allowance `bson:"ignoreAuthentication,omitempty" json:"ignoreAuthentication,omitempty"`

	// TransformRequestMethod allows you to transform the method of a request.
	TransformRequestMethod TransformRequestMethod `bson:"transformRequestMethod,omitempty" json:"transformRequestMethod,omitempty"`

	// Cache allows you to cache the server side response.
	Cache CachePlugin `bson:"cache,omitempty" json:"cache,omitempty"`

	// EnforceTimeout allows you to configure a request timeout.
	EnforceTimeout EnforceTimeout `bson:"enforcedTimeout,omitempty" json:"enforcedTimeout,omitempty"`
}

// PostAuthenticationPlugin configures post authentication plugins.
type PostAuthenticationPlugin struct {
	// Plugins configures custom plugins to be run on pre authentication stage.
	// The plugins would be executed in the order of configuration in the list.
	Plugins CustomPlugins `bson:"plugins,omitempty" json:"plugins,omitempty"`
}

// PostPlugin configures post plugins.
type PostPlugin struct {
	// Plugins configures custom plugins to be run on post stage.
	// The plugins would be executed in the order of configuration in the list.
	Plugins CustomPlugins `bson:"plugins,omitempty" json:"plugins,omitempty"`
}

// PrePlugin configures pre stage plugins.
type PrePlugin struct {
	// Plugins configures custom plugins to be run on pre authentication stage.
	// The plugins would be executed in the order of configuration in the list.
	Plugins CustomPlugins `bson:"plugins,omitempty" json:"plugins,omitempty"`
}

// Provider defines an issuer to validate and the Client ID to Policy ID mappings.
type Provider struct {
	// Issuer contains a validation value for the issuer claim, usually a domain name e.g. `accounts.google.com` or similar.
	Issuer string `bson:"issuer,omitempty" json:"issuer,omitempty"`

	// ClientToPolicyMapping contains mappings of Client IDs to Policy IDs.
	ClientToPolicyMapping []ClientToPolicy `bson:"clientToPolicyMapping,omitempty" json:"clientToPolicyMapping,omitempty"`
}

// ResponsePlugin configures response plugins.
type ResponsePlugin struct {
	// Plugins configures custom plugins to be run on post stage.
	// The plugins would be executed in the order of configuration in the list.
	Plugins CustomPlugins `bson:"plugins,omitempty" json:"plugins,omitempty"`
}

// ScopeToPolicy contains a single scope to policy ID mapping.
type ScopeToPolicy struct {
	// Scope contains the scope name.
	Scope string `bson:"scope,omitempty" json:"scope,omitempty"`

	// PolicyID contains the Policy ID.
	PolicyID string `bson:"policyId,omitempty" json:"policyId,omitempty"`
}

// Scopes holds the scope to policy mappings for a claim name.
type Scopes struct {
	// ClaimName contains the claim name.
	ClaimName string `bson:"claimName,omitempty" json:"claimName,omitempty"`

	// ScopeToPolicyMapping contains the mappings of scopes to policy IDs.
	ScopeToPolicyMapping []ScopeToPolicy `bson:"scopeToPolicyMapping,omitempty" json:"scopeToPolicyMapping,omitempty"`
}

// SecurityScheme defines an Importer interface for security schemes.
type SecurityScheme struct{}

// SecuritySchemes holds security scheme values, filled with Import().
type SecuritySchemes map[string]interface{}

// Server contains the configuration related to the OAS API definition.
type Server struct {
	// ListenPath represents the path to listen on. Any requests coming into the host, on the port that Tyk is configured to run on,
	// that match this path will have the rules defined in the API definition applied.
	ListenPath ListenPath `bson:"listenPath" json:"listenPath"` // required

	// Slug is the Tyk Cloud equivalent of listen path.
	// Tyk classic API definition: `slug`
	Slug string `bson:"slug,omitempty" json:"slug,omitempty"`

	// Authentication contains the configurations related to authentication to the API.
	Authentication Authentication `bson:"authentication,omitempty" json:"authentication,omitempty"`

	// ClientCertificates contains the configurations related to static mTLS.
	ClientCertificates ClientCertificates `bson:"clientCertificates,omitempty" json:"clientCertificates,omitempty"`

	// GatewayTags contains segment tags to configure which GWs your APIs connect to.
	GatewayTags GatewayTags `bson:"gatewayTags,omitempty" json:"gatewayTags,omitempty"`

	// CustomDomain is the domain to bind this API to.
	//
	// Tyk classic API definition: `domain`
	CustomDomain Domain `bson:"customDomain,omitempty" json:"customDomain,omitempty"`
}

// ServiceDiscovery holds configuration required for service discovery.
type ServiceDiscovery struct {
	// Enabled enables Service Discovery.
	//
	// Tyk classic API definition: `service_discovery.use_discovery_service`
	Enabled bool `bson:"enabled" json:"enabled"` // required

	// QueryEndpoint is the endpoint to call, this would usually be Consul, etcd or Eureka K/V store.
	// Tyk classic API definition: `service_discovery.query_endpoint`
	QueryEndpoint string `bson:"queryEndpoint,omitempty" json:"queryEndpoint,omitempty"`

	// DataPath is the namespace of the data path - where exactly in your service response the namespace can be found.
	// For example, if your service responds with:
	//
	// ```
	// {
	// "action": "get",
	// "node": {
	// "key": "/services/single",
	// "value": "http://httpbin.org:6000",
	// "modifiedIndex": 6,
	// "createdIndex": 6
	// }
	// }
	// ```
	//
	// then your namespace would be `node.value`.
	//
	// Tyk classic API definition: `service_discovery.data_path`
	DataPath string `bson:"dataPath,omitempty" json:"dataPath,omitempty"`

	// UseNestedQuery enables using a combination of `dataPath` and `parentDataPath`.
	// It is necessary when the data lives within this string-encoded JSON object.
	//
	// ```
	// {
	// "action": "get",
	// "node": {
	// "key": "/services/single",
	// "value": "{"hostname": "http://httpbin.org", "port": "80"}",
	// "modifiedIndex": 6,
	// "createdIndex": 6
	// }
	// }
	// ```
	//
	// Tyk classic API definition: `service_discovery.use_nested_query`
	UseNestedQuery bool `bson:"useNestedQuery,omitempty" json:"useNestedQuery,omitempty"`

	// ParentDataPath is the namespace of the where to find the nested
	// value, if `useNestedQuery` is `true`. In the above example, it
	// would be `node.value`. You would change the `dataPath` setting
	// to be `hostname`, since this is where the host name data
	// resides in the JSON string. Tyk automatically assumes that
	// `dataPath` in this case is in a string-encoded JSON object and
	// will try to deserialize it.
	//
	// Tyk classic API definition: `service_discovery.parent_data_path`
	ParentDataPath string `bson:"parentDataPath,omitempty" json:"parentDataPath,omitempty"`

	// PortDataPath is the port of the data path. In the above nested example, we can see that there is a separate `port` value
	// for the service in the nested JSON. In this case, you can set the `portDataPath` value and Tyk will treat `dataPath` as
	// the hostname and zip them together (this assumes that the hostname element does not end in a slash or resource identifier
	// such as `/widgets/`). In the above example, the `portDataPath` would be `port`.
	//
	// Tyk classic API definition: `service_discovery.port_data_path`
	PortDataPath string `bson:"portDataPath,omitempty" json:"portDataPath,omitempty"`

	// UseTargetList should be set to `true`, if you are using load balancing. Tyk will treat the data path as a list and
	// inject it into the target list of your API definition.
	//
	// Tyk classic API definition: `service_discovery.use_target_list`
	UseTargetList bool `bson:"useTargetList,omitempty" json:"useTargetList,omitempty"`

	// CacheTimeout is the timeout of a cache value when a new data is loaded from a discovery service.
	// Setting it too low will cause Tyk to call the SD service too often, setting it too high could mean that
	// failures are not recovered from quickly enough.
	//
	// Deprecated: The field is deprecated, usage needs to be updated to configure caching.
	//
	// Tyk classic API definition: `service_discovery.cache_timeout`
	CacheTimeout int64 `bson:"cacheTimeout,omitempty" json:"cacheTimeout,omitempty"`

	// Cache holds cache related flags.
	//
	// Tyk classic API definition:
	// - `service_discovery.cache_disabled`
	// - `service_discovery.cache_timeout`
	Cache ServiceDiscoveryCache `bson:"cache,omitempty" json:"cache,omitempty"`

	// TargetPath is to set a target path to append to the discovered endpoint, since many SD services
	// only provide host and port data. It is important to be able to target a specific resource on that host.
	// Setting this value will enable that.
	//
	// Tyk classic API definition: `service_discovery.target_path`
	TargetPath string `bson:"targetPath,omitempty" json:"targetPath,omitempty"`

	// EndpointReturnsList is set `true` when the response type is a list instead of an object.
	//
	// Tyk classic API definition: `service_discovery.endpoint_returns_list`
	EndpointReturnsList bool `bson:"endpointReturnsList,omitempty" json:"endpointReturnsList,omitempty"`
}

// ServiceDiscoveryCache holds configuration for caching ServiceDiscovery data.
type ServiceDiscoveryCache struct {
	// Enabled turns service discovery cache on or off.
	//
	// Tyk classic API definition: `service_discovery.cache_disabled`
	Enabled bool `bson:"enabled" json:"enabled"` // required

	// Timeout is the TTL for a cached object in seconds.
	//
	// Tyk classic API definition: `service_discovery.cache_timeout`
	Timeout int64 `bson:"timeout,omitempty" json:"timeout,omitempty"`
}

// Signature holds the configuration for signature validation.
type Signature struct {
	Enabled bool `bson:"enabled" json:"enabled"` // required

	Algorithm string `bson:"algorithm,omitempty" json:"algorithm,omitempty"`

	Header string `bson:"header,omitempty" json:"header,omitempty"`

	Query AuthSource `bson:"query,omitempty" json:"query,omitempty"`

	Secret string `bson:"secret,omitempty" json:"secret,omitempty"`

	AllowedClockSkew int64 `bson:"allowedClockSkew,omitempty" json:"allowedClockSkew,omitempty"`

	ErrorCode int `bson:"errorCode,omitempty" json:"errorCode,omitempty"`

	ErrorMessage string `bson:"errorMessage,omitempty" json:"errorMessage,omitempty"`
}

// State holds configuration about API definition states (active, internal).
type State struct {
	// Active enables the API.
	// Tyk classic API definition: `active`
	Active bool `bson:"active" json:"active"` // required

	// Internal makes the API accessible only internally.
	// Tyk classic API definition: `internal`
	Internal bool `bson:"internal,omitempty" json:"internal,omitempty"`
}

// StructInfo holds ast field information for the docs generator.
type StructInfo struct {
	// Name is struct go name.
	Name string

	// Fields holds information of the fields, if this object is a struct.
	Fields []*FieldInfo `json:"fields,omitempty"`
}

// Test holds the test configuration for service discovery.
type Test struct {
	// ServiceDiscovery contains the configuration related to test Service Discovery.
	// Tyk classic API definition: `proxy.service_discovery`
	ServiceDiscovery ServiceDiscovery `bson:"serviceDiscovery,omitempty" json:"serviceDiscovery,omitempty"`
}

// Token holds the values related to authentication tokens.
type Token struct {
	// Enabled enables the token based authentication mode.
	//
	// Tyk classic API definition: `auth_configs["authToken"].use_standard_auth`
	Enabled bool `bson:"enabled" json:"enabled"` // required

	// EnableClientCertificate allows to create dynamic keys based on certificates.
	//
	// Tyk classic API definition: `auth_configs["authToken"].use_certificate`
	EnableClientCertificate bool `bson:"enableClientCertificate,omitempty" json:"enableClientCertificate,omitempty"`

	// Signature holds the configuration for verifying the signature of the token.
	//
	// Tyk classic API definition: `auth_configs["authToken"].use_certificate`
	Signature Signature `bson:"signatureValidation,omitempty" json:"signatureValidation,omitempty"`
}

// TransformRequestBody holds configuration about body request transformations.
type TransformRequestBody struct {
	// Enabled enables transform request body middleware.
	Enabled bool `bson:"enabled" json:"enabled"`

	// Format of the request body, xml or json.
	Format apidef.RequestInputType `bson:"format" json:"format"`

	// Path file path for the template.
	Path string `bson:"path,omitempty" json:"path,omitempty"`

	// Body base64 encoded representation of the template.
	Body string `bson:"body,omitempty" json:"body,omitempty"`
}

// TransformRequestMethod holds configuration for rewriting request methods.
type TransformRequestMethod struct {
	// Enabled enables Method Transform for the given path and method.
	Enabled bool `bson:"enabled" json:"enabled"`

	// ToMethod is the http method value to which the method of an incoming request will be transformed.
	ToMethod string `bson:"toMethod" json:"toMethod"`
}

// TykExtensionConfigParams holds the essential configuration required for the Tyk Extension schema.
type TykExtensionConfigParams struct {
	UpstreamURL string

	ListenPath string

	CustomDomain string

	ApiID string

	Authentication bool

	AllowList bool

	ValidateRequest bool

	MockResponse bool
}

// Upstream holds configuration for an upstream server.
type Upstream struct {
	// URL defines the target URL that the request should be proxied to.
	// Tyk classic API definition: `proxy.target_url`
	URL string `bson:"url" json:"url"` // required

	// ServiceDiscovery contains the configuration related to Service Discovery.
	// Tyk classic API definition: `proxy.service_discovery`
	ServiceDiscovery ServiceDiscovery `bson:"serviceDiscovery,omitempty" json:"serviceDiscovery,omitempty"`

	// Test contains the configuration related to uptime tests.
	Test Test `bson:"test,omitempty" json:"test,omitempty"`

	// MutualTLS contains the configuration related to upstream mutual TLS.
	MutualTLS MutualTLS `bson:"mutualTLS,omitempty" json:"mutualTLS,omitempty"`

	// CertificatePinning contains the configuration related to certificate pinning.
	CertificatePinning CertificatePinning `bson:"certificatePinning,omitempty" json:"certificatePinning,omitempty"`
}

// ValidateRequest holds configuration required for validating requests.
type ValidateRequest struct {
	// Enabled is a boolean flag, if set to `true`, it enables request validation.
	Enabled bool `bson:"enabled" json:"enabled"`

	// ErrorResponseCode is the error code emitted when the request fails validation.
	// If unset or zero, the response will returned with http status 422 Unprocessable Entity.
	ErrorResponseCode int `bson:"errorResponseCode,omitempty" json:"errorResponseCode,omitempty"`
}

// VersionToID contains a single mapping from a version name into an API ID.
type VersionToID struct {
	// Name contains the user chosen version name, e.g. `v1` or similar.
	Name string `bson:"name" json:"name"`

	// ID is the API ID for the version set in Name.
	ID string `bson:"id" json:"id"`
}

// Versioning holds configuration for API versioning.
//
// Tyk classic API definition: `version_data`.
type Versioning struct {
	// Enabled is a boolean flag, if set to `true` it will enable versioning of an API.
	Enabled bool `bson:"enabled" json:"enabled"` // required

	// Name contains the name of the version as entered by the user ("v1" or similar).
	Name string `bson:"name,omitempty" json:"name,omitempty"`

	// Default contains the default version name if a request is issued without a version.
	Default string `bson:"default" json:"default"` // required

	// Location contains versioning location information. It can be one of the following:
	//
	// - `header`,
	// - `url-param`,
	// - `url`.
	Location string `bson:"location" json:"location"` // required

	// Key contains the name of the key to check for versioning information.
	Key string `bson:"key" json:"key"` // required

	// Versions contains a list of versions that map to individual API IDs.
	Versions []VersionToID `bson:"versions" json:"versions"` // required

	// StripVersioningData is a boolean flag, if set to `true`, the API responses will be stripped of versioning data.
	StripVersioningData bool `bson:"stripVersioningData,omitempty" json:"stripVersioningData,omitempty"`
}

// VirtualEndpoint contains virtual endpoint configuration.
type VirtualEndpoint struct {
	// Enabled enables virtual endpoint.
	Enabled bool `bson:"enabled" json:"enabled"` // required.

	// Name is the name of js function.
	Name string `bson:"name" json:"name"` // required.

	// Path is the path to js file.
	Path string `bson:"path,omitempty" json:"path,omitempty"`

	// Body is the js function to execute encoded in base64 format.
	Body string `bson:"body,omitempty" json:"body,omitempty"`

	// ProxyOnError proxies if virtual endpoint errors out.
	ProxyOnError bool `bson:"proxyOnError,omitempty" json:"proxyOnError,omitempty"`

	// RequireSession if enabled passes session to virtual endpoint.
	RequireSession bool `bson:"requireSession,omitempty" json:"requireSession,omitempty"`
}

// XTykAPIGateway contains custom Tyk API extensions for the OAS definition.
type XTykAPIGateway struct {
	// Info contains the main metadata about the API definition.
	Info Info `bson:"info" json:"info"` // required

	// Upstream contains the configurations related to the upstream.
	Upstream Upstream `bson:"upstream" json:"upstream"` // required

	// Server contains the configurations related to the server.
	Server Server `bson:"server" json:"server"` // required

	// Middleware contains the configurations related to the proxy middleware.
	Middleware Middleware `bson:"middleware,omitempty" json:"middleware,omitempty"`
}

// XTykDoc is a list of information for exported struct type info,
// starting from the root struct declaration(XTykGateway).
type XTykDoc []*StructInfo
